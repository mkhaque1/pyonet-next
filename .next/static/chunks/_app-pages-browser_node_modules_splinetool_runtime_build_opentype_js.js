"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["_app-pages-browser_node_modules_splinetool_runtime_build_opentype_js"],{

/***/ "(app-pages-browser)/./node_modules/@splinetool/runtime/build/opentype.js":
/*!************************************************************!*\
  !*** ./node_modules/@splinetool/runtime/build/opentype.js ***!
  \************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Bidi: function() { return /* binding */ ne; },\n/* harmony export */   BoundingBox: function() { return /* binding */ pe; },\n/* harmony export */   Font: function() { return /* binding */ w; },\n/* harmony export */   Glyph: function() { return /* binding */ Q; },\n/* harmony export */   Path: function() { return /* binding */ P; },\n/* harmony export */   _parse: function() { return /* binding */ k; },\n/* harmony export */   \"default\": function() { return /* binding */ Ho; },\n/* harmony export */   load: function() { return /* binding */ Bo; },\n/* harmony export */   loadSync: function() { return /* binding */ Io; },\n/* harmony export */   parse: function() { return /* binding */ Dr; }\n/* harmony export */ });\n/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"(app-pages-browser)/./node_modules/next/dist/compiled/buffer/index.js\")[\"Buffer\"];\nvar va = (e, r)=>()=>(r || e((r = {\n            exports: {}\n        }).exports, r), r.exports);\nvar Ne = va(_c = ()=>{});\n_c1 = Ne;\nString.prototype.codePointAt || function() {\n    var e = function() {\n        try {\n            var t = {}, a = Object.defineProperty, n = a(t, t, t) && a;\n        } catch (e) {}\n        return n;\n    }(), r = function(t) {\n        if (this == null) throw TypeError();\n        var a = String(this), n = a.length, s = t ? Number(t) : 0;\n        if (s != s && (s = 0), !(s < 0 || s >= n)) {\n            var i = a.charCodeAt(s), u;\n            return i >= 55296 && i <= 56319 && n > s + 1 && (u = a.charCodeAt(s + 1), u >= 56320 && u <= 57343) ? (i - 55296) * 1024 + u - 56320 + 65536 : i;\n        }\n    };\n    e ? e(String.prototype, \"codePointAt\", {\n        value: r,\n        configurable: !0,\n        writable: !0\n    }) : String.prototype.codePointAt = r;\n}();\nvar Sr = 0, xt = -3;\nfunction Le() {\n    this.table = new Uint16Array(16), this.trans = new Uint16Array(288);\n}\n_c2 = Le;\nfunction da(e, r) {\n    this.source = e, this.sourceIndex = 0, this.tag = 0, this.bitcount = 0, this.dest = r, this.destLen = 0, this.ltree = new Le, this.dtree = new Le;\n}\nvar bt = new Le, St = new Le, Tr = new Uint8Array(30), kr = new Uint16Array(30), Tt = new Uint8Array(30), kt = new Uint16Array(30), ga = new Uint8Array([\n    16,\n    17,\n    18,\n    0,\n    8,\n    7,\n    9,\n    6,\n    10,\n    5,\n    11,\n    4,\n    12,\n    3,\n    13,\n    2,\n    14,\n    1,\n    15\n]), Br = new Le, se = new Uint8Array(288 + 32);\nfunction Ft(e, r, t, a) {\n    var n, s;\n    for(n = 0; n < t; ++n)e[n] = 0;\n    for(n = 0; n < 30 - t; ++n)e[n + t] = n / t | 0;\n    for(s = a, n = 0; n < 30; ++n)r[n] = s, s += 1 << e[n];\n}\n_c3 = Ft;\nfunction ma(e, r) {\n    var t;\n    for(t = 0; t < 7; ++t)e.table[t] = 0;\n    for(e.table[7] = 24, e.table[8] = 152, e.table[9] = 112, t = 0; t < 24; ++t)e.trans[t] = 256 + t;\n    for(t = 0; t < 144; ++t)e.trans[24 + t] = t;\n    for(t = 0; t < 8; ++t)e.trans[24 + 144 + t] = 280 + t;\n    for(t = 0; t < 112; ++t)e.trans[24 + 144 + 8 + t] = 144 + t;\n    for(t = 0; t < 5; ++t)r.table[t] = 0;\n    for(r.table[5] = 32, t = 0; t < 32; ++t)r.trans[t] = t;\n}\nvar Ir = new Uint16Array(16);\nfunction ar(e, r, t, a) {\n    var n, s;\n    for(n = 0; n < 16; ++n)e.table[n] = 0;\n    for(n = 0; n < a; ++n)e.table[r[t + n]]++;\n    for(e.table[0] = 0, s = 0, n = 0; n < 16; ++n)Ir[n] = s, s += e.table[n];\n    for(n = 0; n < a; ++n)r[t + n] && (e.trans[Ir[r[t + n]]++] = n);\n}\nfunction ya(e) {\n    e.bitcount-- || (e.tag = e.source[e.sourceIndex++], e.bitcount = 7);\n    var r = e.tag & 1;\n    return e.tag >>>= 1, r;\n}\nfunction ie(e, r, t) {\n    if (!r) return t;\n    for(; e.bitcount < 24;)e.tag |= e.source[e.sourceIndex++] << e.bitcount, e.bitcount += 8;\n    var a = e.tag & 65535 >>> 16 - r;\n    return e.tag >>>= r, e.bitcount -= r, a + t;\n}\nfunction hr(e, r) {\n    for(; e.bitcount < 24;)e.tag |= e.source[e.sourceIndex++] << e.bitcount, e.bitcount += 8;\n    var t = 0, a = 0, n = 0, s = e.tag;\n    do a = 2 * a + (s & 1), s >>>= 1, ++n, t += r.table[n], a -= r.table[n];\n    while (a >= 0);\n    return e.tag = s, e.bitcount -= n, r.trans[t + a];\n}\nfunction xa(e, r, t) {\n    var a, n, s, i, u, o;\n    for(a = ie(e, 5, 257), n = ie(e, 5, 1), s = ie(e, 4, 4), i = 0; i < 19; ++i)se[i] = 0;\n    for(i = 0; i < s; ++i){\n        var l = ie(e, 3, 0);\n        se[ga[i]] = l;\n    }\n    for(ar(Br, se, 0, 19), u = 0; u < a + n;){\n        var f = hr(e, Br);\n        switch(f){\n            case 16:\n                var h = se[u - 1];\n                for(o = ie(e, 2, 3); o; --o)se[u++] = h;\n                break;\n            case 17:\n                for(o = ie(e, 3, 3); o; --o)se[u++] = 0;\n                break;\n            case 18:\n                for(o = ie(e, 7, 11); o; --o)se[u++] = 0;\n                break;\n            default:\n                se[u++] = f;\n                break;\n        }\n    }\n    ar(r, se, 0, a), ar(t, se, a, n);\n}\nfunction Mr(e, r, t) {\n    for(;;){\n        var a = hr(e, r);\n        if (a === 256) return Sr;\n        if (a < 256) e.dest[e.destLen++] = a;\n        else {\n            var n, s, i, u;\n            for(a -= 257, n = ie(e, Tr[a], kr[a]), s = hr(e, t), i = e.destLen - ie(e, Tt[s], kt[s]), u = i; u < i + n; ++u)e.dest[e.destLen++] = e.dest[u];\n        }\n    }\n}\n_c4 = Mr;\nfunction ba(e) {\n    for(var r, t, a; e.bitcount > 8;)e.sourceIndex--, e.bitcount -= 8;\n    if (r = e.source[e.sourceIndex + 1], r = 256 * r + e.source[e.sourceIndex], t = e.source[e.sourceIndex + 3], t = 256 * t + e.source[e.sourceIndex + 2], r !== (~t & 65535)) return xt;\n    for(e.sourceIndex += 4, a = r; a; --a)e.dest[e.destLen++] = e.source[e.sourceIndex++];\n    return e.bitcount = 0, Sr;\n}\nfunction Sa(e, r) {\n    var t = new da(e, r), a, n, s;\n    do {\n        switch(a = ya(t), n = ie(t, 2, 0), n){\n            case 0:\n                s = ba(t);\n                break;\n            case 1:\n                s = Mr(t, bt, St);\n                break;\n            case 2:\n                xa(t, t.ltree, t.dtree), s = Mr(t, t.ltree, t.dtree);\n                break;\n            default:\n                s = xt;\n        }\n        if (s !== Sr) throw new Error(\"Data error\");\n    }while (!a);\n    return t.destLen < t.dest.length ? typeof t.dest.slice == \"function\" ? t.dest.slice(0, t.destLen) : t.dest.subarray(0, t.destLen) : t.dest;\n}\n_c5 = Sa;\nma(bt, St);\nFt(Tr, kr, 4, 3);\nFt(Tt, kt, 2, 1);\nTr[28] = 0;\nkr[28] = 258;\nvar Ta = Sa;\nfunction Te(e, r, t, a, n) {\n    return Math.pow(1 - n, 3) * e + 3 * Math.pow(1 - n, 2) * n * r + 3 * (1 - n) * Math.pow(n, 2) * t + Math.pow(n, 3) * a;\n}\n_c6 = Te;\nfunction pe() {\n    this.x1 = Number.NaN, this.y1 = Number.NaN, this.x2 = Number.NaN, this.y2 = Number.NaN;\n}\npe.prototype.isEmpty = function() {\n    return isNaN(this.x1) || isNaN(this.y1) || isNaN(this.x2) || isNaN(this.y2);\n};\npe.prototype.addPoint = function(e, r) {\n    typeof e == \"number\" && ((isNaN(this.x1) || isNaN(this.x2)) && (this.x1 = e, this.x2 = e), e < this.x1 && (this.x1 = e), e > this.x2 && (this.x2 = e)), typeof r == \"number\" && ((isNaN(this.y1) || isNaN(this.y2)) && (this.y1 = r, this.y2 = r), r < this.y1 && (this.y1 = r), r > this.y2 && (this.y2 = r));\n};\npe.prototype.addX = function(e) {\n    this.addPoint(e, null);\n};\npe.prototype.addY = function(e) {\n    this.addPoint(null, e);\n};\npe.prototype.addBezier = function(e, r, t, a, n, s, i, u) {\n    var o = [\n        e,\n        r\n    ], l = [\n        t,\n        a\n    ], f = [\n        n,\n        s\n    ], h = [\n        i,\n        u\n    ];\n    this.addPoint(e, r), this.addPoint(i, u);\n    for(var p = 0; p <= 1; p++){\n        var c = 6 * o[p] - 12 * l[p] + 6 * f[p], d = -3 * o[p] + 9 * l[p] - 9 * f[p] + 3 * h[p], x = 3 * l[p] - 3 * o[p];\n        if (d === 0) {\n            if (c === 0) continue;\n            var m = -x / c;\n            0 < m && m < 1 && (p === 0 && this.addX(Te(o[p], l[p], f[p], h[p], m)), p === 1 && this.addY(Te(o[p], l[p], f[p], h[p], m)));\n            continue;\n        }\n        var y = Math.pow(c, 2) - 4 * x * d;\n        if (!(y < 0)) {\n            var C = (-c + Math.sqrt(y)) / (2 * d);\n            0 < C && C < 1 && (p === 0 && this.addX(Te(o[p], l[p], f[p], h[p], C)), p === 1 && this.addY(Te(o[p], l[p], f[p], h[p], C)));\n            var S = (-c - Math.sqrt(y)) / (2 * d);\n            0 < S && S < 1 && (p === 0 && this.addX(Te(o[p], l[p], f[p], h[p], S)), p === 1 && this.addY(Te(o[p], l[p], f[p], h[p], S)));\n        }\n    }\n};\npe.prototype.addQuad = function(e, r, t, a, n, s) {\n    var i = e + .6666666666666666 * (t - e), u = r + 2 / 3 * (a - r), o = i + 1 / 3 * (n - e), l = u + 1 / 3 * (s - r);\n    this.addBezier(e, r, i, u, o, l, n, s);\n};\nfunction P() {\n    this.commands = [], this.fill = \"black\", this.stroke = null, this.strokeWidth = 1;\n}\n_c7 = P;\nP.prototype.moveTo = function(e, r) {\n    this.commands.push({\n        type: \"M\",\n        x: e,\n        y: r\n    });\n};\nP.prototype.lineTo = function(e, r) {\n    this.commands.push({\n        type: \"L\",\n        x: e,\n        y: r\n    });\n};\nP.prototype.curveTo = P.prototype.bezierCurveTo = function(e, r, t, a, n, s) {\n    this.commands.push({\n        type: \"C\",\n        x1: e,\n        y1: r,\n        x2: t,\n        y2: a,\n        x: n,\n        y: s\n    });\n};\nP.prototype.quadTo = P.prototype.quadraticCurveTo = function(e, r, t, a) {\n    this.commands.push({\n        type: \"Q\",\n        x1: e,\n        y1: r,\n        x: t,\n        y: a\n    });\n};\nP.prototype.close = P.prototype.closePath = function() {\n    this.commands.push({\n        type: \"Z\"\n    });\n};\nP.prototype.extend = function(e) {\n    if (e.commands) e = e.commands;\n    else if (e instanceof pe) {\n        var r = e;\n        this.moveTo(r.x1, r.y1), this.lineTo(r.x2, r.y1), this.lineTo(r.x2, r.y2), this.lineTo(r.x1, r.y2), this.close();\n        return;\n    }\n    Array.prototype.push.apply(this.commands, e);\n};\nP.prototype.getBoundingBox = function() {\n    for(var e = new pe, r = 0, t = 0, a = 0, n = 0, s = 0; s < this.commands.length; s++){\n        var i = this.commands[s];\n        switch(i.type){\n            case \"M\":\n                e.addPoint(i.x, i.y), r = a = i.x, t = n = i.y;\n                break;\n            case \"L\":\n                e.addPoint(i.x, i.y), a = i.x, n = i.y;\n                break;\n            case \"Q\":\n                e.addQuad(a, n, i.x1, i.y1, i.x, i.y), a = i.x, n = i.y;\n                break;\n            case \"C\":\n                e.addBezier(a, n, i.x1, i.y1, i.x2, i.y2, i.x, i.y), a = i.x, n = i.y;\n                break;\n            case \"Z\":\n                a = r, n = t;\n                break;\n            default:\n                throw new Error(\"Unexpected path command \" + i.type);\n        }\n    }\n    return e.isEmpty() && e.addPoint(0, 0), e;\n};\nP.prototype.draw = function(e) {\n    e.beginPath();\n    for(var r = 0; r < this.commands.length; r += 1){\n        var t = this.commands[r];\n        t.type === \"M\" ? e.moveTo(t.x, t.y) : t.type === \"L\" ? e.lineTo(t.x, t.y) : t.type === \"C\" ? e.bezierCurveTo(t.x1, t.y1, t.x2, t.y2, t.x, t.y) : t.type === \"Q\" ? e.quadraticCurveTo(t.x1, t.y1, t.x, t.y) : t.type === \"Z\" && e.closePath();\n    }\n    this.fill && (e.fillStyle = this.fill, e.fill()), this.stroke && (e.strokeStyle = this.stroke, e.lineWidth = this.strokeWidth, e.stroke());\n};\nP.prototype.toPathData = function(e) {\n    e = e !== void 0 ? e : 2;\n    function r(i) {\n        return Math.round(i) === i ? \"\" + Math.round(i) : i.toFixed(e);\n    }\n    function t() {\n        for(var i = arguments, u = \"\", o = 0; o < arguments.length; o += 1){\n            var l = i[o];\n            l >= 0 && o > 0 && (u += \" \"), u += r(l);\n        }\n        return u;\n    }\n    for(var a = \"\", n = 0; n < this.commands.length; n += 1){\n        var s = this.commands[n];\n        s.type === \"M\" ? a += \"M\" + t(s.x, s.y) : s.type === \"L\" ? a += \"L\" + t(s.x, s.y) : s.type === \"C\" ? a += \"C\" + t(s.x1, s.y1, s.x2, s.y2, s.x, s.y) : s.type === \"Q\" ? a += \"Q\" + t(s.x1, s.y1, s.x, s.y) : s.type === \"Z\" && (a += \"Z\");\n    }\n    return a;\n};\nP.prototype.toSVG = function(e) {\n    var r = '<path d=\"';\n    return r += this.toPathData(e), r += '\"', this.fill && this.fill !== \"black\" && (this.fill === null ? r += ' fill=\"none\"' : r += ' fill=\"' + this.fill + '\"'), this.stroke && (r += ' stroke=\"' + this.stroke + '\" stroke-width=\"' + this.strokeWidth + '\"'), r += \"/>\", r;\n};\nP.prototype.toDOMElement = function(e) {\n    var r = this.toPathData(e), t = document.createElementNS(\"http://www.w3.org/2000/svg\", \"path\");\n    return t.setAttribute(\"d\", r), t;\n};\nfunction Ut(e) {\n    throw new Error(e);\n}\n_c8 = Ut;\nfunction Pr(e, r) {\n    e || Ut(r);\n}\n_c9 = Pr;\nvar U = {\n    fail: Ut,\n    argument: Pr,\n    assert: Pr\n}, Gr = 32768, Nr = 2147483648, Fe = {}, g = {}, E = {};\nfunction ae(e) {\n    return function() {\n        return e;\n    };\n}\ng.BYTE = function(e) {\n    return U.argument(e >= 0 && e <= 255, \"Byte value should be between 0 and 255.\"), [\n        e\n    ];\n};\nE.BYTE = ae(1);\ng.CHAR = function(e) {\n    return [\n        e.charCodeAt(0)\n    ];\n};\nE.CHAR = ae(1);\ng.CHARARRAY = function(e) {\n    typeof e > \"u\" && (e = \"\", console.warn(\"Undefined CHARARRAY encountered and treated as an empty string. This is probably caused by a missing glyph name.\"));\n    for(var r = [], t = 0; t < e.length; t += 1)r[t] = e.charCodeAt(t);\n    return r;\n};\nE.CHARARRAY = function(e) {\n    return typeof e > \"u\" ? 0 : e.length;\n};\ng.USHORT = function(e) {\n    return [\n        e >> 8 & 255,\n        e & 255\n    ];\n};\nE.USHORT = ae(2);\ng.SHORT = function(e) {\n    return e >= Gr && (e = -(2 * Gr - e)), [\n        e >> 8 & 255,\n        e & 255\n    ];\n};\nE.SHORT = ae(2);\ng.UINT24 = function(e) {\n    return [\n        e >> 16 & 255,\n        e >> 8 & 255,\n        e & 255\n    ];\n};\nE.UINT24 = ae(3);\ng.ULONG = function(e) {\n    return [\n        e >> 24 & 255,\n        e >> 16 & 255,\n        e >> 8 & 255,\n        e & 255\n    ];\n};\nE.ULONG = ae(4);\ng.LONG = function(e) {\n    return e >= Nr && (e = -(2 * Nr - e)), [\n        e >> 24 & 255,\n        e >> 16 & 255,\n        e >> 8 & 255,\n        e & 255\n    ];\n};\nE.LONG = ae(4);\ng.FIXED = g.ULONG;\nE.FIXED = E.ULONG;\ng.FWORD = g.SHORT;\nE.FWORD = E.SHORT;\ng.UFWORD = g.USHORT;\nE.UFWORD = E.USHORT;\ng.LONGDATETIME = function(e) {\n    return [\n        0,\n        0,\n        0,\n        0,\n        e >> 24 & 255,\n        e >> 16 & 255,\n        e >> 8 & 255,\n        e & 255\n    ];\n};\nE.LONGDATETIME = ae(8);\ng.TAG = function(e) {\n    return U.argument(e.length === 4, \"Tag should be exactly 4 ASCII characters.\"), [\n        e.charCodeAt(0),\n        e.charCodeAt(1),\n        e.charCodeAt(2),\n        e.charCodeAt(3)\n    ];\n};\nE.TAG = ae(4);\ng.Card8 = g.BYTE;\nE.Card8 = E.BYTE;\ng.Card16 = g.USHORT;\nE.Card16 = E.USHORT;\ng.OffSize = g.BYTE;\nE.OffSize = E.BYTE;\ng.SID = g.USHORT;\nE.SID = E.USHORT;\ng.NUMBER = function(e) {\n    return e >= -107 && e <= 107 ? [\n        e + 139\n    ] : e >= 108 && e <= 1131 ? (e = e - 108, [\n        (e >> 8) + 247,\n        e & 255\n    ]) : e >= -1131 && e <= -108 ? (e = -e - 108, [\n        (e >> 8) + 251,\n        e & 255\n    ]) : e >= -32768 && e <= 32767 ? g.NUMBER16(e) : g.NUMBER32(e);\n};\nE.NUMBER = function(e) {\n    return g.NUMBER(e).length;\n};\ng.NUMBER16 = function(e) {\n    return [\n        28,\n        e >> 8 & 255,\n        e & 255\n    ];\n};\nE.NUMBER16 = ae(3);\ng.NUMBER32 = function(e) {\n    return [\n        29,\n        e >> 24 & 255,\n        e >> 16 & 255,\n        e >> 8 & 255,\n        e & 255\n    ];\n};\nE.NUMBER32 = ae(5);\ng.REAL = function(e) {\n    var r = e.toString(), t = /\\.(\\d*?)(?:9{5,20}|0{5,20})\\d{0,2}(?:e(.+)|$)/.exec(r);\n    if (t) {\n        var a = parseFloat(\"1e\" + ((t[2] ? +t[2] : 0) + t[1].length));\n        r = (Math.round(e * a) / a).toString();\n    }\n    for(var n = \"\", s = 0, i = r.length; s < i; s += 1){\n        var u = r[s];\n        u === \"e\" ? n += r[++s] === \"-\" ? \"c\" : \"b\" : u === \".\" ? n += \"a\" : u === \"-\" ? n += \"e\" : n += u;\n    }\n    n += n.length & 1 ? \"f\" : \"ff\";\n    for(var o = [\n        30\n    ], l = 0, f = n.length; l < f; l += 2)o.push(parseInt(n.substr(l, 2), 16));\n    return o;\n};\nE.REAL = function(e) {\n    return g.REAL(e).length;\n};\ng.NAME = g.CHARARRAY;\nE.NAME = E.CHARARRAY;\ng.STRING = g.CHARARRAY;\nE.STRING = E.CHARARRAY;\nFe.UTF8 = function(e, r, t) {\n    for(var a = [], n = t, s = 0; s < n; s++, r += 1)a[s] = e.getUint8(r);\n    return String.fromCharCode.apply(null, a);\n};\nFe.UTF16 = function(e, r, t) {\n    for(var a = [], n = t / 2, s = 0; s < n; s++, r += 2)a[s] = e.getUint16(r);\n    return String.fromCharCode.apply(null, a);\n};\ng.UTF16 = function(e) {\n    for(var r = [], t = 0; t < e.length; t += 1){\n        var a = e.charCodeAt(t);\n        r[r.length] = a >> 8 & 255, r[r.length] = a & 255;\n    }\n    return r;\n};\nE.UTF16 = function(e) {\n    return e.length * 2;\n};\nvar cr = {\n    \"x-mac-croatian\": \"\\xc4\\xc5\\xc7\\xc9\\xd1\\xd6\\xdc\\xe1\\xe0\\xe2\\xe4\\xe3\\xe5\\xe7\\xe9\\xe8\\xea\\xeb\\xed\\xec\\xee\\xef\\xf1\\xf3\\xf2\\xf4\\xf6\\xf5\\xfa\\xf9\\xfb\\xfc†\\xb0\\xa2\\xa3\\xa7•\\xb6\\xdf\\xaeŠ™\\xb4\\xa8≠Ž\\xd8∞\\xb1≤≥∆\\xb5∂∑∏š∫\\xaa\\xbaΩž\\xf8\\xbf\\xa1\\xac√ƒ≈Ć\\xabČ…\\xa0\\xc0\\xc3\\xd5ŒœĐ—“”‘’\\xf7◊\\xa9⁄€‹›\\xc6\\xbb–\\xb7‚„‰\\xc2ć\\xc1č\\xc8\\xcd\\xce\\xcf\\xcc\\xd3\\xd4đ\\xd2\\xda\\xdb\\xd9ıˆ˜\\xafπ\\xcb˚\\xb8\\xca\\xe6ˇ\",\n    \"x-mac-cyrillic\": \"АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ†\\xb0Ґ\\xa3\\xa7•\\xb6І\\xae\\xa9™Ђђ≠Ѓѓ∞\\xb1≤≥і\\xb5ґЈЄєЇїЉљЊњјЅ\\xac√ƒ≈∆\\xab\\xbb…\\xa0ЋћЌќѕ–—“”‘’\\xf7„ЎўЏџ№Ёёяабвгдежзийклмнопрстуфхцчшщъыьэю\",\n    \"x-mac-gaelic\": \"\\xc4\\xc5\\xc7\\xc9\\xd1\\xd6\\xdc\\xe1\\xe0\\xe2\\xe4\\xe3\\xe5\\xe7\\xe9\\xe8\\xea\\xeb\\xed\\xec\\xee\\xef\\xf1\\xf3\\xf2\\xf4\\xf6\\xf5\\xfa\\xf9\\xfb\\xfc†\\xb0\\xa2\\xa3\\xa7•\\xb6\\xdf\\xae\\xa9™\\xb4\\xa8≠\\xc6\\xd8Ḃ\\xb1≤≥ḃĊċḊḋḞḟĠġṀ\\xe6\\xf8ṁṖṗɼƒſṠ\\xab\\xbb…\\xa0\\xc0\\xc3\\xd5Œœ–—“”‘’ṡẛ\\xffŸṪ€‹›Ŷŷṫ\\xb7Ỳỳ⁊\\xc2\\xca\\xc1\\xcb\\xc8\\xcd\\xce\\xcf\\xcc\\xd3\\xd4♣\\xd2\\xda\\xdb\\xd9ı\\xdd\\xfdŴŵẄẅẀẁẂẃ\",\n    \"x-mac-greek\": \"\\xc4\\xb9\\xb2\\xc9\\xb3\\xd6\\xdc΅\\xe0\\xe2\\xe4΄\\xa8\\xe7\\xe9\\xe8\\xea\\xeb\\xa3™\\xee\\xef•\\xbd‰\\xf4\\xf6\\xa6€\\xf9\\xfb\\xfc†ΓΔΘΛΞΠ\\xdf\\xae\\xa9ΣΪ\\xa7≠\\xb0\\xb7Α\\xb1≤≥\\xa5ΒΕΖΗΙΚΜΦΫΨΩάΝ\\xacΟΡ≈Τ\\xab\\xbb…\\xa0ΥΧΆΈœ–―“”‘’\\xf7ΉΊΌΎέήίόΏύαβψδεφγηιξκλμνοπώρστθωςχυζϊϋΐΰ\\xad\",\n    \"x-mac-icelandic\": \"\\xc4\\xc5\\xc7\\xc9\\xd1\\xd6\\xdc\\xe1\\xe0\\xe2\\xe4\\xe3\\xe5\\xe7\\xe9\\xe8\\xea\\xeb\\xed\\xec\\xee\\xef\\xf1\\xf3\\xf2\\xf4\\xf6\\xf5\\xfa\\xf9\\xfb\\xfc\\xdd\\xb0\\xa2\\xa3\\xa7•\\xb6\\xdf\\xae\\xa9™\\xb4\\xa8≠\\xc6\\xd8∞\\xb1≤≥\\xa5\\xb5∂∑∏π∫\\xaa\\xbaΩ\\xe6\\xf8\\xbf\\xa1\\xac√ƒ≈∆\\xab\\xbb…\\xa0\\xc0\\xc3\\xd5Œœ–—“”‘’\\xf7◊\\xffŸ⁄€\\xd0\\xf0\\xde\\xfe\\xfd\\xb7‚„‰\\xc2\\xca\\xc1\\xcb\\xc8\\xcd\\xce\\xcf\\xcc\\xd3\\xd4\\xd2\\xda\\xdb\\xd9ıˆ˜\\xaf˘˙˚\\xb8˝˛ˇ\",\n    \"x-mac-inuit\": \"ᐃᐄᐅᐆᐊᐋᐱᐲᐳᐴᐸᐹᑉᑎᑏᑐᑑᑕᑖᑦᑭᑮᑯᑰᑲᑳᒃᒋᒌᒍᒎᒐᒑ\\xb0ᒡᒥᒦ•\\xb6ᒧ\\xae\\xa9™ᒨᒪᒫᒻᓂᓃᓄᓅᓇᓈᓐᓯᓰᓱᓲᓴᓵᔅᓕᓖᓗᓘᓚᓛᓪᔨᔩᔪᔫᔭ…\\xa0ᔮᔾᕕᕖᕗ–—“”‘’ᕘᕙᕚᕝᕆᕇᕈᕉᕋᕌᕐᕿᖀᖁᖂᖃᖄᖅᖏᖐᖑᖒᖓᖔᖕᙱᙲᙳᙴᙵᙶᖖᖠᖡᖢᖣᖤᖥᖦᕼŁł\",\n    \"x-mac-ce\": \"\\xc4Āā\\xc9Ą\\xd6\\xdc\\xe1ąČ\\xe4čĆć\\xe9ŹźĎ\\xedďĒēĖ\\xf3ė\\xf4\\xf6\\xf5\\xfaĚě\\xfc†\\xb0Ę\\xa3\\xa7•\\xb6\\xdf\\xae\\xa9™ę\\xa8≠ģĮįĪ≤≥īĶ∂∑łĻļĽľĹĺŅņŃ\\xac√ńŇ∆\\xab\\xbb…\\xa0ňŐ\\xd5őŌ–—“”‘’\\xf7◊ōŔŕŘ‹›řŖŗŠ‚„šŚś\\xc1Ťť\\xcdŽžŪ\\xd3\\xd4ūŮ\\xdaůŰűŲų\\xdd\\xfdķŻŁżĢˇ\",\n    macintosh: \"\\xc4\\xc5\\xc7\\xc9\\xd1\\xd6\\xdc\\xe1\\xe0\\xe2\\xe4\\xe3\\xe5\\xe7\\xe9\\xe8\\xea\\xeb\\xed\\xec\\xee\\xef\\xf1\\xf3\\xf2\\xf4\\xf6\\xf5\\xfa\\xf9\\xfb\\xfc†\\xb0\\xa2\\xa3\\xa7•\\xb6\\xdf\\xae\\xa9™\\xb4\\xa8≠\\xc6\\xd8∞\\xb1≤≥\\xa5\\xb5∂∑∏π∫\\xaa\\xbaΩ\\xe6\\xf8\\xbf\\xa1\\xac√ƒ≈∆\\xab\\xbb…\\xa0\\xc0\\xc3\\xd5Œœ–—“”‘’\\xf7◊\\xffŸ⁄€‹›ﬁﬂ‡\\xb7‚„‰\\xc2\\xca\\xc1\\xcb\\xc8\\xcd\\xce\\xcf\\xcc\\xd3\\xd4\\xd2\\xda\\xdb\\xd9ıˆ˜\\xaf˘˙˚\\xb8˝˛ˇ\",\n    \"x-mac-romanian\": \"\\xc4\\xc5\\xc7\\xc9\\xd1\\xd6\\xdc\\xe1\\xe0\\xe2\\xe4\\xe3\\xe5\\xe7\\xe9\\xe8\\xea\\xeb\\xed\\xec\\xee\\xef\\xf1\\xf3\\xf2\\xf4\\xf6\\xf5\\xfa\\xf9\\xfb\\xfc†\\xb0\\xa2\\xa3\\xa7•\\xb6\\xdf\\xae\\xa9™\\xb4\\xa8≠ĂȘ∞\\xb1≤≥\\xa5\\xb5∂∑∏π∫\\xaa\\xbaΩăș\\xbf\\xa1\\xac√ƒ≈∆\\xab\\xbb…\\xa0\\xc0\\xc3\\xd5Œœ–—“”‘’\\xf7◊\\xffŸ⁄€‹›Țț‡\\xb7‚„‰\\xc2\\xca\\xc1\\xcb\\xc8\\xcd\\xce\\xcf\\xcc\\xd3\\xd4\\xd2\\xda\\xdb\\xd9ıˆ˜\\xaf˘˙˚\\xb8˝˛ˇ\",\n    \"x-mac-turkish\": \"\\xc4\\xc5\\xc7\\xc9\\xd1\\xd6\\xdc\\xe1\\xe0\\xe2\\xe4\\xe3\\xe5\\xe7\\xe9\\xe8\\xea\\xeb\\xed\\xec\\xee\\xef\\xf1\\xf3\\xf2\\xf4\\xf6\\xf5\\xfa\\xf9\\xfb\\xfc†\\xb0\\xa2\\xa3\\xa7•\\xb6\\xdf\\xae\\xa9™\\xb4\\xa8≠\\xc6\\xd8∞\\xb1≤≥\\xa5\\xb5∂∑∏π∫\\xaa\\xbaΩ\\xe6\\xf8\\xbf\\xa1\\xac√ƒ≈∆\\xab\\xbb…\\xa0\\xc0\\xc3\\xd5Œœ–—“”‘’\\xf7◊\\xffŸĞğİıŞş‡\\xb7‚„‰\\xc2\\xca\\xc1\\xcb\\xc8\\xcd\\xce\\xcf\\xcc\\xd3\\xd4\\xd2\\xda\\xdb\\xd9ˆ˜\\xaf˘˙˚\\xb8˝˛ˇ\"\n};\nFe.MACSTRING = function(e, r, t, a) {\n    var n = cr[a];\n    if (n !== void 0) {\n        for(var s = \"\", i = 0; i < t; i++){\n            var u = e.getUint8(r + i);\n            u <= 127 ? s += String.fromCharCode(u) : s += n[u & 127];\n        }\n        return s;\n    }\n};\nvar He = typeof WeakMap == \"function\" && new WeakMap, ze, ka = function(e) {\n    if (!ze) {\n        ze = {};\n        for(var r in cr)ze[r] = new String(r);\n    }\n    var t = ze[e];\n    if (t !== void 0) {\n        if (He) {\n            var a = He.get(t);\n            if (a !== void 0) return a;\n        }\n        var n = cr[e];\n        if (n !== void 0) {\n            for(var s = {}, i = 0; i < n.length; i++)s[n.charCodeAt(i)] = i + 128;\n            return He && He.set(t, s), s;\n        }\n    }\n};\ng.MACSTRING = function(e, r) {\n    var t = ka(r);\n    if (t !== void 0) {\n        for(var a = [], n = 0; n < e.length; n++){\n            var s = e.charCodeAt(n);\n            if (s >= 128 && (s = t[s], s === void 0)) return;\n            a[n] = s;\n        }\n        return a;\n    }\n};\nE.MACSTRING = function(e, r) {\n    var t = g.MACSTRING(e, r);\n    return t !== void 0 ? t.length : 0;\n};\nfunction vr(e) {\n    return e >= -128 && e <= 127;\n}\nfunction Fa(e, r, t) {\n    for(var a = 0, n = e.length; r < n && a < 64 && e[r] === 0;)++r, ++a;\n    return t.push(128 | a - 1), r;\n}\n_c10 = Fa;\nfunction Ua(e, r, t) {\n    for(var a = 0, n = e.length, s = r; s < n && a < 64;){\n        var i = e[s];\n        if (!vr(i) || i === 0 && s + 1 < n && e[s + 1] === 0) break;\n        ++s, ++a;\n    }\n    t.push(a - 1);\n    for(var u = r; u < s; ++u)t.push(e[u] + 256 & 255);\n    return s;\n}\n_c11 = Ua;\nfunction Ca(e, r, t) {\n    for(var a = 0, n = e.length, s = r; s < n && a < 64;){\n        var i = e[s];\n        if (i === 0 || vr(i) && s + 1 < n && vr(e[s + 1])) break;\n        ++s, ++a;\n    }\n    t.push(64 | a - 1);\n    for(var u = r; u < s; ++u){\n        var o = e[u];\n        t.push(o + 65536 >> 8 & 255, o + 256 & 255);\n    }\n    return s;\n}\n_c12 = Ca;\ng.VARDELTAS = function(e) {\n    for(var r = 0, t = []; r < e.length;){\n        var a = e[r];\n        a === 0 ? r = Fa(e, r, t) : a >= -128 && a <= 127 ? r = Ua(e, r, t) : r = Ca(e, r, t);\n    }\n    return t;\n};\ng.INDEX = function(e) {\n    for(var r = 1, t = [\n        r\n    ], a = [], n = 0; n < e.length; n += 1){\n        var s = g.OBJECT(e[n]);\n        Array.prototype.push.apply(a, s), r += s.length, t.push(r);\n    }\n    if (a.length === 0) return [\n        0,\n        0\n    ];\n    for(var i = [], u = 1 + Math.floor(Math.log(r) / Math.log(2)) / 8 | 0, o = [\n        void 0,\n        g.BYTE,\n        g.USHORT,\n        g.UINT24,\n        g.ULONG\n    ][u], l = 0; l < t.length; l += 1){\n        var f = o(t[l]);\n        Array.prototype.push.apply(i, f);\n    }\n    return Array.prototype.concat(g.Card16(e.length), g.OffSize(u), i, a);\n};\nE.INDEX = function(e) {\n    return g.INDEX(e).length;\n};\ng.DICT = function(e) {\n    for(var r = [], t = Object.keys(e), a = t.length, n = 0; n < a; n += 1){\n        var s = parseInt(t[n], 0), i = e[s];\n        r = r.concat(g.OPERAND(i.value, i.type)), r = r.concat(g.OPERATOR(s));\n    }\n    return r;\n};\nE.DICT = function(e) {\n    return g.DICT(e).length;\n};\ng.OPERATOR = function(e) {\n    return e < 1200 ? [\n        e\n    ] : [\n        12,\n        e - 1200\n    ];\n};\ng.OPERAND = function(e, r) {\n    var t = [];\n    if (Array.isArray(r)) for(var a = 0; a < r.length; a += 1)U.argument(e.length === r.length, \"Not enough arguments given for type\" + r), t = t.concat(g.OPERAND(e[a], r[a]));\n    else if (r === \"SID\") t = t.concat(g.NUMBER(e));\n    else if (r === \"offset\") t = t.concat(g.NUMBER32(e));\n    else if (r === \"number\") t = t.concat(g.NUMBER(e));\n    else if (r === \"real\") t = t.concat(g.REAL(e));\n    else throw new Error(\"Unknown operand type \" + r);\n    return t;\n};\ng.OP = g.BYTE;\nE.OP = E.BYTE;\nvar We = typeof WeakMap == \"function\" && new WeakMap;\ng.CHARSTRING = function(e) {\n    if (We) {\n        var r = We.get(e);\n        if (r !== void 0) return r;\n    }\n    for(var t = [], a = e.length, n = 0; n < a; n += 1){\n        var s = e[n];\n        t = t.concat(g[s.type](s.value));\n    }\n    return We && We.set(e, t), t;\n};\nE.CHARSTRING = function(e) {\n    return g.CHARSTRING(e).length;\n};\ng.OBJECT = function(e) {\n    var r = g[e.type];\n    return U.argument(r !== void 0, \"No encoding function for type \" + e.type), r(e.value);\n};\nE.OBJECT = function(e) {\n    var r = E[e.type];\n    return U.argument(r !== void 0, \"No sizeOf function for type \" + e.type), r(e.value);\n};\ng.TABLE = function(e) {\n    for(var r = [], t = e.fields.length, a = [], n = [], s = 0; s < t; s += 1){\n        var i = e.fields[s], u = g[i.type];\n        U.argument(u !== void 0, \"No encoding function for field type \" + i.type + \" (\" + i.name + \")\");\n        var o = e[i.name];\n        o === void 0 && (o = i.value);\n        var l = u(o);\n        i.type === \"TABLE\" ? (n.push(r.length), r = r.concat([\n            0,\n            0\n        ]), a.push(l)) : r = r.concat(l);\n    }\n    for(var f = 0; f < a.length; f += 1){\n        var h = n[f], p = r.length;\n        U.argument(p < 65536, \"Table \" + e.tableName + \" too big.\"), r[h] = p >> 8, r[h + 1] = p & 255, r = r.concat(a[f]);\n    }\n    return r;\n};\nE.TABLE = function(e) {\n    for(var r = 0, t = e.fields.length, a = 0; a < t; a += 1){\n        var n = e.fields[a], s = E[n.type];\n        U.argument(s !== void 0, \"No sizeOf function for field type \" + n.type + \" (\" + n.name + \")\");\n        var i = e[n.name];\n        i === void 0 && (i = n.value), r += s(i), n.type === \"TABLE\" && (r += 2);\n    }\n    return r;\n};\ng.RECORD = g.TABLE;\nE.RECORD = E.TABLE;\ng.LITERAL = function(e) {\n    return e;\n};\nE.LITERAL = function(e) {\n    return e.length;\n};\nfunction z(e, r, t) {\n    if (r.length && (r[0].name !== \"coverageFormat\" || r[0].value === 1)) for(var a = 0; a < r.length; a += 1){\n        var n = r[a];\n        this[n.name] = n.value;\n    }\n    if (this.tableName = e, this.fields = r, t) for(var s = Object.keys(t), i = 0; i < s.length; i += 1){\n        var u = s[i], o = t[u];\n        this[u] !== void 0 && (this[u] = o);\n    }\n}\nz.prototype.encode = function() {\n    return g.TABLE(this);\n};\nz.prototype.sizeOf = function() {\n    return E.TABLE(this);\n};\nfunction Re(e, r, t) {\n    t === void 0 && (t = r.length);\n    var a = new Array(r.length + 1);\n    a[0] = {\n        name: e + \"Count\",\n        type: \"USHORT\",\n        value: t\n    };\n    for(var n = 0; n < r.length; n++)a[n + 1] = {\n        name: e + n,\n        type: \"USHORT\",\n        value: r[n]\n    };\n    return a;\n}\n_c13 = Re;\nfunction dr(e, r, t) {\n    var a = r.length, n = new Array(a + 1);\n    n[0] = {\n        name: e + \"Count\",\n        type: \"USHORT\",\n        value: a\n    };\n    for(var s = 0; s < a; s++)n[s + 1] = {\n        name: e + s,\n        type: \"TABLE\",\n        value: t(r[s], s)\n    };\n    return n;\n}\nfunction we(e, r, t) {\n    var a = r.length, n = [];\n    n[0] = {\n        name: e + \"Count\",\n        type: \"USHORT\",\n        value: a\n    };\n    for(var s = 0; s < a; s++)n = n.concat(t(r[s], s));\n    return n;\n}\nfunction Ye(e) {\n    e.format === 1 ? z.call(this, \"coverageTable\", [\n        {\n            name: \"coverageFormat\",\n            type: \"USHORT\",\n            value: 1\n        }\n    ].concat(Re(\"glyph\", e.glyphs))) : e.format === 2 ? z.call(this, \"coverageTable\", [\n        {\n            name: \"coverageFormat\",\n            type: \"USHORT\",\n            value: 2\n        }\n    ].concat(we(\"rangeRecord\", e.ranges, function(r) {\n        return [\n            {\n                name: \"startGlyphID\",\n                type: \"USHORT\",\n                value: r.start\n            },\n            {\n                name: \"endGlyphID\",\n                type: \"USHORT\",\n                value: r.end\n            },\n            {\n                name: \"startCoverageIndex\",\n                type: \"USHORT\",\n                value: r.index\n            }\n        ];\n    }))) : U.assert(!1, \"Coverage format must be 1 or 2.\");\n}\n_c14 = Ye;\nYe.prototype = Object.create(z.prototype);\nYe.prototype.constructor = Ye;\nfunction Ze(e) {\n    z.call(this, \"scriptListTable\", we(\"scriptRecord\", e, function(r, t) {\n        var a = r.script, n = a.defaultLangSys;\n        return U.assert(!!n, \"Unable to write GSUB: script \" + r.tag + \" has no default language system.\"), [\n            {\n                name: \"scriptTag\" + t,\n                type: \"TAG\",\n                value: r.tag\n            },\n            {\n                name: \"script\" + t,\n                type: \"TABLE\",\n                value: new z(\"scriptTable\", [\n                    {\n                        name: \"defaultLangSys\",\n                        type: \"TABLE\",\n                        value: new z(\"defaultLangSys\", [\n                            {\n                                name: \"lookupOrder\",\n                                type: \"USHORT\",\n                                value: 0\n                            },\n                            {\n                                name: \"reqFeatureIndex\",\n                                type: \"USHORT\",\n                                value: n.reqFeatureIndex\n                            }\n                        ].concat(Re(\"featureIndex\", n.featureIndexes)))\n                    }\n                ].concat(we(\"langSys\", a.langSysRecords, function(s, i) {\n                    var u = s.langSys;\n                    return [\n                        {\n                            name: \"langSysTag\" + i,\n                            type: \"TAG\",\n                            value: s.tag\n                        },\n                        {\n                            name: \"langSys\" + i,\n                            type: \"TABLE\",\n                            value: new z(\"langSys\", [\n                                {\n                                    name: \"lookupOrder\",\n                                    type: \"USHORT\",\n                                    value: 0\n                                },\n                                {\n                                    name: \"reqFeatureIndex\",\n                                    type: \"USHORT\",\n                                    value: u.reqFeatureIndex\n                                }\n                            ].concat(Re(\"featureIndex\", u.featureIndexes)))\n                        }\n                    ];\n                })))\n            }\n        ];\n    }));\n}\n_c15 = Ze;\nZe.prototype = Object.create(z.prototype);\nZe.prototype.constructor = Ze;\nfunction Qe(e) {\n    z.call(this, \"featureListTable\", we(\"featureRecord\", e, function(r, t) {\n        var a = r.feature;\n        return [\n            {\n                name: \"featureTag\" + t,\n                type: \"TAG\",\n                value: r.tag\n            },\n            {\n                name: \"feature\" + t,\n                type: \"TABLE\",\n                value: new z(\"featureTable\", [\n                    {\n                        name: \"featureParams\",\n                        type: \"USHORT\",\n                        value: a.featureParams\n                    }\n                ].concat(Re(\"lookupListIndex\", a.lookupListIndexes)))\n            }\n        ];\n    }));\n}\n_c16 = Qe;\nQe.prototype = Object.create(z.prototype);\nQe.prototype.constructor = Qe;\nfunction Ke(e, r) {\n    z.call(this, \"lookupListTable\", dr(\"lookup\", e, function(t) {\n        var a = r[t.lookupType];\n        return U.assert(!!a, \"Unable to write GSUB lookup type \" + t.lookupType + \" tables.\"), new z(\"lookupTable\", [\n            {\n                name: \"lookupType\",\n                type: \"USHORT\",\n                value: t.lookupType\n            },\n            {\n                name: \"lookupFlag\",\n                type: \"USHORT\",\n                value: t.lookupFlag\n            }\n        ].concat(dr(\"subtable\", t.subtables, a)));\n    }));\n}\n_c17 = Ke;\nKe.prototype = Object.create(z.prototype);\nKe.prototype.constructor = Ke;\nvar b = {\n    Table: z,\n    Record: z,\n    Coverage: Ye,\n    ScriptList: Ze,\n    FeatureList: Qe,\n    LookupList: Ke,\n    ushortList: Re,\n    tableList: dr,\n    recordList: we\n};\nfunction Hr(e, r) {\n    return e.getUint8(r);\n}\n_c18 = Hr;\nfunction Je(e, r) {\n    return e.getUint16(r, !1);\n}\n_c19 = Je;\nfunction Ea(e, r) {\n    return e.getInt16(r, !1);\n}\n_c20 = Ea;\nfunction Fr(e, r) {\n    return e.getUint32(r, !1);\n}\n_c21 = Fr;\nfunction Ct(e, r) {\n    var t = e.getInt16(r, !1), a = e.getUint16(r + 2, !1);\n    return t + a / 65535;\n}\n_c22 = Ct;\nfunction Oa(e, r) {\n    for(var t = \"\", a = r; a < r + 4; a += 1)t += String.fromCharCode(e.getInt8(a));\n    return t;\n}\n_c23 = Oa;\nfunction La(e, r, t) {\n    for(var a = 0, n = 0; n < t; n += 1)a <<= 8, a += e.getUint8(r + n);\n    return a;\n}\n_c24 = La;\nfunction Ra(e, r, t) {\n    for(var a = [], n = r; n < t; n += 1)a.push(e.getUint8(n));\n    return a;\n}\n_c25 = Ra;\nfunction wa(e) {\n    for(var r = \"\", t = 0; t < e.length; t += 1)r += String.fromCharCode(e[t]);\n    return r;\n}\nvar Da = {\n    byte: 1,\n    uShort: 2,\n    short: 2,\n    uLong: 4,\n    fixed: 4,\n    longDateTime: 8,\n    tag: 4\n};\nfunction v(e, r) {\n    this.data = e, this.offset = r, this.relativeOffset = 0;\n}\nv.prototype.parseByte = function() {\n    var e = this.data.getUint8(this.offset + this.relativeOffset);\n    return this.relativeOffset += 1, e;\n};\nv.prototype.parseChar = function() {\n    var e = this.data.getInt8(this.offset + this.relativeOffset);\n    return this.relativeOffset += 1, e;\n};\nv.prototype.parseCard8 = v.prototype.parseByte;\nv.prototype.parseUShort = function() {\n    var e = this.data.getUint16(this.offset + this.relativeOffset);\n    return this.relativeOffset += 2, e;\n};\nv.prototype.parseCard16 = v.prototype.parseUShort;\nv.prototype.parseSID = v.prototype.parseUShort;\nv.prototype.parseOffset16 = v.prototype.parseUShort;\nv.prototype.parseShort = function() {\n    var e = this.data.getInt16(this.offset + this.relativeOffset);\n    return this.relativeOffset += 2, e;\n};\nv.prototype.parseF2Dot14 = function() {\n    var e = this.data.getInt16(this.offset + this.relativeOffset) / 16384;\n    return this.relativeOffset += 2, e;\n};\nv.prototype.parseULong = function() {\n    var e = Fr(this.data, this.offset + this.relativeOffset);\n    return this.relativeOffset += 4, e;\n};\nv.prototype.parseOffset32 = v.prototype.parseULong;\nv.prototype.parseFixed = function() {\n    var e = Ct(this.data, this.offset + this.relativeOffset);\n    return this.relativeOffset += 4, e;\n};\nv.prototype.parseString = function(e) {\n    var r = this.data, t = this.offset + this.relativeOffset, a = \"\";\n    this.relativeOffset += e;\n    for(var n = 0; n < e; n++)a += String.fromCharCode(r.getUint8(t + n));\n    return a;\n};\nv.prototype.parseTag = function() {\n    return this.parseString(4);\n};\nv.prototype.parseLongDateTime = function() {\n    var e = Fr(this.data, this.offset + this.relativeOffset + 4);\n    return e -= 2082844800, this.relativeOffset += 8, e;\n};\nv.prototype.parseVersion = function(e) {\n    var r = Je(this.data, this.offset + this.relativeOffset), t = Je(this.data, this.offset + this.relativeOffset + 2);\n    return this.relativeOffset += 4, e === void 0 && (e = 4096), r + t / e / 10;\n};\nv.prototype.skip = function(e, r) {\n    r === void 0 && (r = 1), this.relativeOffset += Da[e] * r;\n};\nv.prototype.parseULongList = function(e) {\n    e === void 0 && (e = this.parseULong());\n    for(var r = new Array(e), t = this.data, a = this.offset + this.relativeOffset, n = 0; n < e; n++)r[n] = t.getUint32(a), a += 4;\n    return this.relativeOffset += e * 4, r;\n};\nv.prototype.parseOffset16List = v.prototype.parseUShortList = function(e) {\n    e === void 0 && (e = this.parseUShort());\n    for(var r = new Array(e), t = this.data, a = this.offset + this.relativeOffset, n = 0; n < e; n++)r[n] = t.getUint16(a), a += 2;\n    return this.relativeOffset += e * 2, r;\n};\nv.prototype.parseShortList = function(e) {\n    for(var r = new Array(e), t = this.data, a = this.offset + this.relativeOffset, n = 0; n < e; n++)r[n] = t.getInt16(a), a += 2;\n    return this.relativeOffset += e * 2, r;\n};\nv.prototype.parseByteList = function(e) {\n    for(var r = new Array(e), t = this.data, a = this.offset + this.relativeOffset, n = 0; n < e; n++)r[n] = t.getUint8(a++);\n    return this.relativeOffset += e, r;\n};\nv.prototype.parseList = function(e, r) {\n    r || (r = e, e = this.parseUShort());\n    for(var t = new Array(e), a = 0; a < e; a++)t[a] = r.call(this);\n    return t;\n};\nv.prototype.parseList32 = function(e, r) {\n    r || (r = e, e = this.parseULong());\n    for(var t = new Array(e), a = 0; a < e; a++)t[a] = r.call(this);\n    return t;\n};\nv.prototype.parseRecordList = function(e, r) {\n    r || (r = e, e = this.parseUShort());\n    for(var t = new Array(e), a = Object.keys(r), n = 0; n < e; n++){\n        for(var s = {}, i = 0; i < a.length; i++){\n            var u = a[i], o = r[u];\n            s[u] = o.call(this);\n        }\n        t[n] = s;\n    }\n    return t;\n};\nv.prototype.parseRecordList32 = function(e, r) {\n    r || (r = e, e = this.parseULong());\n    for(var t = new Array(e), a = Object.keys(r), n = 0; n < e; n++){\n        for(var s = {}, i = 0; i < a.length; i++){\n            var u = a[i], o = r[u];\n            s[u] = o.call(this);\n        }\n        t[n] = s;\n    }\n    return t;\n};\nv.prototype.parseStruct = function(e) {\n    if (typeof e == \"function\") return e.call(this);\n    for(var r = Object.keys(e), t = {}, a = 0; a < r.length; a++){\n        var n = r[a], s = e[n];\n        t[n] = s.call(this);\n    }\n    return t;\n};\nv.prototype.parseValueRecord = function(e) {\n    if (e === void 0 && (e = this.parseUShort()), e !== 0) {\n        var r = {};\n        return e & 1 && (r.xPlacement = this.parseShort()), e & 2 && (r.yPlacement = this.parseShort()), e & 4 && (r.xAdvance = this.parseShort()), e & 8 && (r.yAdvance = this.parseShort()), e & 16 && (r.xPlaDevice = void 0, this.parseShort()), e & 32 && (r.yPlaDevice = void 0, this.parseShort()), e & 64 && (r.xAdvDevice = void 0, this.parseShort()), e & 128 && (r.yAdvDevice = void 0, this.parseShort()), r;\n    }\n};\nv.prototype.parseValueRecordList = function() {\n    for(var e = this.parseUShort(), r = this.parseUShort(), t = new Array(r), a = 0; a < r; a++)t[a] = this.parseValueRecord(e);\n    return t;\n};\nv.prototype.parsePointer = function(e) {\n    var r = this.parseOffset16();\n    if (r > 0) return new v(this.data, this.offset + r).parseStruct(e);\n};\nv.prototype.parsePointer32 = function(e) {\n    var r = this.parseOffset32();\n    if (r > 0) return new v(this.data, this.offset + r).parseStruct(e);\n};\nv.prototype.parseListOfLists = function(e) {\n    for(var r = this.parseOffset16List(), t = r.length, a = this.relativeOffset, n = new Array(t), s = 0; s < t; s++){\n        var i = r[s];\n        if (i === 0) {\n            n[s] = void 0;\n            continue;\n        }\n        if (this.relativeOffset = i, e) {\n            for(var u = this.parseOffset16List(), o = new Array(u.length), l = 0; l < u.length; l++)this.relativeOffset = i + u[l], o[l] = e.call(this);\n            n[s] = o;\n        } else n[s] = this.parseUShortList();\n    }\n    return this.relativeOffset = a, n;\n};\nv.prototype.parseCoverage = function() {\n    var e = this.offset + this.relativeOffset, r = this.parseUShort(), t = this.parseUShort();\n    if (r === 1) return {\n        format: 1,\n        glyphs: this.parseUShortList(t)\n    };\n    if (r === 2) {\n        for(var a = new Array(t), n = 0; n < t; n++)a[n] = {\n            start: this.parseUShort(),\n            end: this.parseUShort(),\n            index: this.parseUShort()\n        };\n        return {\n            format: 2,\n            ranges: a\n        };\n    }\n    throw new Error(\"0x\" + e.toString(16) + \": Coverage format must be 1 or 2.\");\n};\nv.prototype.parseClassDef = function() {\n    var e = this.offset + this.relativeOffset, r = this.parseUShort();\n    if (r === 1) return {\n        format: 1,\n        startGlyph: this.parseUShort(),\n        classes: this.parseUShortList()\n    };\n    if (r === 2) return {\n        format: 2,\n        ranges: this.parseRecordList({\n            start: v.uShort,\n            end: v.uShort,\n            classId: v.uShort\n        })\n    };\n    throw new Error(\"0x\" + e.toString(16) + \": ClassDef format must be 1 or 2.\");\n};\nv.list = function(e, r) {\n    return function() {\n        return this.parseList(e, r);\n    };\n};\nv.list32 = function(e, r) {\n    return function() {\n        return this.parseList32(e, r);\n    };\n};\nv.recordList = function(e, r) {\n    return function() {\n        return this.parseRecordList(e, r);\n    };\n};\nv.recordList32 = function(e, r) {\n    return function() {\n        return this.parseRecordList32(e, r);\n    };\n};\nv.pointer = function(e) {\n    return function() {\n        return this.parsePointer(e);\n    };\n};\nv.pointer32 = function(e) {\n    return function() {\n        return this.parsePointer32(e);\n    };\n};\nv.tag = v.prototype.parseTag;\nv.byte = v.prototype.parseByte;\nv.uShort = v.offset16 = v.prototype.parseUShort;\nv.uShortList = v.prototype.parseUShortList;\nv.uLong = v.offset32 = v.prototype.parseULong;\nv.uLongList = v.prototype.parseULongList;\nv.struct = v.prototype.parseStruct;\nv.coverage = v.prototype.parseCoverage;\nv.classDef = v.prototype.parseClassDef;\nvar zr = {\n    reserved: v.uShort,\n    reqFeatureIndex: v.uShort,\n    featureIndexes: v.uShortList\n};\nv.prototype.parseScriptList = function() {\n    return this.parsePointer(v.recordList({\n        tag: v.tag,\n        script: v.pointer({\n            defaultLangSys: v.pointer(zr),\n            langSysRecords: v.recordList({\n                tag: v.tag,\n                langSys: v.pointer(zr)\n            })\n        })\n    })) || [];\n};\nv.prototype.parseFeatureList = function() {\n    return this.parsePointer(v.recordList({\n        tag: v.tag,\n        feature: v.pointer({\n            featureParams: v.offset16,\n            lookupListIndexes: v.uShortList\n        })\n    })) || [];\n};\nv.prototype.parseLookupList = function(e) {\n    return this.parsePointer(v.list(v.pointer(function() {\n        var r = this.parseUShort();\n        U.argument(1 <= r && r <= 9, \"GPOS/GSUB lookup type \" + r + \" unknown.\");\n        var t = this.parseUShort(), a = t & 16;\n        return {\n            lookupType: r,\n            lookupFlag: t,\n            subtables: this.parseList(v.pointer(e[r])),\n            markFilteringSet: a ? this.parseUShort() : void 0\n        };\n    }))) || [];\n};\nv.prototype.parseFeatureVariationsList = function() {\n    return this.parsePointer32(function() {\n        var e = this.parseUShort(), r = this.parseUShort();\n        U.argument(e === 1 && r < 1, \"GPOS/GSUB feature variations table unknown.\");\n        var t = this.parseRecordList32({\n            conditionSetOffset: v.offset32,\n            featureTableSubstitutionOffset: v.offset32\n        });\n        return t;\n    }) || [];\n};\nvar k = {\n    getByte: Hr,\n    getCard8: Hr,\n    getUShort: Je,\n    getCard16: Je,\n    getShort: Ea,\n    getULong: Fr,\n    getFixed: Ct,\n    getTag: Oa,\n    getOffset: La,\n    getBytes: Ra,\n    bytesToString: wa,\n    Parser: v\n};\nfunction Aa(e, r) {\n    r.parseUShort(), e.length = r.parseULong(), e.language = r.parseULong();\n    var t;\n    e.groupCount = t = r.parseULong(), e.glyphIndexMap = {};\n    for(var a = 0; a < t; a += 1)for(var n = r.parseULong(), s = r.parseULong(), i = r.parseULong(), u = n; u <= s; u += 1)e.glyphIndexMap[u] = i, i++;\n}\n_c26 = Aa;\nfunction Ba(e, r, t, a, n) {\n    e.length = r.parseUShort(), e.language = r.parseUShort();\n    var s;\n    e.segCount = s = r.parseUShort() >> 1, r.skip(\"uShort\", 3), e.glyphIndexMap = {};\n    for(var i = new k.Parser(t, a + n + 14), u = new k.Parser(t, a + n + 16 + s * 2), o = new k.Parser(t, a + n + 16 + s * 4), l = new k.Parser(t, a + n + 16 + s * 6), f = a + n + 16 + s * 8, h = 0; h < s - 1; h += 1)for(var p = void 0, c = i.parseUShort(), d = u.parseUShort(), x = o.parseShort(), m = l.parseUShort(), y = d; y <= c; y += 1)m !== 0 ? (f = l.offset + l.relativeOffset - 2, f += m, f += (y - d) * 2, p = k.getUShort(t, f), p !== 0 && (p = p + x & 65535)) : p = y + x & 65535, e.glyphIndexMap[y] = p;\n}\n_c27 = Ba;\nfunction Ia(e, r) {\n    var t = {};\n    t.version = k.getUShort(e, r), U.argument(t.version === 0, \"cmap table version should be 0.\"), t.numTables = k.getUShort(e, r + 2);\n    for(var a = -1, n = t.numTables - 1; n >= 0; n -= 1){\n        var s = k.getUShort(e, r + 4 + n * 8), i = k.getUShort(e, r + 4 + n * 8 + 2);\n        if (s === 3 && (i === 0 || i === 1 || i === 10) || s === 0 && (i === 0 || i === 1 || i === 2 || i === 3 || i === 4)) {\n            a = k.getULong(e, r + 4 + n * 8 + 4);\n            break;\n        }\n    }\n    if (a === -1) throw new Error(\"No valid cmap sub-tables found.\");\n    var u = new k.Parser(e, r + a);\n    if (t.format = u.parseUShort(), t.format === 12) Aa(t, u);\n    else if (t.format === 4) Ba(t, u, e, r, a);\n    else throw new Error(\"Only format 4 and 12 cmap tables are supported (found format \" + t.format + \").\");\n    return t;\n}\n_c28 = Ia;\nfunction Ma(e, r, t) {\n    e.segments.push({\n        end: r,\n        start: r,\n        delta: -(r - t),\n        offset: 0,\n        glyphIndex: t\n    });\n}\n_c29 = Ma;\nfunction Pa(e) {\n    e.segments.push({\n        end: 65535,\n        start: 65535,\n        delta: 1,\n        offset: 0\n    });\n}\n_c30 = Pa;\nfunction Ga(e) {\n    var r = !0, t;\n    for(t = e.length - 1; t > 0; t -= 1){\n        var a = e.get(t);\n        if (a.unicode > 65535) {\n            console.log(\"Adding CMAP format 12 (needed!)\"), r = !1;\n            break;\n        }\n    }\n    var n = [\n        {\n            name: \"version\",\n            type: \"USHORT\",\n            value: 0\n        },\n        {\n            name: \"numTables\",\n            type: \"USHORT\",\n            value: r ? 1 : 2\n        },\n        {\n            name: \"platformID\",\n            type: \"USHORT\",\n            value: 3\n        },\n        {\n            name: \"encodingID\",\n            type: \"USHORT\",\n            value: 1\n        },\n        {\n            name: \"offset\",\n            type: \"ULONG\",\n            value: r ? 12 : 12 + 8\n        }\n    ];\n    r || (n = n.concat([\n        {\n            name: \"cmap12PlatformID\",\n            type: \"USHORT\",\n            value: 3\n        },\n        {\n            name: \"cmap12EncodingID\",\n            type: \"USHORT\",\n            value: 10\n        },\n        {\n            name: \"cmap12Offset\",\n            type: \"ULONG\",\n            value: 0\n        }\n    ])), n = n.concat([\n        {\n            name: \"format\",\n            type: \"USHORT\",\n            value: 4\n        },\n        {\n            name: \"cmap4Length\",\n            type: \"USHORT\",\n            value: 0\n        },\n        {\n            name: \"language\",\n            type: \"USHORT\",\n            value: 0\n        },\n        {\n            name: \"segCountX2\",\n            type: \"USHORT\",\n            value: 0\n        },\n        {\n            name: \"searchRange\",\n            type: \"USHORT\",\n            value: 0\n        },\n        {\n            name: \"entrySelector\",\n            type: \"USHORT\",\n            value: 0\n        },\n        {\n            name: \"rangeShift\",\n            type: \"USHORT\",\n            value: 0\n        }\n    ]);\n    var s = new b.Table(\"cmap\", n);\n    for(s.segments = [], t = 0; t < e.length; t += 1){\n        for(var i = e.get(t), u = 0; u < i.unicodes.length; u += 1)Ma(s, i.unicodes[u], t);\n        s.segments = s.segments.sort(function(C, S) {\n            return C.start - S.start;\n        });\n    }\n    Pa(s);\n    var o = s.segments.length, l = 0, f = [], h = [], p = [], c = [], d = [], x = [];\n    for(t = 0; t < o; t += 1){\n        var m = s.segments[t];\n        m.end <= 65535 && m.start <= 65535 ? (f = f.concat({\n            name: \"end_\" + t,\n            type: \"USHORT\",\n            value: m.end\n        }), h = h.concat({\n            name: \"start_\" + t,\n            type: \"USHORT\",\n            value: m.start\n        }), p = p.concat({\n            name: \"idDelta_\" + t,\n            type: \"SHORT\",\n            value: m.delta\n        }), c = c.concat({\n            name: \"idRangeOffset_\" + t,\n            type: \"USHORT\",\n            value: m.offset\n        }), m.glyphId !== void 0 && (d = d.concat({\n            name: \"glyph_\" + t,\n            type: \"USHORT\",\n            value: m.glyphId\n        }))) : l += 1, !r && m.glyphIndex !== void 0 && (x = x.concat({\n            name: \"cmap12Start_\" + t,\n            type: \"ULONG\",\n            value: m.start\n        }), x = x.concat({\n            name: \"cmap12End_\" + t,\n            type: \"ULONG\",\n            value: m.end\n        }), x = x.concat({\n            name: \"cmap12Glyph_\" + t,\n            type: \"ULONG\",\n            value: m.glyphIndex\n        }));\n    }\n    if (s.segCountX2 = (o - l) * 2, s.searchRange = Math.pow(2, Math.floor(Math.log(o - l) / Math.log(2))) * 2, s.entrySelector = Math.log(s.searchRange / 2) / Math.log(2), s.rangeShift = s.segCountX2 - s.searchRange, s.fields = s.fields.concat(f), s.fields.push({\n        name: \"reservedPad\",\n        type: \"USHORT\",\n        value: 0\n    }), s.fields = s.fields.concat(h), s.fields = s.fields.concat(p), s.fields = s.fields.concat(c), s.fields = s.fields.concat(d), s.cmap4Length = 14 + f.length * 2 + 2 + h.length * 2 + p.length * 2 + c.length * 2 + d.length * 2, !r) {\n        var y = 16 + x.length * 4;\n        s.cmap12Offset = 12 + 2 * 2 + 4 + s.cmap4Length, s.fields = s.fields.concat([\n            {\n                name: \"cmap12Format\",\n                type: \"USHORT\",\n                value: 12\n            },\n            {\n                name: \"cmap12Reserved\",\n                type: \"USHORT\",\n                value: 0\n            },\n            {\n                name: \"cmap12Length\",\n                type: \"ULONG\",\n                value: y\n            },\n            {\n                name: \"cmap12Language\",\n                type: \"ULONG\",\n                value: 0\n            },\n            {\n                name: \"cmap12nGroups\",\n                type: \"ULONG\",\n                value: x.length / 3\n            }\n        ]), s.fields = s.fields.concat(x);\n    }\n    return s;\n}\n_c31 = Ga;\nvar Et = {\n    parse: Ia,\n    make: Ga\n}, qe = [\n    \".notdef\",\n    \"space\",\n    \"exclam\",\n    \"quotedbl\",\n    \"numbersign\",\n    \"dollar\",\n    \"percent\",\n    \"ampersand\",\n    \"quoteright\",\n    \"parenleft\",\n    \"parenright\",\n    \"asterisk\",\n    \"plus\",\n    \"comma\",\n    \"hyphen\",\n    \"period\",\n    \"slash\",\n    \"zero\",\n    \"one\",\n    \"two\",\n    \"three\",\n    \"four\",\n    \"five\",\n    \"six\",\n    \"seven\",\n    \"eight\",\n    \"nine\",\n    \"colon\",\n    \"semicolon\",\n    \"less\",\n    \"equal\",\n    \"greater\",\n    \"question\",\n    \"at\",\n    \"A\",\n    \"B\",\n    \"C\",\n    \"D\",\n    \"E\",\n    \"F\",\n    \"G\",\n    \"H\",\n    \"I\",\n    \"J\",\n    \"K\",\n    \"L\",\n    \"M\",\n    \"N\",\n    \"O\",\n    \"P\",\n    \"Q\",\n    \"R\",\n    \"S\",\n    \"T\",\n    \"U\",\n    \"V\",\n    \"W\",\n    \"X\",\n    \"Y\",\n    \"Z\",\n    \"bracketleft\",\n    \"backslash\",\n    \"bracketright\",\n    \"asciicircum\",\n    \"underscore\",\n    \"quoteleft\",\n    \"a\",\n    \"b\",\n    \"c\",\n    \"d\",\n    \"e\",\n    \"f\",\n    \"g\",\n    \"h\",\n    \"i\",\n    \"j\",\n    \"k\",\n    \"l\",\n    \"m\",\n    \"n\",\n    \"o\",\n    \"p\",\n    \"q\",\n    \"r\",\n    \"s\",\n    \"t\",\n    \"u\",\n    \"v\",\n    \"w\",\n    \"x\",\n    \"y\",\n    \"z\",\n    \"braceleft\",\n    \"bar\",\n    \"braceright\",\n    \"asciitilde\",\n    \"exclamdown\",\n    \"cent\",\n    \"sterling\",\n    \"fraction\",\n    \"yen\",\n    \"florin\",\n    \"section\",\n    \"currency\",\n    \"quotesingle\",\n    \"quotedblleft\",\n    \"guillemotleft\",\n    \"guilsinglleft\",\n    \"guilsinglright\",\n    \"fi\",\n    \"fl\",\n    \"endash\",\n    \"dagger\",\n    \"daggerdbl\",\n    \"periodcentered\",\n    \"paragraph\",\n    \"bullet\",\n    \"quotesinglbase\",\n    \"quotedblbase\",\n    \"quotedblright\",\n    \"guillemotright\",\n    \"ellipsis\",\n    \"perthousand\",\n    \"questiondown\",\n    \"grave\",\n    \"acute\",\n    \"circumflex\",\n    \"tilde\",\n    \"macron\",\n    \"breve\",\n    \"dotaccent\",\n    \"dieresis\",\n    \"ring\",\n    \"cedilla\",\n    \"hungarumlaut\",\n    \"ogonek\",\n    \"caron\",\n    \"emdash\",\n    \"AE\",\n    \"ordfeminine\",\n    \"Lslash\",\n    \"Oslash\",\n    \"OE\",\n    \"ordmasculine\",\n    \"ae\",\n    \"dotlessi\",\n    \"lslash\",\n    \"oslash\",\n    \"oe\",\n    \"germandbls\",\n    \"onesuperior\",\n    \"logicalnot\",\n    \"mu\",\n    \"trademark\",\n    \"Eth\",\n    \"onehalf\",\n    \"plusminus\",\n    \"Thorn\",\n    \"onequarter\",\n    \"divide\",\n    \"brokenbar\",\n    \"degree\",\n    \"thorn\",\n    \"threequarters\",\n    \"twosuperior\",\n    \"registered\",\n    \"minus\",\n    \"eth\",\n    \"multiply\",\n    \"threesuperior\",\n    \"copyright\",\n    \"Aacute\",\n    \"Acircumflex\",\n    \"Adieresis\",\n    \"Agrave\",\n    \"Aring\",\n    \"Atilde\",\n    \"Ccedilla\",\n    \"Eacute\",\n    \"Ecircumflex\",\n    \"Edieresis\",\n    \"Egrave\",\n    \"Iacute\",\n    \"Icircumflex\",\n    \"Idieresis\",\n    \"Igrave\",\n    \"Ntilde\",\n    \"Oacute\",\n    \"Ocircumflex\",\n    \"Odieresis\",\n    \"Ograve\",\n    \"Otilde\",\n    \"Scaron\",\n    \"Uacute\",\n    \"Ucircumflex\",\n    \"Udieresis\",\n    \"Ugrave\",\n    \"Yacute\",\n    \"Ydieresis\",\n    \"Zcaron\",\n    \"aacute\",\n    \"acircumflex\",\n    \"adieresis\",\n    \"agrave\",\n    \"aring\",\n    \"atilde\",\n    \"ccedilla\",\n    \"eacute\",\n    \"ecircumflex\",\n    \"edieresis\",\n    \"egrave\",\n    \"iacute\",\n    \"icircumflex\",\n    \"idieresis\",\n    \"igrave\",\n    \"ntilde\",\n    \"oacute\",\n    \"ocircumflex\",\n    \"odieresis\",\n    \"ograve\",\n    \"otilde\",\n    \"scaron\",\n    \"uacute\",\n    \"ucircumflex\",\n    \"udieresis\",\n    \"ugrave\",\n    \"yacute\",\n    \"ydieresis\",\n    \"zcaron\",\n    \"exclamsmall\",\n    \"Hungarumlautsmall\",\n    \"dollaroldstyle\",\n    \"dollarsuperior\",\n    \"ampersandsmall\",\n    \"Acutesmall\",\n    \"parenleftsuperior\",\n    \"parenrightsuperior\",\n    \"266 ff\",\n    \"onedotenleader\",\n    \"zerooldstyle\",\n    \"oneoldstyle\",\n    \"twooldstyle\",\n    \"threeoldstyle\",\n    \"fouroldstyle\",\n    \"fiveoldstyle\",\n    \"sixoldstyle\",\n    \"sevenoldstyle\",\n    \"eightoldstyle\",\n    \"nineoldstyle\",\n    \"commasuperior\",\n    \"threequartersemdash\",\n    \"periodsuperior\",\n    \"questionsmall\",\n    \"asuperior\",\n    \"bsuperior\",\n    \"centsuperior\",\n    \"dsuperior\",\n    \"esuperior\",\n    \"isuperior\",\n    \"lsuperior\",\n    \"msuperior\",\n    \"nsuperior\",\n    \"osuperior\",\n    \"rsuperior\",\n    \"ssuperior\",\n    \"tsuperior\",\n    \"ff\",\n    \"ffi\",\n    \"ffl\",\n    \"parenleftinferior\",\n    \"parenrightinferior\",\n    \"Circumflexsmall\",\n    \"hyphensuperior\",\n    \"Gravesmall\",\n    \"Asmall\",\n    \"Bsmall\",\n    \"Csmall\",\n    \"Dsmall\",\n    \"Esmall\",\n    \"Fsmall\",\n    \"Gsmall\",\n    \"Hsmall\",\n    \"Ismall\",\n    \"Jsmall\",\n    \"Ksmall\",\n    \"Lsmall\",\n    \"Msmall\",\n    \"Nsmall\",\n    \"Osmall\",\n    \"Psmall\",\n    \"Qsmall\",\n    \"Rsmall\",\n    \"Ssmall\",\n    \"Tsmall\",\n    \"Usmall\",\n    \"Vsmall\",\n    \"Wsmall\",\n    \"Xsmall\",\n    \"Ysmall\",\n    \"Zsmall\",\n    \"colonmonetary\",\n    \"onefitted\",\n    \"rupiah\",\n    \"Tildesmall\",\n    \"exclamdownsmall\",\n    \"centoldstyle\",\n    \"Lslashsmall\",\n    \"Scaronsmall\",\n    \"Zcaronsmall\",\n    \"Dieresissmall\",\n    \"Brevesmall\",\n    \"Caronsmall\",\n    \"Dotaccentsmall\",\n    \"Macronsmall\",\n    \"figuredash\",\n    \"hypheninferior\",\n    \"Ogoneksmall\",\n    \"Ringsmall\",\n    \"Cedillasmall\",\n    \"questiondownsmall\",\n    \"oneeighth\",\n    \"threeeighths\",\n    \"fiveeighths\",\n    \"seveneighths\",\n    \"onethird\",\n    \"twothirds\",\n    \"zerosuperior\",\n    \"foursuperior\",\n    \"fivesuperior\",\n    \"sixsuperior\",\n    \"sevensuperior\",\n    \"eightsuperior\",\n    \"ninesuperior\",\n    \"zeroinferior\",\n    \"oneinferior\",\n    \"twoinferior\",\n    \"threeinferior\",\n    \"fourinferior\",\n    \"fiveinferior\",\n    \"sixinferior\",\n    \"seveninferior\",\n    \"eightinferior\",\n    \"nineinferior\",\n    \"centinferior\",\n    \"dollarinferior\",\n    \"periodinferior\",\n    \"commainferior\",\n    \"Agravesmall\",\n    \"Aacutesmall\",\n    \"Acircumflexsmall\",\n    \"Atildesmall\",\n    \"Adieresissmall\",\n    \"Aringsmall\",\n    \"AEsmall\",\n    \"Ccedillasmall\",\n    \"Egravesmall\",\n    \"Eacutesmall\",\n    \"Ecircumflexsmall\",\n    \"Edieresissmall\",\n    \"Igravesmall\",\n    \"Iacutesmall\",\n    \"Icircumflexsmall\",\n    \"Idieresissmall\",\n    \"Ethsmall\",\n    \"Ntildesmall\",\n    \"Ogravesmall\",\n    \"Oacutesmall\",\n    \"Ocircumflexsmall\",\n    \"Otildesmall\",\n    \"Odieresissmall\",\n    \"OEsmall\",\n    \"Oslashsmall\",\n    \"Ugravesmall\",\n    \"Uacutesmall\",\n    \"Ucircumflexsmall\",\n    \"Udieresissmall\",\n    \"Yacutesmall\",\n    \"Thornsmall\",\n    \"Ydieresissmall\",\n    \"001.000\",\n    \"001.001\",\n    \"001.002\",\n    \"001.003\",\n    \"Black\",\n    \"Bold\",\n    \"Book\",\n    \"Light\",\n    \"Medium\",\n    \"Regular\",\n    \"Roman\",\n    \"Semibold\"\n], Na = [\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"space\",\n    \"exclam\",\n    \"quotedbl\",\n    \"numbersign\",\n    \"dollar\",\n    \"percent\",\n    \"ampersand\",\n    \"quoteright\",\n    \"parenleft\",\n    \"parenright\",\n    \"asterisk\",\n    \"plus\",\n    \"comma\",\n    \"hyphen\",\n    \"period\",\n    \"slash\",\n    \"zero\",\n    \"one\",\n    \"two\",\n    \"three\",\n    \"four\",\n    \"five\",\n    \"six\",\n    \"seven\",\n    \"eight\",\n    \"nine\",\n    \"colon\",\n    \"semicolon\",\n    \"less\",\n    \"equal\",\n    \"greater\",\n    \"question\",\n    \"at\",\n    \"A\",\n    \"B\",\n    \"C\",\n    \"D\",\n    \"E\",\n    \"F\",\n    \"G\",\n    \"H\",\n    \"I\",\n    \"J\",\n    \"K\",\n    \"L\",\n    \"M\",\n    \"N\",\n    \"O\",\n    \"P\",\n    \"Q\",\n    \"R\",\n    \"S\",\n    \"T\",\n    \"U\",\n    \"V\",\n    \"W\",\n    \"X\",\n    \"Y\",\n    \"Z\",\n    \"bracketleft\",\n    \"backslash\",\n    \"bracketright\",\n    \"asciicircum\",\n    \"underscore\",\n    \"quoteleft\",\n    \"a\",\n    \"b\",\n    \"c\",\n    \"d\",\n    \"e\",\n    \"f\",\n    \"g\",\n    \"h\",\n    \"i\",\n    \"j\",\n    \"k\",\n    \"l\",\n    \"m\",\n    \"n\",\n    \"o\",\n    \"p\",\n    \"q\",\n    \"r\",\n    \"s\",\n    \"t\",\n    \"u\",\n    \"v\",\n    \"w\",\n    \"x\",\n    \"y\",\n    \"z\",\n    \"braceleft\",\n    \"bar\",\n    \"braceright\",\n    \"asciitilde\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"exclamdown\",\n    \"cent\",\n    \"sterling\",\n    \"fraction\",\n    \"yen\",\n    \"florin\",\n    \"section\",\n    \"currency\",\n    \"quotesingle\",\n    \"quotedblleft\",\n    \"guillemotleft\",\n    \"guilsinglleft\",\n    \"guilsinglright\",\n    \"fi\",\n    \"fl\",\n    \"\",\n    \"endash\",\n    \"dagger\",\n    \"daggerdbl\",\n    \"periodcentered\",\n    \"\",\n    \"paragraph\",\n    \"bullet\",\n    \"quotesinglbase\",\n    \"quotedblbase\",\n    \"quotedblright\",\n    \"guillemotright\",\n    \"ellipsis\",\n    \"perthousand\",\n    \"\",\n    \"questiondown\",\n    \"\",\n    \"grave\",\n    \"acute\",\n    \"circumflex\",\n    \"tilde\",\n    \"macron\",\n    \"breve\",\n    \"dotaccent\",\n    \"dieresis\",\n    \"\",\n    \"ring\",\n    \"cedilla\",\n    \"\",\n    \"hungarumlaut\",\n    \"ogonek\",\n    \"caron\",\n    \"emdash\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"AE\",\n    \"\",\n    \"ordfeminine\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"Lslash\",\n    \"Oslash\",\n    \"OE\",\n    \"ordmasculine\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"ae\",\n    \"\",\n    \"\",\n    \"\",\n    \"dotlessi\",\n    \"\",\n    \"\",\n    \"lslash\",\n    \"oslash\",\n    \"oe\",\n    \"germandbls\"\n], Ha = [\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"space\",\n    \"exclamsmall\",\n    \"Hungarumlautsmall\",\n    \"\",\n    \"dollaroldstyle\",\n    \"dollarsuperior\",\n    \"ampersandsmall\",\n    \"Acutesmall\",\n    \"parenleftsuperior\",\n    \"parenrightsuperior\",\n    \"twodotenleader\",\n    \"onedotenleader\",\n    \"comma\",\n    \"hyphen\",\n    \"period\",\n    \"fraction\",\n    \"zerooldstyle\",\n    \"oneoldstyle\",\n    \"twooldstyle\",\n    \"threeoldstyle\",\n    \"fouroldstyle\",\n    \"fiveoldstyle\",\n    \"sixoldstyle\",\n    \"sevenoldstyle\",\n    \"eightoldstyle\",\n    \"nineoldstyle\",\n    \"colon\",\n    \"semicolon\",\n    \"commasuperior\",\n    \"threequartersemdash\",\n    \"periodsuperior\",\n    \"questionsmall\",\n    \"\",\n    \"asuperior\",\n    \"bsuperior\",\n    \"centsuperior\",\n    \"dsuperior\",\n    \"esuperior\",\n    \"\",\n    \"\",\n    \"isuperior\",\n    \"\",\n    \"\",\n    \"lsuperior\",\n    \"msuperior\",\n    \"nsuperior\",\n    \"osuperior\",\n    \"\",\n    \"\",\n    \"rsuperior\",\n    \"ssuperior\",\n    \"tsuperior\",\n    \"\",\n    \"ff\",\n    \"fi\",\n    \"fl\",\n    \"ffi\",\n    \"ffl\",\n    \"parenleftinferior\",\n    \"\",\n    \"parenrightinferior\",\n    \"Circumflexsmall\",\n    \"hyphensuperior\",\n    \"Gravesmall\",\n    \"Asmall\",\n    \"Bsmall\",\n    \"Csmall\",\n    \"Dsmall\",\n    \"Esmall\",\n    \"Fsmall\",\n    \"Gsmall\",\n    \"Hsmall\",\n    \"Ismall\",\n    \"Jsmall\",\n    \"Ksmall\",\n    \"Lsmall\",\n    \"Msmall\",\n    \"Nsmall\",\n    \"Osmall\",\n    \"Psmall\",\n    \"Qsmall\",\n    \"Rsmall\",\n    \"Ssmall\",\n    \"Tsmall\",\n    \"Usmall\",\n    \"Vsmall\",\n    \"Wsmall\",\n    \"Xsmall\",\n    \"Ysmall\",\n    \"Zsmall\",\n    \"colonmonetary\",\n    \"onefitted\",\n    \"rupiah\",\n    \"Tildesmall\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"exclamdownsmall\",\n    \"centoldstyle\",\n    \"Lslashsmall\",\n    \"\",\n    \"\",\n    \"Scaronsmall\",\n    \"Zcaronsmall\",\n    \"Dieresissmall\",\n    \"Brevesmall\",\n    \"Caronsmall\",\n    \"\",\n    \"Dotaccentsmall\",\n    \"\",\n    \"\",\n    \"Macronsmall\",\n    \"\",\n    \"\",\n    \"figuredash\",\n    \"hypheninferior\",\n    \"\",\n    \"\",\n    \"Ogoneksmall\",\n    \"Ringsmall\",\n    \"Cedillasmall\",\n    \"\",\n    \"\",\n    \"\",\n    \"onequarter\",\n    \"onehalf\",\n    \"threequarters\",\n    \"questiondownsmall\",\n    \"oneeighth\",\n    \"threeeighths\",\n    \"fiveeighths\",\n    \"seveneighths\",\n    \"onethird\",\n    \"twothirds\",\n    \"\",\n    \"\",\n    \"zerosuperior\",\n    \"onesuperior\",\n    \"twosuperior\",\n    \"threesuperior\",\n    \"foursuperior\",\n    \"fivesuperior\",\n    \"sixsuperior\",\n    \"sevensuperior\",\n    \"eightsuperior\",\n    \"ninesuperior\",\n    \"zeroinferior\",\n    \"oneinferior\",\n    \"twoinferior\",\n    \"threeinferior\",\n    \"fourinferior\",\n    \"fiveinferior\",\n    \"sixinferior\",\n    \"seveninferior\",\n    \"eightinferior\",\n    \"nineinferior\",\n    \"centinferior\",\n    \"dollarinferior\",\n    \"periodinferior\",\n    \"commainferior\",\n    \"Agravesmall\",\n    \"Aacutesmall\",\n    \"Acircumflexsmall\",\n    \"Atildesmall\",\n    \"Adieresissmall\",\n    \"Aringsmall\",\n    \"AEsmall\",\n    \"Ccedillasmall\",\n    \"Egravesmall\",\n    \"Eacutesmall\",\n    \"Ecircumflexsmall\",\n    \"Edieresissmall\",\n    \"Igravesmall\",\n    \"Iacutesmall\",\n    \"Icircumflexsmall\",\n    \"Idieresissmall\",\n    \"Ethsmall\",\n    \"Ntildesmall\",\n    \"Ogravesmall\",\n    \"Oacutesmall\",\n    \"Ocircumflexsmall\",\n    \"Otildesmall\",\n    \"Odieresissmall\",\n    \"OEsmall\",\n    \"Oslashsmall\",\n    \"Ugravesmall\",\n    \"Uacutesmall\",\n    \"Ucircumflexsmall\",\n    \"Udieresissmall\",\n    \"Yacutesmall\",\n    \"Thornsmall\",\n    \"Ydieresissmall\"\n], xe = [\n    \".notdef\",\n    \".null\",\n    \"nonmarkingreturn\",\n    \"space\",\n    \"exclam\",\n    \"quotedbl\",\n    \"numbersign\",\n    \"dollar\",\n    \"percent\",\n    \"ampersand\",\n    \"quotesingle\",\n    \"parenleft\",\n    \"parenright\",\n    \"asterisk\",\n    \"plus\",\n    \"comma\",\n    \"hyphen\",\n    \"period\",\n    \"slash\",\n    \"zero\",\n    \"one\",\n    \"two\",\n    \"three\",\n    \"four\",\n    \"five\",\n    \"six\",\n    \"seven\",\n    \"eight\",\n    \"nine\",\n    \"colon\",\n    \"semicolon\",\n    \"less\",\n    \"equal\",\n    \"greater\",\n    \"question\",\n    \"at\",\n    \"A\",\n    \"B\",\n    \"C\",\n    \"D\",\n    \"E\",\n    \"F\",\n    \"G\",\n    \"H\",\n    \"I\",\n    \"J\",\n    \"K\",\n    \"L\",\n    \"M\",\n    \"N\",\n    \"O\",\n    \"P\",\n    \"Q\",\n    \"R\",\n    \"S\",\n    \"T\",\n    \"U\",\n    \"V\",\n    \"W\",\n    \"X\",\n    \"Y\",\n    \"Z\",\n    \"bracketleft\",\n    \"backslash\",\n    \"bracketright\",\n    \"asciicircum\",\n    \"underscore\",\n    \"grave\",\n    \"a\",\n    \"b\",\n    \"c\",\n    \"d\",\n    \"e\",\n    \"f\",\n    \"g\",\n    \"h\",\n    \"i\",\n    \"j\",\n    \"k\",\n    \"l\",\n    \"m\",\n    \"n\",\n    \"o\",\n    \"p\",\n    \"q\",\n    \"r\",\n    \"s\",\n    \"t\",\n    \"u\",\n    \"v\",\n    \"w\",\n    \"x\",\n    \"y\",\n    \"z\",\n    \"braceleft\",\n    \"bar\",\n    \"braceright\",\n    \"asciitilde\",\n    \"Adieresis\",\n    \"Aring\",\n    \"Ccedilla\",\n    \"Eacute\",\n    \"Ntilde\",\n    \"Odieresis\",\n    \"Udieresis\",\n    \"aacute\",\n    \"agrave\",\n    \"acircumflex\",\n    \"adieresis\",\n    \"atilde\",\n    \"aring\",\n    \"ccedilla\",\n    \"eacute\",\n    \"egrave\",\n    \"ecircumflex\",\n    \"edieresis\",\n    \"iacute\",\n    \"igrave\",\n    \"icircumflex\",\n    \"idieresis\",\n    \"ntilde\",\n    \"oacute\",\n    \"ograve\",\n    \"ocircumflex\",\n    \"odieresis\",\n    \"otilde\",\n    \"uacute\",\n    \"ugrave\",\n    \"ucircumflex\",\n    \"udieresis\",\n    \"dagger\",\n    \"degree\",\n    \"cent\",\n    \"sterling\",\n    \"section\",\n    \"bullet\",\n    \"paragraph\",\n    \"germandbls\",\n    \"registered\",\n    \"copyright\",\n    \"trademark\",\n    \"acute\",\n    \"dieresis\",\n    \"notequal\",\n    \"AE\",\n    \"Oslash\",\n    \"infinity\",\n    \"plusminus\",\n    \"lessequal\",\n    \"greaterequal\",\n    \"yen\",\n    \"mu\",\n    \"partialdiff\",\n    \"summation\",\n    \"product\",\n    \"pi\",\n    \"integral\",\n    \"ordfeminine\",\n    \"ordmasculine\",\n    \"Omega\",\n    \"ae\",\n    \"oslash\",\n    \"questiondown\",\n    \"exclamdown\",\n    \"logicalnot\",\n    \"radical\",\n    \"florin\",\n    \"approxequal\",\n    \"Delta\",\n    \"guillemotleft\",\n    \"guillemotright\",\n    \"ellipsis\",\n    \"nonbreakingspace\",\n    \"Agrave\",\n    \"Atilde\",\n    \"Otilde\",\n    \"OE\",\n    \"oe\",\n    \"endash\",\n    \"emdash\",\n    \"quotedblleft\",\n    \"quotedblright\",\n    \"quoteleft\",\n    \"quoteright\",\n    \"divide\",\n    \"lozenge\",\n    \"ydieresis\",\n    \"Ydieresis\",\n    \"fraction\",\n    \"currency\",\n    \"guilsinglleft\",\n    \"guilsinglright\",\n    \"fi\",\n    \"fl\",\n    \"daggerdbl\",\n    \"periodcentered\",\n    \"quotesinglbase\",\n    \"quotedblbase\",\n    \"perthousand\",\n    \"Acircumflex\",\n    \"Ecircumflex\",\n    \"Aacute\",\n    \"Edieresis\",\n    \"Egrave\",\n    \"Iacute\",\n    \"Icircumflex\",\n    \"Idieresis\",\n    \"Igrave\",\n    \"Oacute\",\n    \"Ocircumflex\",\n    \"apple\",\n    \"Ograve\",\n    \"Uacute\",\n    \"Ucircumflex\",\n    \"Ugrave\",\n    \"dotlessi\",\n    \"circumflex\",\n    \"tilde\",\n    \"macron\",\n    \"breve\",\n    \"dotaccent\",\n    \"ring\",\n    \"cedilla\",\n    \"hungarumlaut\",\n    \"ogonek\",\n    \"caron\",\n    \"Lslash\",\n    \"lslash\",\n    \"Scaron\",\n    \"scaron\",\n    \"Zcaron\",\n    \"zcaron\",\n    \"brokenbar\",\n    \"Eth\",\n    \"eth\",\n    \"Yacute\",\n    \"yacute\",\n    \"Thorn\",\n    \"thorn\",\n    \"minus\",\n    \"multiply\",\n    \"onesuperior\",\n    \"twosuperior\",\n    \"threesuperior\",\n    \"onehalf\",\n    \"onequarter\",\n    \"threequarters\",\n    \"franc\",\n    \"Gbreve\",\n    \"gbreve\",\n    \"Idotaccent\",\n    \"Scedilla\",\n    \"scedilla\",\n    \"Cacute\",\n    \"cacute\",\n    \"Ccaron\",\n    \"ccaron\",\n    \"dcroat\"\n];\nfunction Ot(e) {\n    this.font = e;\n}\n_c32 = Ot;\nOt.prototype.charToGlyphIndex = function(e) {\n    var r = e.codePointAt(0), t = this.font.glyphs;\n    if (t) {\n        for(var a = 0; a < t.length; a += 1)for(var n = t.get(a), s = 0; s < n.unicodes.length; s += 1)if (n.unicodes[s] === r) return a;\n    }\n    return null;\n};\nfunction Lt(e) {\n    this.cmap = e;\n}\n_c33 = Lt;\nLt.prototype.charToGlyphIndex = function(e) {\n    return this.cmap.glyphIndexMap[e.codePointAt(0)] || 0;\n};\nfunction je(e, r) {\n    this.encoding = e, this.charset = r;\n}\nje.prototype.charToGlyphIndex = function(e) {\n    var r = e.codePointAt(0), t = this.encoding[r];\n    return this.charset.indexOf(t);\n};\nfunction Ur(e) {\n    switch(e.version){\n        case 1:\n            this.names = xe.slice();\n            break;\n        case 2:\n            this.names = new Array(e.numberOfGlyphs);\n            for(var r = 0; r < e.numberOfGlyphs; r++)e.glyphNameIndex[r] < xe.length ? this.names[r] = xe[e.glyphNameIndex[r]] : this.names[r] = e.names[e.glyphNameIndex[r] - xe.length];\n            break;\n        case 2.5:\n            this.names = new Array(e.numberOfGlyphs);\n            for(var t = 0; t < e.numberOfGlyphs; t++)this.names[t] = xe[t + e.glyphNameIndex[t]];\n            break;\n        case 3:\n            this.names = [];\n            break;\n        default:\n            this.names = [];\n            break;\n    }\n}\n_c34 = Ur;\nUr.prototype.nameToGlyphIndex = function(e) {\n    return this.names.indexOf(e);\n};\nUr.prototype.glyphIndexToName = function(e) {\n    return this.names[e];\n};\nfunction za(e) {\n    for(var r, t = e.tables.cmap.glyphIndexMap, a = Object.keys(t), n = 0; n < a.length; n += 1){\n        var s = a[n], i = t[s];\n        r = e.glyphs.get(i), r.addUnicode(parseInt(s));\n    }\n    for(var u = 0; u < e.glyphs.length; u += 1)r = e.glyphs.get(u), e.cffEncoding ? e.isCIDFont ? r.name = \"gid\" + u : r.name = e.cffEncoding.charset[u] : e.glyphNames.names && (r.name = e.glyphNames.glyphIndexToName(u));\n}\nfunction Wa(e) {\n    e._IndexToUnicodeMap = {};\n    for(var r = e.tables.cmap.glyphIndexMap, t = Object.keys(r), a = 0; a < t.length; a += 1){\n        var n = t[a], s = r[n];\n        e._IndexToUnicodeMap[s] === void 0 ? e._IndexToUnicodeMap[s] = {\n            unicodes: [\n                parseInt(n)\n            ]\n        } : e._IndexToUnicodeMap[s].unicodes.push(parseInt(n));\n    }\n}\n_c35 = Wa;\nfunction _a(e, r) {\n    r.lowMemory ? Wa(e) : za(e);\n}\nfunction Va(e, r, t, a, n) {\n    e.beginPath(), e.moveTo(r, t), e.lineTo(a, n), e.stroke();\n}\n_c36 = Va;\nvar ye = {\n    line: Va\n};\nfunction qa(e, r) {\n    var t = r || new P;\n    return {\n        configurable: !0,\n        get: function() {\n            return typeof t == \"function\" && (t = t()), t;\n        },\n        set: function(a) {\n            t = a;\n        }\n    };\n}\nfunction Q(e) {\n    this.bindConstructorValues(e);\n}\n_c37 = Q;\nQ.prototype.bindConstructorValues = function(e) {\n    this.index = e.index || 0, this.name = e.name || null, this.unicode = e.unicode || void 0, this.unicodes = e.unicodes || e.unicode !== void 0 ? [\n        e.unicode\n    ] : [], \"xMin\" in e && (this.xMin = e.xMin), \"yMin\" in e && (this.yMin = e.yMin), \"xMax\" in e && (this.xMax = e.xMax), \"yMax\" in e && (this.yMax = e.yMax), \"advanceWidth\" in e && (this.advanceWidth = e.advanceWidth), Object.defineProperty(this, \"path\", qa(this, e.path));\n};\nQ.prototype.addUnicode = function(e) {\n    this.unicodes.length === 0 && (this.unicode = e), this.unicodes.push(e);\n};\nQ.prototype.getBoundingBox = function() {\n    return this.path.getBoundingBox();\n};\nQ.prototype.getPath = function(e, r, t, a, n) {\n    e = e !== void 0 ? e : 0, r = r !== void 0 ? r : 0, t = t !== void 0 ? t : 72;\n    var s, i;\n    a || (a = {});\n    var u = a.xScale, o = a.yScale;\n    if (a.hinting && n && n.hinting && (i = this.path && n.hinting.exec(this, t)), i) s = n.hinting.getCommands(i), e = Math.round(e), r = Math.round(r), u = o = 1;\n    else {\n        s = this.path.commands;\n        var l = 1 / (this.path.unitsPerEm || 1e3) * t;\n        u === void 0 && (u = l), o === void 0 && (o = l);\n    }\n    for(var f = new P, h = 0; h < s.length; h += 1){\n        var p = s[h];\n        p.type === \"M\" ? f.moveTo(e + p.x * u, r + -p.y * o) : p.type === \"L\" ? f.lineTo(e + p.x * u, r + -p.y * o) : p.type === \"Q\" ? f.quadraticCurveTo(e + p.x1 * u, r + -p.y1 * o, e + p.x * u, r + -p.y * o) : p.type === \"C\" ? f.curveTo(e + p.x1 * u, r + -p.y1 * o, e + p.x2 * u, r + -p.y2 * o, e + p.x * u, r + -p.y * o) : p.type === \"Z\" && f.closePath();\n    }\n    return f;\n};\nQ.prototype.getContours = function() {\n    if (this.points === void 0) return [];\n    for(var e = [], r = [], t = 0; t < this.points.length; t += 1){\n        var a = this.points[t];\n        r.push(a), a.lastPointOfContour && (e.push(r), r = []);\n    }\n    return U.argument(r.length === 0, \"There are still points left in the current contour.\"), e;\n};\nQ.prototype.getMetrics = function() {\n    for(var e = this.path.commands, r = [], t = [], a = 0; a < e.length; a += 1){\n        var n = e[a];\n        n.type !== \"Z\" && (r.push(n.x), t.push(n.y)), (n.type === \"Q\" || n.type === \"C\") && (r.push(n.x1), t.push(n.y1)), n.type === \"C\" && (r.push(n.x2), t.push(n.y2));\n    }\n    var s = {\n        xMin: Math.min.apply(null, r),\n        yMin: Math.min.apply(null, t),\n        xMax: Math.max.apply(null, r),\n        yMax: Math.max.apply(null, t),\n        leftSideBearing: this.leftSideBearing\n    };\n    return isFinite(s.xMin) || (s.xMin = 0), isFinite(s.xMax) || (s.xMax = this.advanceWidth), isFinite(s.yMin) || (s.yMin = 0), isFinite(s.yMax) || (s.yMax = 0), s.rightSideBearing = this.advanceWidth - s.leftSideBearing - (s.xMax - s.xMin), s;\n};\nQ.prototype.draw = function(e, r, t, a, n) {\n    this.getPath(r, t, a, n).draw(e);\n};\nQ.prototype.drawPoints = function(e, r, t, a) {\n    function n(h, p, c, d) {\n        e.beginPath();\n        for(var x = 0; x < h.length; x += 1)e.moveTo(p + h[x].x * d, c + h[x].y * d), e.arc(p + h[x].x * d, c + h[x].y * d, 2, 0, Math.PI * 2, !1);\n        e.closePath(), e.fill();\n    }\n    r = r !== void 0 ? r : 0, t = t !== void 0 ? t : 0, a = a !== void 0 ? a : 24;\n    for(var s = 1 / this.path.unitsPerEm * a, i = [], u = [], o = this.path, l = 0; l < o.commands.length; l += 1){\n        var f = o.commands[l];\n        f.x !== void 0 && i.push({\n            x: f.x,\n            y: -f.y\n        }), f.x1 !== void 0 && u.push({\n            x: f.x1,\n            y: -f.y1\n        }), f.x2 !== void 0 && u.push({\n            x: f.x2,\n            y: -f.y2\n        });\n    }\n    e.fillStyle = \"blue\", n(i, r, t, s), e.fillStyle = \"red\", n(u, r, t, s);\n};\nQ.prototype.drawMetrics = function(e, r, t, a) {\n    var n;\n    r = r !== void 0 ? r : 0, t = t !== void 0 ? t : 0, a = a !== void 0 ? a : 24, n = 1 / this.path.unitsPerEm * a, e.lineWidth = 1, e.strokeStyle = \"black\", ye.line(e, r, -1e4, r, 1e4), ye.line(e, -1e4, t, 1e4, t);\n    var s = this.xMin || 0, i = this.yMin || 0, u = this.xMax || 0, o = this.yMax || 0, l = this.advanceWidth || 0;\n    e.strokeStyle = \"blue\", ye.line(e, r + s * n, -1e4, r + s * n, 1e4), ye.line(e, r + u * n, -1e4, r + u * n, 1e4), ye.line(e, -1e4, t + -i * n, 1e4, t + -i * n), ye.line(e, -1e4, t + -o * n, 1e4, t + -o * n), e.strokeStyle = \"green\", ye.line(e, r + l * n, -1e4, r + l * n, 1e4);\n};\nfunction _e(e, r, t) {\n    Object.defineProperty(e, r, {\n        get: function() {\n            return e.path, e[t];\n        },\n        set: function(a) {\n            e[t] = a;\n        },\n        enumerable: !0,\n        configurable: !0\n    });\n}\nfunction Cr(e, r) {\n    if (this.font = e, this.glyphs = {}, Array.isArray(r)) for(var t = 0; t < r.length; t++){\n        var a = r[t];\n        a.path.unitsPerEm = e.unitsPerEm, this.glyphs[t] = a;\n    }\n    this.length = r && r.length || 0;\n}\n_c38 = Cr;\nCr.prototype.get = function(e) {\n    if (this.glyphs[e] === void 0) {\n        this.font._push(e), typeof this.glyphs[e] == \"function\" && (this.glyphs[e] = this.glyphs[e]());\n        var r = this.glyphs[e], t = this.font._IndexToUnicodeMap[e];\n        if (t) for(var a = 0; a < t.unicodes.length; a++)r.addUnicode(t.unicodes[a]);\n        this.font.cffEncoding ? this.font.isCIDFont ? r.name = \"gid\" + e : r.name = this.font.cffEncoding.charset[e] : this.font.glyphNames.names && (r.name = this.font.glyphNames.glyphIndexToName(e)), this.glyphs[e].advanceWidth = this.font._hmtxTableData[e].advanceWidth, this.glyphs[e].leftSideBearing = this.font._hmtxTableData[e].leftSideBearing;\n    } else typeof this.glyphs[e] == \"function\" && (this.glyphs[e] = this.glyphs[e]());\n    return this.glyphs[e];\n};\nCr.prototype.push = function(e, r) {\n    this.glyphs[e] = r, this.length++;\n};\nfunction Xa(e, r) {\n    return new Q({\n        index: r,\n        font: e\n    });\n}\n_c39 = Xa;\nfunction Ya(e, r, t, a, n, s) {\n    return function() {\n        var i = new Q({\n            index: r,\n            font: e\n        });\n        return i.path = function() {\n            t(i, a, n);\n            var u = s(e.glyphs, i);\n            return u.unitsPerEm = e.unitsPerEm, u;\n        }, _e(i, \"xMin\", \"_xMin\"), _e(i, \"xMax\", \"_xMax\"), _e(i, \"yMin\", \"_yMin\"), _e(i, \"yMax\", \"_yMax\"), i;\n    };\n}\n_c40 = Ya;\nfunction Za(e, r, t, a) {\n    return function() {\n        var n = new Q({\n            index: r,\n            font: e\n        });\n        return n.path = function() {\n            var s = t(e, n, a);\n            return s.unitsPerEm = e.unitsPerEm, s;\n        }, n;\n    };\n}\n_c41 = Za;\nvar ue = {\n    GlyphSet: Cr,\n    glyphLoader: Xa,\n    ttfGlyphLoader: Ya,\n    cffGlyphLoader: Za\n};\nfunction Rt(e, r) {\n    if (e === r) return !0;\n    if (Array.isArray(e) && Array.isArray(r)) {\n        if (e.length !== r.length) return !1;\n        for(var t = 0; t < e.length; t += 1)if (!Rt(e[t], r[t])) return !1;\n        return !0;\n    } else return !1;\n}\n_c42 = Rt;\nfunction gr(e) {\n    var r;\n    return e.length < 1240 ? r = 107 : e.length < 33900 ? r = 1131 : r = 32768, r;\n}\nfunction ve(e, r, t) {\n    var a = [], n = [], s = k.getCard16(e, r), i, u;\n    if (s !== 0) {\n        var o = k.getByte(e, r + 2);\n        i = r + (s + 1) * o + 2;\n        for(var l = r + 3, f = 0; f < s + 1; f += 1)a.push(k.getOffset(e, l, o)), l += o;\n        u = i + a[s];\n    } else u = r + 2;\n    for(var h = 0; h < a.length - 1; h += 1){\n        var p = k.getBytes(e, i + a[h], i + a[h + 1]);\n        t && (p = t(p)), n.push(p);\n    }\n    return {\n        objects: n,\n        startOffset: r,\n        endOffset: u\n    };\n}\nfunction Qa(e, r) {\n    var t = [], a = k.getCard16(e, r), n, s;\n    if (a !== 0) {\n        var i = k.getByte(e, r + 2);\n        n = r + (a + 1) * i + 2;\n        for(var u = r + 3, o = 0; o < a + 1; o += 1)t.push(k.getOffset(e, u, i)), u += i;\n        s = n + t[a];\n    } else s = r + 2;\n    return {\n        offsets: t,\n        startOffset: r,\n        endOffset: s\n    };\n}\n_c43 = Qa;\nfunction Ka(e, r, t, a, n) {\n    var s = k.getCard16(t, a), i = 0;\n    if (s !== 0) {\n        var u = k.getByte(t, a + 2);\n        i = a + (s + 1) * u + 2;\n    }\n    var o = k.getBytes(t, i + r[e], i + r[e + 1]);\n    return n && (o = n(o)), o;\n}\n_c44 = Ka;\nfunction Ja(e) {\n    for(var r = \"\", t = 15, a = [\n        \"0\",\n        \"1\",\n        \"2\",\n        \"3\",\n        \"4\",\n        \"5\",\n        \"6\",\n        \"7\",\n        \"8\",\n        \"9\",\n        \".\",\n        \"E\",\n        \"E-\",\n        null,\n        \"-\"\n    ];;){\n        var n = e.parseByte(), s = n >> 4, i = n & 15;\n        if (s === t || (r += a[s], i === t)) break;\n        r += a[i];\n    }\n    return parseFloat(r);\n}\n_c45 = Ja;\nfunction ja(e, r) {\n    var t, a, n, s;\n    if (r === 28) return t = e.parseByte(), a = e.parseByte(), t << 8 | a;\n    if (r === 29) return t = e.parseByte(), a = e.parseByte(), n = e.parseByte(), s = e.parseByte(), t << 24 | a << 16 | n << 8 | s;\n    if (r === 30) return Ja(e);\n    if (r >= 32 && r <= 246) return r - 139;\n    if (r >= 247 && r <= 250) return t = e.parseByte(), (r - 247) * 256 + t + 108;\n    if (r >= 251 && r <= 254) return t = e.parseByte(), -(r - 251) * 256 - t - 108;\n    throw new Error(\"Invalid b0 \" + r);\n}\nfunction $a(e) {\n    for(var r = {}, t = 0; t < e.length; t += 1){\n        var a = e[t][0], n = e[t][1], s = void 0;\n        if (n.length === 1 ? s = n[0] : s = n, r.hasOwnProperty(a) && !isNaN(r[a])) throw new Error(\"Object \" + r + \" already has key \" + a);\n        r[a] = s;\n    }\n    return r;\n}\nfunction wt(e, r, t) {\n    r = r !== void 0 ? r : 0;\n    var a = new k.Parser(e, r), n = [], s = [];\n    for(t = t !== void 0 ? t : e.length; a.relativeOffset < t;){\n        var i = a.parseByte();\n        i <= 21 ? (i === 12 && (i = 1200 + a.parseByte()), n.push([\n            i,\n            s\n        ]), s = []) : s.push(ja(a, i));\n    }\n    return $a(n);\n}\nfunction Oe(e, r) {\n    return r <= 390 ? r = qe[r] : r = e[r - 391], r;\n}\n_c46 = Oe;\nfunction Dt(e, r, t) {\n    for(var a = {}, n, s = 0; s < r.length; s += 1){\n        var i = r[s];\n        if (Array.isArray(i.type)) {\n            var u = [];\n            u.length = i.type.length;\n            for(var o = 0; o < i.type.length; o++)n = e[i.op] !== void 0 ? e[i.op][o] : void 0, n === void 0 && (n = i.value !== void 0 && i.value[o] !== void 0 ? i.value[o] : null), i.type[o] === \"SID\" && (n = Oe(t, n)), u[o] = n;\n            a[i.name] = u;\n        } else n = e[i.op], n === void 0 && (n = i.value !== void 0 ? i.value : null), i.type === \"SID\" && (n = Oe(t, n)), a[i.name] = n;\n    }\n    return a;\n}\n_c47 = Dt;\nfunction en(e, r) {\n    var t = {};\n    return t.formatMajor = k.getCard8(e, r), t.formatMinor = k.getCard8(e, r + 1), t.size = k.getCard8(e, r + 2), t.offsetSize = k.getCard8(e, r + 3), t.startOffset = r, t.endOffset = r + 4, t;\n}\nvar At = [\n    {\n        name: \"version\",\n        op: 0,\n        type: \"SID\"\n    },\n    {\n        name: \"notice\",\n        op: 1,\n        type: \"SID\"\n    },\n    {\n        name: \"copyright\",\n        op: 1200,\n        type: \"SID\"\n    },\n    {\n        name: \"fullName\",\n        op: 2,\n        type: \"SID\"\n    },\n    {\n        name: \"familyName\",\n        op: 3,\n        type: \"SID\"\n    },\n    {\n        name: \"weight\",\n        op: 4,\n        type: \"SID\"\n    },\n    {\n        name: \"isFixedPitch\",\n        op: 1201,\n        type: \"number\",\n        value: 0\n    },\n    {\n        name: \"italicAngle\",\n        op: 1202,\n        type: \"number\",\n        value: 0\n    },\n    {\n        name: \"underlinePosition\",\n        op: 1203,\n        type: \"number\",\n        value: -100\n    },\n    {\n        name: \"underlineThickness\",\n        op: 1204,\n        type: \"number\",\n        value: 50\n    },\n    {\n        name: \"paintType\",\n        op: 1205,\n        type: \"number\",\n        value: 0\n    },\n    {\n        name: \"charstringType\",\n        op: 1206,\n        type: \"number\",\n        value: 2\n    },\n    {\n        name: \"fontMatrix\",\n        op: 1207,\n        type: [\n            \"real\",\n            \"real\",\n            \"real\",\n            \"real\",\n            \"real\",\n            \"real\"\n        ],\n        value: [\n            .001,\n            0,\n            0,\n            .001,\n            0,\n            0\n        ]\n    },\n    {\n        name: \"uniqueId\",\n        op: 13,\n        type: \"number\"\n    },\n    {\n        name: \"fontBBox\",\n        op: 5,\n        type: [\n            \"number\",\n            \"number\",\n            \"number\",\n            \"number\"\n        ],\n        value: [\n            0,\n            0,\n            0,\n            0\n        ]\n    },\n    {\n        name: \"strokeWidth\",\n        op: 1208,\n        type: \"number\",\n        value: 0\n    },\n    {\n        name: \"xuid\",\n        op: 14,\n        type: [],\n        value: null\n    },\n    {\n        name: \"charset\",\n        op: 15,\n        type: \"offset\",\n        value: 0\n    },\n    {\n        name: \"encoding\",\n        op: 16,\n        type: \"offset\",\n        value: 0\n    },\n    {\n        name: \"charStrings\",\n        op: 17,\n        type: \"offset\",\n        value: 0\n    },\n    {\n        name: \"private\",\n        op: 18,\n        type: [\n            \"number\",\n            \"offset\"\n        ],\n        value: [\n            0,\n            0\n        ]\n    },\n    {\n        name: \"ros\",\n        op: 1230,\n        type: [\n            \"SID\",\n            \"SID\",\n            \"number\"\n        ]\n    },\n    {\n        name: \"cidFontVersion\",\n        op: 1231,\n        type: \"number\",\n        value: 0\n    },\n    {\n        name: \"cidFontRevision\",\n        op: 1232,\n        type: \"number\",\n        value: 0\n    },\n    {\n        name: \"cidFontType\",\n        op: 1233,\n        type: \"number\",\n        value: 0\n    },\n    {\n        name: \"cidCount\",\n        op: 1234,\n        type: \"number\",\n        value: 8720\n    },\n    {\n        name: \"uidBase\",\n        op: 1235,\n        type: \"number\"\n    },\n    {\n        name: \"fdArray\",\n        op: 1236,\n        type: \"offset\"\n    },\n    {\n        name: \"fdSelect\",\n        op: 1237,\n        type: \"offset\"\n    },\n    {\n        name: \"fontName\",\n        op: 1238,\n        type: \"SID\"\n    }\n], Bt = [\n    {\n        name: \"subrs\",\n        op: 19,\n        type: \"offset\",\n        value: 0\n    },\n    {\n        name: \"defaultWidthX\",\n        op: 20,\n        type: \"number\",\n        value: 0\n    },\n    {\n        name: \"nominalWidthX\",\n        op: 21,\n        type: \"number\",\n        value: 0\n    }\n];\nfunction rn(e, r) {\n    var t = wt(e, 0, e.byteLength);\n    return Dt(t, At, r);\n}\nfunction It(e, r, t, a) {\n    var n = wt(e, r, t);\n    return Dt(n, Bt, a);\n}\n_c48 = It;\nfunction Wr(e, r, t, a) {\n    for(var n = [], s = 0; s < t.length; s += 1){\n        var i = new DataView(new Uint8Array(t[s]).buffer), u = rn(i, a);\n        u._subrs = [], u._subrsBias = 0, u._defaultWidthX = 0, u._nominalWidthX = 0;\n        var o = u.private[0], l = u.private[1];\n        if (o !== 0 && l !== 0) {\n            var f = It(e, l + r, o, a);\n            if (u._defaultWidthX = f.defaultWidthX, u._nominalWidthX = f.nominalWidthX, f.subrs !== 0) {\n                var h = l + f.subrs, p = ve(e, h + r);\n                u._subrs = p.objects, u._subrsBias = gr(u._subrs);\n            }\n            u._privateDict = f;\n        }\n        n.push(u);\n    }\n    return n;\n}\n_c49 = Wr;\nfunction tn(e, r, t, a) {\n    var n, s, i = new k.Parser(e, r);\n    t -= 1;\n    var u = [\n        \".notdef\"\n    ], o = i.parseCard8();\n    if (o === 0) for(var l = 0; l < t; l += 1)n = i.parseSID(), u.push(Oe(a, n));\n    else if (o === 1) for(; u.length <= t;){\n        n = i.parseSID(), s = i.parseCard8();\n        for(var f = 0; f <= s; f += 1)u.push(Oe(a, n)), n += 1;\n    }\n    else if (o === 2) for(; u.length <= t;){\n        n = i.parseSID(), s = i.parseCard16();\n        for(var h = 0; h <= s; h += 1)u.push(Oe(a, n)), n += 1;\n    }\n    else throw new Error(\"Unknown charset format \" + o);\n    return u;\n}\nfunction an(e, r, t) {\n    var a, n = {}, s = new k.Parser(e, r), i = s.parseCard8();\n    if (i === 0) for(var u = s.parseCard8(), o = 0; o < u; o += 1)a = s.parseCard8(), n[a] = o;\n    else if (i === 1) {\n        var l = s.parseCard8();\n        a = 1;\n        for(var f = 0; f < l; f += 1)for(var h = s.parseCard8(), p = s.parseCard8(), c = h; c <= h + p; c += 1)n[c] = a, a += 1;\n    } else throw new Error(\"Unknown encoding format \" + i);\n    return new je(n, t);\n}\nfunction _r(e, r, t) {\n    var a, n, s, i, u = new P, o = [], l = 0, f = !1, h = !1, p = 0, c = 0, d, x, m, y;\n    if (e.isCIDFont) {\n        var C = e.tables.cff.topDict._fdSelect[r.index], S = e.tables.cff.topDict._fdArray[C];\n        d = S._subrs, x = S._subrsBias, m = S._defaultWidthX, y = S._nominalWidthX;\n    } else d = e.tables.cff.topDict._subrs, x = e.tables.cff.topDict._subrsBias, m = e.tables.cff.topDict._defaultWidthX, y = e.tables.cff.topDict._nominalWidthX;\n    var R = m;\n    function O(F, G) {\n        h && u.closePath(), u.moveTo(F, G), h = !0;\n    }\n    function D() {\n        var F;\n        F = o.length % 2 !== 0, F && !f && (R = o.shift() + y), l += o.length >> 1, o.length = 0, f = !0;\n    }\n    function L(F) {\n        for(var G, Y, Z, j, $, M, N, W, _, V, H, X, A = 0; A < F.length;){\n            var q = F[A];\n            switch(A += 1, q){\n                case 1:\n                    D();\n                    break;\n                case 3:\n                    D();\n                    break;\n                case 4:\n                    o.length > 1 && !f && (R = o.shift() + y, f = !0), c += o.pop(), O(p, c);\n                    break;\n                case 5:\n                    for(; o.length > 0;)p += o.shift(), c += o.shift(), u.lineTo(p, c);\n                    break;\n                case 6:\n                    for(; o.length > 0 && (p += o.shift(), u.lineTo(p, c), o.length !== 0);)c += o.shift(), u.lineTo(p, c);\n                    break;\n                case 7:\n                    for(; o.length > 0 && (c += o.shift(), u.lineTo(p, c), o.length !== 0);)p += o.shift(), u.lineTo(p, c);\n                    break;\n                case 8:\n                    for(; o.length > 0;)a = p + o.shift(), n = c + o.shift(), s = a + o.shift(), i = n + o.shift(), p = s + o.shift(), c = i + o.shift(), u.curveTo(a, n, s, i, p, c);\n                    break;\n                case 10:\n                    $ = o.pop() + x, M = d[$], M && L(M);\n                    break;\n                case 11:\n                    return;\n                case 12:\n                    switch(q = F[A], A += 1, q){\n                        case 35:\n                            a = p + o.shift(), n = c + o.shift(), s = a + o.shift(), i = n + o.shift(), N = s + o.shift(), W = i + o.shift(), _ = N + o.shift(), V = W + o.shift(), H = _ + o.shift(), X = V + o.shift(), p = H + o.shift(), c = X + o.shift(), o.shift(), u.curveTo(a, n, s, i, N, W), u.curveTo(_, V, H, X, p, c);\n                            break;\n                        case 34:\n                            a = p + o.shift(), n = c, s = a + o.shift(), i = n + o.shift(), N = s + o.shift(), W = i, _ = N + o.shift(), V = i, H = _ + o.shift(), X = c, p = H + o.shift(), u.curveTo(a, n, s, i, N, W), u.curveTo(_, V, H, X, p, c);\n                            break;\n                        case 36:\n                            a = p + o.shift(), n = c + o.shift(), s = a + o.shift(), i = n + o.shift(), N = s + o.shift(), W = i, _ = N + o.shift(), V = i, H = _ + o.shift(), X = V + o.shift(), p = H + o.shift(), u.curveTo(a, n, s, i, N, W), u.curveTo(_, V, H, X, p, c);\n                            break;\n                        case 37:\n                            a = p + o.shift(), n = c + o.shift(), s = a + o.shift(), i = n + o.shift(), N = s + o.shift(), W = i + o.shift(), _ = N + o.shift(), V = W + o.shift(), H = _ + o.shift(), X = V + o.shift(), Math.abs(H - p) > Math.abs(X - c) ? p = H + o.shift() : c = X + o.shift(), u.curveTo(a, n, s, i, N, W), u.curveTo(_, V, H, X, p, c);\n                            break;\n                        default:\n                            console.log(\"Glyph \" + r.index + \": unknown operator \" + 1200 + q), o.length = 0;\n                    }\n                    break;\n                case 14:\n                    o.length > 0 && !f && (R = o.shift() + y, f = !0), h && (u.closePath(), h = !1);\n                    break;\n                case 18:\n                    D();\n                    break;\n                case 19:\n                case 20:\n                    D(), A += l + 7 >> 3;\n                    break;\n                case 21:\n                    o.length > 2 && !f && (R = o.shift() + y, f = !0), c += o.pop(), p += o.pop(), O(p, c);\n                    break;\n                case 22:\n                    o.length > 1 && !f && (R = o.shift() + y, f = !0), p += o.pop(), O(p, c);\n                    break;\n                case 23:\n                    D();\n                    break;\n                case 24:\n                    for(; o.length > 2;)a = p + o.shift(), n = c + o.shift(), s = a + o.shift(), i = n + o.shift(), p = s + o.shift(), c = i + o.shift(), u.curveTo(a, n, s, i, p, c);\n                    p += o.shift(), c += o.shift(), u.lineTo(p, c);\n                    break;\n                case 25:\n                    for(; o.length > 6;)p += o.shift(), c += o.shift(), u.lineTo(p, c);\n                    a = p + o.shift(), n = c + o.shift(), s = a + o.shift(), i = n + o.shift(), p = s + o.shift(), c = i + o.shift(), u.curveTo(a, n, s, i, p, c);\n                    break;\n                case 26:\n                    for(o.length % 2 && (p += o.shift()); o.length > 0;)a = p, n = c + o.shift(), s = a + o.shift(), i = n + o.shift(), p = s, c = i + o.shift(), u.curveTo(a, n, s, i, p, c);\n                    break;\n                case 27:\n                    for(o.length % 2 && (c += o.shift()); o.length > 0;)a = p + o.shift(), n = c, s = a + o.shift(), i = n + o.shift(), p = s + o.shift(), c = i, u.curveTo(a, n, s, i, p, c);\n                    break;\n                case 28:\n                    G = F[A], Y = F[A + 1], o.push((G << 24 | Y << 16) >> 16), A += 2;\n                    break;\n                case 29:\n                    $ = o.pop() + e.gsubrsBias, M = e.gsubrs[$], M && L(M);\n                    break;\n                case 30:\n                    for(; o.length > 0 && (a = p, n = c + o.shift(), s = a + o.shift(), i = n + o.shift(), p = s + o.shift(), c = i + (o.length === 1 ? o.shift() : 0), u.curveTo(a, n, s, i, p, c), o.length !== 0);)a = p + o.shift(), n = c, s = a + o.shift(), i = n + o.shift(), c = i + o.shift(), p = s + (o.length === 1 ? o.shift() : 0), u.curveTo(a, n, s, i, p, c);\n                    break;\n                case 31:\n                    for(; o.length > 0 && (a = p + o.shift(), n = c, s = a + o.shift(), i = n + o.shift(), c = i + o.shift(), p = s + (o.length === 1 ? o.shift() : 0), u.curveTo(a, n, s, i, p, c), o.length !== 0);)a = p, n = c + o.shift(), s = a + o.shift(), i = n + o.shift(), p = s + o.shift(), c = i + (o.length === 1 ? o.shift() : 0), u.curveTo(a, n, s, i, p, c);\n                    break;\n                default:\n                    q < 32 ? console.log(\"Glyph \" + r.index + \": unknown operator \" + q) : q < 247 ? o.push(q - 139) : q < 251 ? (G = F[A], A += 1, o.push((q - 247) * 256 + G + 108)) : q < 255 ? (G = F[A], A += 1, o.push(-(q - 251) * 256 - G - 108)) : (G = F[A], Y = F[A + 1], Z = F[A + 2], j = F[A + 3], A += 4, o.push((G << 24 | Y << 16 | Z << 8 | j) / 65536));\n            }\n        }\n    }\n    return L(t), r.advanceWidth = R, u;\n}\nfunction nn(e, r, t, a) {\n    var n = [], s, i = new k.Parser(e, r), u = i.parseCard8();\n    if (u === 0) for(var o = 0; o < t; o++){\n        if (s = i.parseCard8(), s >= a) throw new Error(\"CFF table CID Font FDSelect has bad FD index value \" + s + \" (FD count \" + a + \")\");\n        n.push(s);\n    }\n    else if (u === 3) {\n        var l = i.parseCard16(), f = i.parseCard16();\n        if (f !== 0) throw new Error(\"CFF Table CID Font FDSelect format 3 range has bad initial GID \" + f);\n        for(var h, p = 0; p < l; p++){\n            if (s = i.parseCard8(), h = i.parseCard16(), s >= a) throw new Error(\"CFF table CID Font FDSelect has bad FD index value \" + s + \" (FD count \" + a + \")\");\n            if (h > t) throw new Error(\"CFF Table CID Font FDSelect format 3 range has bad GID \" + h);\n            for(; f < h; f++)n.push(s);\n            f = h;\n        }\n        if (h !== t) throw new Error(\"CFF Table CID Font FDSelect format 3 range has bad final GID \" + h);\n    } else throw new Error(\"CFF Table CID Font FDSelect table has unsupported format \" + u);\n    return n;\n}\nfunction sn(e, r, t, a) {\n    t.tables.cff = {};\n    var n = en(e, r), s = ve(e, n.endOffset, k.bytesToString), i = ve(e, s.endOffset), u = ve(e, i.endOffset, k.bytesToString), o = ve(e, u.endOffset);\n    t.gsubrs = o.objects, t.gsubrsBias = gr(t.gsubrs);\n    var l = Wr(e, r, i.objects, u.objects);\n    if (l.length !== 1) throw new Error(\"CFF table has too many fonts in 'FontSet' - count of fonts NameIndex.length = \" + l.length);\n    var f = l[0];\n    if (t.tables.cff.topDict = f, f._privateDict && (t.defaultWidthX = f._privateDict.defaultWidthX, t.nominalWidthX = f._privateDict.nominalWidthX), f.ros[0] !== void 0 && f.ros[1] !== void 0 && (t.isCIDFont = !0), t.isCIDFont) {\n        var h = f.fdArray, p = f.fdSelect;\n        if (h === 0 || p === 0) throw new Error(\"Font is marked as a CID font, but FDArray and/or FDSelect information is missing\");\n        h += r;\n        var c = ve(e, h), d = Wr(e, r, c.objects, u.objects);\n        f._fdArray = d, p += r, f._fdSelect = nn(e, p, t.numGlyphs, d.length);\n    }\n    var x = r + f.private[1], m = It(e, x, f.private[0], u.objects);\n    if (t.defaultWidthX = m.defaultWidthX, t.nominalWidthX = m.nominalWidthX, m.subrs !== 0) {\n        var y = x + m.subrs, C = ve(e, y);\n        t.subrs = C.objects, t.subrsBias = gr(t.subrs);\n    } else t.subrs = [], t.subrsBias = 0;\n    var S;\n    a.lowMemory ? (S = Qa(e, r + f.charStrings), t.nGlyphs = S.offsets.length) : (S = ve(e, r + f.charStrings), t.nGlyphs = S.objects.length);\n    var R = tn(e, r + f.charset, t.nGlyphs, u.objects);\n    if (f.encoding === 0 ? t.cffEncoding = new je(Na, R) : f.encoding === 1 ? t.cffEncoding = new je(Ha, R) : t.cffEncoding = an(e, r + f.encoding, R), t.encoding = t.encoding || t.cffEncoding, t.glyphs = new ue.GlyphSet(t), a.lowMemory) t._push = function(L) {\n        var F = Ka(L, S.offsets, e, r + f.charStrings);\n        t.glyphs.push(L, ue.cffGlyphLoader(t, L, _r, F));\n    };\n    else for(var O = 0; O < t.nGlyphs; O += 1){\n        var D = S.objects[O];\n        t.glyphs.push(O, ue.cffGlyphLoader(t, O, _r, D));\n    }\n}\nfunction Mt(e, r) {\n    var t, a = qe.indexOf(e);\n    return a >= 0 && (t = a), a = r.indexOf(e), a >= 0 ? t = a + qe.length : (t = qe.length + r.length, r.push(e)), t;\n}\n_c50 = Mt;\nfunction on() {\n    return new b.Record(\"Header\", [\n        {\n            name: \"major\",\n            type: \"Card8\",\n            value: 1\n        },\n        {\n            name: \"minor\",\n            type: \"Card8\",\n            value: 0\n        },\n        {\n            name: \"hdrSize\",\n            type: \"Card8\",\n            value: 4\n        },\n        {\n            name: \"major\",\n            type: \"Card8\",\n            value: 1\n        }\n    ]);\n}\nfunction un(e) {\n    var r = new b.Record(\"Name INDEX\", [\n        {\n            name: \"names\",\n            type: \"INDEX\",\n            value: []\n        }\n    ]);\n    r.names = [];\n    for(var t = 0; t < e.length; t += 1)r.names.push({\n        name: \"name_\" + t,\n        type: \"NAME\",\n        value: e[t]\n    });\n    return r;\n}\nfunction Pt(e, r, t) {\n    for(var a = {}, n = 0; n < e.length; n += 1){\n        var s = e[n], i = r[s.name];\n        i !== void 0 && !Rt(i, s.value) && (s.type === \"SID\" && (i = Mt(i, t)), a[s.op] = {\n            name: s.name,\n            type: s.type,\n            value: i\n        });\n    }\n    return a;\n}\n_c51 = Pt;\nfunction Vr(e, r) {\n    var t = new b.Record(\"Top DICT\", [\n        {\n            name: \"dict\",\n            type: \"DICT\",\n            value: {}\n        }\n    ]);\n    return t.dict = Pt(At, e, r), t;\n}\n_c52 = Vr;\nfunction qr(e) {\n    var r = new b.Record(\"Top DICT INDEX\", [\n        {\n            name: \"topDicts\",\n            type: \"INDEX\",\n            value: []\n        }\n    ]);\n    return r.topDicts = [\n        {\n            name: \"topDict_0\",\n            type: \"TABLE\",\n            value: e\n        }\n    ], r;\n}\nfunction ln(e) {\n    var r = new b.Record(\"String INDEX\", [\n        {\n            name: \"strings\",\n            type: \"INDEX\",\n            value: []\n        }\n    ]);\n    r.strings = [];\n    for(var t = 0; t < e.length; t += 1)r.strings.push({\n        name: \"string_\" + t,\n        type: \"STRING\",\n        value: e[t]\n    });\n    return r;\n}\nfunction fn() {\n    return new b.Record(\"Global Subr INDEX\", [\n        {\n            name: \"subrs\",\n            type: \"INDEX\",\n            value: []\n        }\n    ]);\n}\nfunction pn(e, r) {\n    for(var t = new b.Record(\"Charsets\", [\n        {\n            name: \"format\",\n            type: \"Card8\",\n            value: 0\n        }\n    ]), a = 0; a < e.length; a += 1){\n        var n = e[a], s = Mt(n, r);\n        t.fields.push({\n            name: \"glyph_\" + a,\n            type: \"SID\",\n            value: s\n        });\n    }\n    return t;\n}\nfunction hn(e) {\n    var r = [], t = e.path;\n    r.push({\n        name: \"width\",\n        type: \"NUMBER\",\n        value: e.advanceWidth\n    });\n    for(var a = 0, n = 0, s = 0; s < t.commands.length; s += 1){\n        var i = void 0, u = void 0, o = t.commands[s];\n        if (o.type === \"Q\") {\n            var l = .3333333333333333, f = 2 / 3;\n            o = {\n                type: \"C\",\n                x: o.x,\n                y: o.y,\n                x1: Math.round(l * a + f * o.x1),\n                y1: Math.round(l * n + f * o.y1),\n                x2: Math.round(l * o.x + f * o.x1),\n                y2: Math.round(l * o.y + f * o.y1)\n            };\n        }\n        if (o.type === \"M\") i = Math.round(o.x - a), u = Math.round(o.y - n), r.push({\n            name: \"dx\",\n            type: \"NUMBER\",\n            value: i\n        }), r.push({\n            name: \"dy\",\n            type: \"NUMBER\",\n            value: u\n        }), r.push({\n            name: \"rmoveto\",\n            type: \"OP\",\n            value: 21\n        }), a = Math.round(o.x), n = Math.round(o.y);\n        else if (o.type === \"L\") i = Math.round(o.x - a), u = Math.round(o.y - n), r.push({\n            name: \"dx\",\n            type: \"NUMBER\",\n            value: i\n        }), r.push({\n            name: \"dy\",\n            type: \"NUMBER\",\n            value: u\n        }), r.push({\n            name: \"rlineto\",\n            type: \"OP\",\n            value: 5\n        }), a = Math.round(o.x), n = Math.round(o.y);\n        else if (o.type === \"C\") {\n            var h = Math.round(o.x1 - a), p = Math.round(o.y1 - n), c = Math.round(o.x2 - o.x1), d = Math.round(o.y2 - o.y1);\n            i = Math.round(o.x - o.x2), u = Math.round(o.y - o.y2), r.push({\n                name: \"dx1\",\n                type: \"NUMBER\",\n                value: h\n            }), r.push({\n                name: \"dy1\",\n                type: \"NUMBER\",\n                value: p\n            }), r.push({\n                name: \"dx2\",\n                type: \"NUMBER\",\n                value: c\n            }), r.push({\n                name: \"dy2\",\n                type: \"NUMBER\",\n                value: d\n            }), r.push({\n                name: \"dx\",\n                type: \"NUMBER\",\n                value: i\n            }), r.push({\n                name: \"dy\",\n                type: \"NUMBER\",\n                value: u\n            }), r.push({\n                name: \"rrcurveto\",\n                type: \"OP\",\n                value: 8\n            }), a = Math.round(o.x), n = Math.round(o.y);\n        }\n    }\n    return r.push({\n        name: \"endchar\",\n        type: \"OP\",\n        value: 14\n    }), r;\n}\nfunction cn(e) {\n    for(var r = new b.Record(\"CharStrings INDEX\", [\n        {\n            name: \"charStrings\",\n            type: \"INDEX\",\n            value: []\n        }\n    ]), t = 0; t < e.length; t += 1){\n        var a = e.get(t), n = hn(a);\n        r.charStrings.push({\n            name: a.name,\n            type: \"CHARSTRING\",\n            value: n\n        });\n    }\n    return r;\n}\nfunction vn(e, r) {\n    var t = new b.Record(\"Private DICT\", [\n        {\n            name: \"dict\",\n            type: \"DICT\",\n            value: {}\n        }\n    ]);\n    return t.dict = Pt(Bt, e, r), t;\n}\nfunction dn(e, r) {\n    for(var t = new b.Table(\"CFF \", [\n        {\n            name: \"header\",\n            type: \"RECORD\"\n        },\n        {\n            name: \"nameIndex\",\n            type: \"RECORD\"\n        },\n        {\n            name: \"topDictIndex\",\n            type: \"RECORD\"\n        },\n        {\n            name: \"stringIndex\",\n            type: \"RECORD\"\n        },\n        {\n            name: \"globalSubrIndex\",\n            type: \"RECORD\"\n        },\n        {\n            name: \"charsets\",\n            type: \"RECORD\"\n        },\n        {\n            name: \"charStringsIndex\",\n            type: \"RECORD\"\n        },\n        {\n            name: \"privateDict\",\n            type: \"RECORD\"\n        }\n    ]), a = 1 / r.unitsPerEm, n = {\n        version: r.version,\n        fullName: r.fullName,\n        familyName: r.familyName,\n        weight: r.weightName,\n        fontBBox: r.fontBBox || [\n            0,\n            0,\n            0,\n            0\n        ],\n        fontMatrix: [\n            a,\n            0,\n            0,\n            a,\n            0,\n            0\n        ],\n        charset: 999,\n        encoding: 0,\n        charStrings: 999,\n        private: [\n            0,\n            999\n        ]\n    }, s = {}, i = [], u, o = 1; o < e.length; o += 1)u = e.get(o), i.push(u.name);\n    var l = [];\n    t.header = on(), t.nameIndex = un([\n        r.postScriptName\n    ]);\n    var f = Vr(n, l);\n    t.topDictIndex = qr(f), t.globalSubrIndex = fn(), t.charsets = pn(i, l), t.charStringsIndex = cn(e), t.privateDict = vn(s, l), t.stringIndex = ln(l);\n    var h = t.header.sizeOf() + t.nameIndex.sizeOf() + t.topDictIndex.sizeOf() + t.stringIndex.sizeOf() + t.globalSubrIndex.sizeOf();\n    return n.charset = h, n.encoding = 0, n.charStrings = n.charset + t.charsets.sizeOf(), n.private[1] = n.charStrings + t.charStringsIndex.sizeOf(), f = Vr(n, l), t.topDictIndex = qr(f), t;\n}\nvar Gt = {\n    parse: sn,\n    make: dn\n};\nfunction gn(e, r) {\n    var t = {}, a = new k.Parser(e, r);\n    return t.version = a.parseVersion(), t.fontRevision = Math.round(a.parseFixed() * 1e3) / 1e3, t.checkSumAdjustment = a.parseULong(), t.magicNumber = a.parseULong(), U.argument(t.magicNumber === 1594834165, \"Font header has wrong magic number.\"), t.flags = a.parseUShort(), t.unitsPerEm = a.parseUShort(), t.created = a.parseLongDateTime(), t.modified = a.parseLongDateTime(), t.xMin = a.parseShort(), t.yMin = a.parseShort(), t.xMax = a.parseShort(), t.yMax = a.parseShort(), t.macStyle = a.parseUShort(), t.lowestRecPPEM = a.parseUShort(), t.fontDirectionHint = a.parseShort(), t.indexToLocFormat = a.parseShort(), t.glyphDataFormat = a.parseShort(), t;\n}\nfunction mn(e) {\n    var r = Math.round(new Date().getTime() / 1e3) + 2082844800, t = r;\n    return e.createdTimestamp && (t = e.createdTimestamp + 2082844800), new b.Table(\"head\", [\n        {\n            name: \"version\",\n            type: \"FIXED\",\n            value: 65536\n        },\n        {\n            name: \"fontRevision\",\n            type: \"FIXED\",\n            value: 65536\n        },\n        {\n            name: \"checkSumAdjustment\",\n            type: \"ULONG\",\n            value: 0\n        },\n        {\n            name: \"magicNumber\",\n            type: \"ULONG\",\n            value: 1594834165\n        },\n        {\n            name: \"flags\",\n            type: \"USHORT\",\n            value: 0\n        },\n        {\n            name: \"unitsPerEm\",\n            type: \"USHORT\",\n            value: 1e3\n        },\n        {\n            name: \"created\",\n            type: \"LONGDATETIME\",\n            value: t\n        },\n        {\n            name: \"modified\",\n            type: \"LONGDATETIME\",\n            value: r\n        },\n        {\n            name: \"xMin\",\n            type: \"SHORT\",\n            value: 0\n        },\n        {\n            name: \"yMin\",\n            type: \"SHORT\",\n            value: 0\n        },\n        {\n            name: \"xMax\",\n            type: \"SHORT\",\n            value: 0\n        },\n        {\n            name: \"yMax\",\n            type: \"SHORT\",\n            value: 0\n        },\n        {\n            name: \"macStyle\",\n            type: \"USHORT\",\n            value: 0\n        },\n        {\n            name: \"lowestRecPPEM\",\n            type: \"USHORT\",\n            value: 0\n        },\n        {\n            name: \"fontDirectionHint\",\n            type: \"SHORT\",\n            value: 2\n        },\n        {\n            name: \"indexToLocFormat\",\n            type: \"SHORT\",\n            value: 0\n        },\n        {\n            name: \"glyphDataFormat\",\n            type: \"SHORT\",\n            value: 0\n        }\n    ], e);\n}\nvar Nt = {\n    parse: gn,\n    make: mn\n};\nfunction yn(e, r) {\n    var t = {}, a = new k.Parser(e, r);\n    return t.version = a.parseVersion(), t.ascender = a.parseShort(), t.descender = a.parseShort(), t.lineGap = a.parseShort(), t.advanceWidthMax = a.parseUShort(), t.minLeftSideBearing = a.parseShort(), t.minRightSideBearing = a.parseShort(), t.xMaxExtent = a.parseShort(), t.caretSlopeRise = a.parseShort(), t.caretSlopeRun = a.parseShort(), t.caretOffset = a.parseShort(), a.relativeOffset += 8, t.metricDataFormat = a.parseShort(), t.numberOfHMetrics = a.parseUShort(), t;\n}\nfunction xn(e) {\n    return new b.Table(\"hhea\", [\n        {\n            name: \"version\",\n            type: \"FIXED\",\n            value: 65536\n        },\n        {\n            name: \"ascender\",\n            type: \"FWORD\",\n            value: 0\n        },\n        {\n            name: \"descender\",\n            type: \"FWORD\",\n            value: 0\n        },\n        {\n            name: \"lineGap\",\n            type: \"FWORD\",\n            value: 0\n        },\n        {\n            name: \"advanceWidthMax\",\n            type: \"UFWORD\",\n            value: 0\n        },\n        {\n            name: \"minLeftSideBearing\",\n            type: \"FWORD\",\n            value: 0\n        },\n        {\n            name: \"minRightSideBearing\",\n            type: \"FWORD\",\n            value: 0\n        },\n        {\n            name: \"xMaxExtent\",\n            type: \"FWORD\",\n            value: 0\n        },\n        {\n            name: \"caretSlopeRise\",\n            type: \"SHORT\",\n            value: 1\n        },\n        {\n            name: \"caretSlopeRun\",\n            type: \"SHORT\",\n            value: 0\n        },\n        {\n            name: \"caretOffset\",\n            type: \"SHORT\",\n            value: 0\n        },\n        {\n            name: \"reserved1\",\n            type: \"SHORT\",\n            value: 0\n        },\n        {\n            name: \"reserved2\",\n            type: \"SHORT\",\n            value: 0\n        },\n        {\n            name: \"reserved3\",\n            type: \"SHORT\",\n            value: 0\n        },\n        {\n            name: \"reserved4\",\n            type: \"SHORT\",\n            value: 0\n        },\n        {\n            name: \"metricDataFormat\",\n            type: \"SHORT\",\n            value: 0\n        },\n        {\n            name: \"numberOfHMetrics\",\n            type: \"USHORT\",\n            value: 0\n        }\n    ], e);\n}\nvar Ht = {\n    parse: yn,\n    make: xn\n};\nfunction bn(e, r, t, a, n) {\n    for(var s, i, u = new k.Parser(e, r), o = 0; o < a; o += 1){\n        o < t && (s = u.parseUShort(), i = u.parseShort());\n        var l = n.get(o);\n        l.advanceWidth = s, l.leftSideBearing = i;\n    }\n}\nfunction Sn(e, r, t, a, n) {\n    e._hmtxTableData = {};\n    for(var s, i, u = new k.Parser(r, t), o = 0; o < n; o += 1)o < a && (s = u.parseUShort(), i = u.parseShort()), e._hmtxTableData[o] = {\n        advanceWidth: s,\n        leftSideBearing: i\n    };\n}\n_c53 = Sn;\nfunction Tn(e, r, t, a, n, s, i) {\n    i.lowMemory ? Sn(e, r, t, a, n) : bn(r, t, a, n, s);\n}\n_c54 = Tn;\nfunction kn(e) {\n    for(var r = new b.Table(\"hmtx\", []), t = 0; t < e.length; t += 1){\n        var a = e.get(t), n = a.advanceWidth || 0, s = a.leftSideBearing || 0;\n        r.fields.push({\n            name: \"advanceWidth_\" + t,\n            type: \"USHORT\",\n            value: n\n        }), r.fields.push({\n            name: \"leftSideBearing_\" + t,\n            type: \"SHORT\",\n            value: s\n        });\n    }\n    return r;\n}\nvar zt = {\n    parse: Tn,\n    make: kn\n};\nfunction Fn(e) {\n    for(var r = new b.Table(\"ltag\", [\n        {\n            name: \"version\",\n            type: \"ULONG\",\n            value: 1\n        },\n        {\n            name: \"flags\",\n            type: \"ULONG\",\n            value: 0\n        },\n        {\n            name: \"numTags\",\n            type: \"ULONG\",\n            value: e.length\n        }\n    ]), t = \"\", a = 12 + e.length * 4, n = 0; n < e.length; ++n){\n        var s = t.indexOf(e[n]);\n        s < 0 && (s = t.length, t += e[n]), r.fields.push({\n            name: \"offset \" + n,\n            type: \"USHORT\",\n            value: a + s\n        }), r.fields.push({\n            name: \"length \" + n,\n            type: \"USHORT\",\n            value: e[n].length\n        });\n    }\n    return r.fields.push({\n        name: \"stringPool\",\n        type: \"CHARARRAY\",\n        value: t\n    }), r;\n}\n_c55 = Fn;\nfunction Un(e, r) {\n    var t = new k.Parser(e, r), a = t.parseULong();\n    U.argument(a === 1, \"Unsupported ltag table version.\"), t.skip(\"uLong\", 1);\n    for(var n = t.parseULong(), s = [], i = 0; i < n; i++){\n        for(var u = \"\", o = r + t.parseUShort(), l = t.parseUShort(), f = o; f < o + l; ++f)u += String.fromCharCode(e.getInt8(f));\n        s.push(u);\n    }\n    return s;\n}\n_c56 = Un;\nvar Wt = {\n    make: Fn,\n    parse: Un\n};\nfunction Cn(e, r) {\n    var t = {}, a = new k.Parser(e, r);\n    return t.version = a.parseVersion(), t.numGlyphs = a.parseUShort(), t.version === 1 && (t.maxPoints = a.parseUShort(), t.maxContours = a.parseUShort(), t.maxCompositePoints = a.parseUShort(), t.maxCompositeContours = a.parseUShort(), t.maxZones = a.parseUShort(), t.maxTwilightPoints = a.parseUShort(), t.maxStorage = a.parseUShort(), t.maxFunctionDefs = a.parseUShort(), t.maxInstructionDefs = a.parseUShort(), t.maxStackElements = a.parseUShort(), t.maxSizeOfInstructions = a.parseUShort(), t.maxComponentElements = a.parseUShort(), t.maxComponentDepth = a.parseUShort()), t;\n}\n_c57 = Cn;\nfunction En(e) {\n    return new b.Table(\"maxp\", [\n        {\n            name: \"version\",\n            type: \"FIXED\",\n            value: 20480\n        },\n        {\n            name: \"numGlyphs\",\n            type: \"USHORT\",\n            value: e\n        }\n    ]);\n}\n_c58 = En;\nvar _t = {\n    parse: Cn,\n    make: En\n}, Vt = [\n    \"copyright\",\n    \"fontFamily\",\n    \"fontSubfamily\",\n    \"uniqueID\",\n    \"fullName\",\n    \"version\",\n    \"postScriptName\",\n    \"trademark\",\n    \"manufacturer\",\n    \"designer\",\n    \"description\",\n    \"manufacturerURL\",\n    \"designerURL\",\n    \"license\",\n    \"licenseURL\",\n    \"reserved\",\n    \"preferredFamily\",\n    \"preferredSubfamily\",\n    \"compatibleFullName\",\n    \"sampleText\",\n    \"postScriptFindFontName\",\n    \"wwsFamily\",\n    \"wwsSubfamily\"\n], qt = {\n    0: \"en\",\n    1: \"fr\",\n    2: \"de\",\n    3: \"it\",\n    4: \"nl\",\n    5: \"sv\",\n    6: \"es\",\n    7: \"da\",\n    8: \"pt\",\n    9: \"no\",\n    10: \"he\",\n    11: \"ja\",\n    12: \"ar\",\n    13: \"fi\",\n    14: \"el\",\n    15: \"is\",\n    16: \"mt\",\n    17: \"tr\",\n    18: \"hr\",\n    19: \"zh-Hant\",\n    20: \"ur\",\n    21: \"hi\",\n    22: \"th\",\n    23: \"ko\",\n    24: \"lt\",\n    25: \"pl\",\n    26: \"hu\",\n    27: \"es\",\n    28: \"lv\",\n    29: \"se\",\n    30: \"fo\",\n    31: \"fa\",\n    32: \"ru\",\n    33: \"zh\",\n    34: \"nl-BE\",\n    35: \"ga\",\n    36: \"sq\",\n    37: \"ro\",\n    38: \"cz\",\n    39: \"sk\",\n    40: \"si\",\n    41: \"yi\",\n    42: \"sr\",\n    43: \"mk\",\n    44: \"bg\",\n    45: \"uk\",\n    46: \"be\",\n    47: \"uz\",\n    48: \"kk\",\n    49: \"az-Cyrl\",\n    50: \"az-Arab\",\n    51: \"hy\",\n    52: \"ka\",\n    53: \"mo\",\n    54: \"ky\",\n    55: \"tg\",\n    56: \"tk\",\n    57: \"mn-CN\",\n    58: \"mn\",\n    59: \"ps\",\n    60: \"ks\",\n    61: \"ku\",\n    62: \"sd\",\n    63: \"bo\",\n    64: \"ne\",\n    65: \"sa\",\n    66: \"mr\",\n    67: \"bn\",\n    68: \"as\",\n    69: \"gu\",\n    70: \"pa\",\n    71: \"or\",\n    72: \"ml\",\n    73: \"kn\",\n    74: \"ta\",\n    75: \"te\",\n    76: \"si\",\n    77: \"my\",\n    78: \"km\",\n    79: \"lo\",\n    80: \"vi\",\n    81: \"id\",\n    82: \"tl\",\n    83: \"ms\",\n    84: \"ms-Arab\",\n    85: \"am\",\n    86: \"ti\",\n    87: \"om\",\n    88: \"so\",\n    89: \"sw\",\n    90: \"rw\",\n    91: \"rn\",\n    92: \"ny\",\n    93: \"mg\",\n    94: \"eo\",\n    128: \"cy\",\n    129: \"eu\",\n    130: \"ca\",\n    131: \"la\",\n    132: \"qu\",\n    133: \"gn\",\n    134: \"ay\",\n    135: \"tt\",\n    136: \"ug\",\n    137: \"dz\",\n    138: \"jv\",\n    139: \"su\",\n    140: \"gl\",\n    141: \"af\",\n    142: \"br\",\n    143: \"iu\",\n    144: \"gd\",\n    145: \"gv\",\n    146: \"ga\",\n    147: \"to\",\n    148: \"el-polyton\",\n    149: \"kl\",\n    150: \"az\",\n    151: \"nn\"\n}, On = {\n    0: 0,\n    1: 0,\n    2: 0,\n    3: 0,\n    4: 0,\n    5: 0,\n    6: 0,\n    7: 0,\n    8: 0,\n    9: 0,\n    10: 5,\n    11: 1,\n    12: 4,\n    13: 0,\n    14: 6,\n    15: 0,\n    16: 0,\n    17: 0,\n    18: 0,\n    19: 2,\n    20: 4,\n    21: 9,\n    22: 21,\n    23: 3,\n    24: 29,\n    25: 29,\n    26: 29,\n    27: 29,\n    28: 29,\n    29: 0,\n    30: 0,\n    31: 4,\n    32: 7,\n    33: 25,\n    34: 0,\n    35: 0,\n    36: 0,\n    37: 0,\n    38: 29,\n    39: 29,\n    40: 0,\n    41: 5,\n    42: 7,\n    43: 7,\n    44: 7,\n    45: 7,\n    46: 7,\n    47: 7,\n    48: 7,\n    49: 7,\n    50: 4,\n    51: 24,\n    52: 23,\n    53: 7,\n    54: 7,\n    55: 7,\n    56: 7,\n    57: 27,\n    58: 7,\n    59: 4,\n    60: 4,\n    61: 4,\n    62: 4,\n    63: 26,\n    64: 9,\n    65: 9,\n    66: 9,\n    67: 13,\n    68: 13,\n    69: 11,\n    70: 10,\n    71: 12,\n    72: 17,\n    73: 16,\n    74: 14,\n    75: 15,\n    76: 18,\n    77: 19,\n    78: 20,\n    79: 22,\n    80: 30,\n    81: 0,\n    82: 0,\n    83: 0,\n    84: 4,\n    85: 28,\n    86: 28,\n    87: 28,\n    88: 0,\n    89: 0,\n    90: 0,\n    91: 0,\n    92: 0,\n    93: 0,\n    94: 0,\n    128: 0,\n    129: 0,\n    130: 0,\n    131: 0,\n    132: 0,\n    133: 0,\n    134: 0,\n    135: 7,\n    136: 4,\n    137: 26,\n    138: 0,\n    139: 0,\n    140: 0,\n    141: 0,\n    142: 0,\n    143: 28,\n    144: 0,\n    145: 0,\n    146: 0,\n    147: 0,\n    148: 6,\n    149: 0,\n    150: 0,\n    151: 0\n}, Xt = {\n    1078: \"af\",\n    1052: \"sq\",\n    1156: \"gsw\",\n    1118: \"am\",\n    5121: \"ar-DZ\",\n    15361: \"ar-BH\",\n    3073: \"ar\",\n    2049: \"ar-IQ\",\n    11265: \"ar-JO\",\n    13313: \"ar-KW\",\n    12289: \"ar-LB\",\n    4097: \"ar-LY\",\n    6145: \"ary\",\n    8193: \"ar-OM\",\n    16385: \"ar-QA\",\n    1025: \"ar-SA\",\n    10241: \"ar-SY\",\n    7169: \"aeb\",\n    14337: \"ar-AE\",\n    9217: \"ar-YE\",\n    1067: \"hy\",\n    1101: \"as\",\n    2092: \"az-Cyrl\",\n    1068: \"az\",\n    1133: \"ba\",\n    1069: \"eu\",\n    1059: \"be\",\n    2117: \"bn\",\n    1093: \"bn-IN\",\n    8218: \"bs-Cyrl\",\n    5146: \"bs\",\n    1150: \"br\",\n    1026: \"bg\",\n    1027: \"ca\",\n    3076: \"zh-HK\",\n    5124: \"zh-MO\",\n    2052: \"zh\",\n    4100: \"zh-SG\",\n    1028: \"zh-TW\",\n    1155: \"co\",\n    1050: \"hr\",\n    4122: \"hr-BA\",\n    1029: \"cs\",\n    1030: \"da\",\n    1164: \"prs\",\n    1125: \"dv\",\n    2067: \"nl-BE\",\n    1043: \"nl\",\n    3081: \"en-AU\",\n    10249: \"en-BZ\",\n    4105: \"en-CA\",\n    9225: \"en-029\",\n    16393: \"en-IN\",\n    6153: \"en-IE\",\n    8201: \"en-JM\",\n    17417: \"en-MY\",\n    5129: \"en-NZ\",\n    13321: \"en-PH\",\n    18441: \"en-SG\",\n    7177: \"en-ZA\",\n    11273: \"en-TT\",\n    2057: \"en-GB\",\n    1033: \"en\",\n    12297: \"en-ZW\",\n    1061: \"et\",\n    1080: \"fo\",\n    1124: \"fil\",\n    1035: \"fi\",\n    2060: \"fr-BE\",\n    3084: \"fr-CA\",\n    1036: \"fr\",\n    5132: \"fr-LU\",\n    6156: \"fr-MC\",\n    4108: \"fr-CH\",\n    1122: \"fy\",\n    1110: \"gl\",\n    1079: \"ka\",\n    3079: \"de-AT\",\n    1031: \"de\",\n    5127: \"de-LI\",\n    4103: \"de-LU\",\n    2055: \"de-CH\",\n    1032: \"el\",\n    1135: \"kl\",\n    1095: \"gu\",\n    1128: \"ha\",\n    1037: \"he\",\n    1081: \"hi\",\n    1038: \"hu\",\n    1039: \"is\",\n    1136: \"ig\",\n    1057: \"id\",\n    1117: \"iu\",\n    2141: \"iu-Latn\",\n    2108: \"ga\",\n    1076: \"xh\",\n    1077: \"zu\",\n    1040: \"it\",\n    2064: \"it-CH\",\n    1041: \"ja\",\n    1099: \"kn\",\n    1087: \"kk\",\n    1107: \"km\",\n    1158: \"quc\",\n    1159: \"rw\",\n    1089: \"sw\",\n    1111: \"kok\",\n    1042: \"ko\",\n    1088: \"ky\",\n    1108: \"lo\",\n    1062: \"lv\",\n    1063: \"lt\",\n    2094: \"dsb\",\n    1134: \"lb\",\n    1071: \"mk\",\n    2110: \"ms-BN\",\n    1086: \"ms\",\n    1100: \"ml\",\n    1082: \"mt\",\n    1153: \"mi\",\n    1146: \"arn\",\n    1102: \"mr\",\n    1148: \"moh\",\n    1104: \"mn\",\n    2128: \"mn-CN\",\n    1121: \"ne\",\n    1044: \"nb\",\n    2068: \"nn\",\n    1154: \"oc\",\n    1096: \"or\",\n    1123: \"ps\",\n    1045: \"pl\",\n    1046: \"pt\",\n    2070: \"pt-PT\",\n    1094: \"pa\",\n    1131: \"qu-BO\",\n    2155: \"qu-EC\",\n    3179: \"qu\",\n    1048: \"ro\",\n    1047: \"rm\",\n    1049: \"ru\",\n    9275: \"smn\",\n    4155: \"smj-NO\",\n    5179: \"smj\",\n    3131: \"se-FI\",\n    1083: \"se\",\n    2107: \"se-SE\",\n    8251: \"sms\",\n    6203: \"sma-NO\",\n    7227: \"sms\",\n    1103: \"sa\",\n    7194: \"sr-Cyrl-BA\",\n    3098: \"sr\",\n    6170: \"sr-Latn-BA\",\n    2074: \"sr-Latn\",\n    1132: \"nso\",\n    1074: \"tn\",\n    1115: \"si\",\n    1051: \"sk\",\n    1060: \"sl\",\n    11274: \"es-AR\",\n    16394: \"es-BO\",\n    13322: \"es-CL\",\n    9226: \"es-CO\",\n    5130: \"es-CR\",\n    7178: \"es-DO\",\n    12298: \"es-EC\",\n    17418: \"es-SV\",\n    4106: \"es-GT\",\n    18442: \"es-HN\",\n    2058: \"es-MX\",\n    19466: \"es-NI\",\n    6154: \"es-PA\",\n    15370: \"es-PY\",\n    10250: \"es-PE\",\n    20490: \"es-PR\",\n    3082: \"es\",\n    1034: \"es\",\n    21514: \"es-US\",\n    14346: \"es-UY\",\n    8202: \"es-VE\",\n    2077: \"sv-FI\",\n    1053: \"sv\",\n    1114: \"syr\",\n    1064: \"tg\",\n    2143: \"tzm\",\n    1097: \"ta\",\n    1092: \"tt\",\n    1098: \"te\",\n    1054: \"th\",\n    1105: \"bo\",\n    1055: \"tr\",\n    1090: \"tk\",\n    1152: \"ug\",\n    1058: \"uk\",\n    1070: \"hsb\",\n    1056: \"ur\",\n    2115: \"uz-Cyrl\",\n    1091: \"uz\",\n    1066: \"vi\",\n    1106: \"cy\",\n    1160: \"wo\",\n    1157: \"sah\",\n    1144: \"ii\",\n    1130: \"yo\"\n};\nfunction Ln(e, r, t) {\n    switch(e){\n        case 0:\n            if (r === 65535) return \"und\";\n            if (t) return t[r];\n            break;\n        case 1:\n            return qt[r];\n        case 3:\n            return Xt[r];\n    }\n}\n_c59 = Ln;\nvar mr = \"utf-16\", Rn = {\n    0: \"macintosh\",\n    1: \"x-mac-japanese\",\n    2: \"x-mac-chinesetrad\",\n    3: \"x-mac-korean\",\n    6: \"x-mac-greek\",\n    7: \"x-mac-cyrillic\",\n    9: \"x-mac-devanagai\",\n    10: \"x-mac-gurmukhi\",\n    11: \"x-mac-gujarati\",\n    12: \"x-mac-oriya\",\n    13: \"x-mac-bengali\",\n    14: \"x-mac-tamil\",\n    15: \"x-mac-telugu\",\n    16: \"x-mac-kannada\",\n    17: \"x-mac-malayalam\",\n    18: \"x-mac-sinhalese\",\n    19: \"x-mac-burmese\",\n    20: \"x-mac-khmer\",\n    21: \"x-mac-thai\",\n    22: \"x-mac-lao\",\n    23: \"x-mac-georgian\",\n    24: \"x-mac-armenian\",\n    25: \"x-mac-chinesesimp\",\n    26: \"x-mac-tibetan\",\n    27: \"x-mac-mongolian\",\n    28: \"x-mac-ethiopic\",\n    29: \"x-mac-ce\",\n    30: \"x-mac-vietnamese\",\n    31: \"x-mac-extarabic\"\n}, wn = {\n    15: \"x-mac-icelandic\",\n    17: \"x-mac-turkish\",\n    18: \"x-mac-croatian\",\n    24: \"x-mac-ce\",\n    25: \"x-mac-ce\",\n    26: \"x-mac-ce\",\n    27: \"x-mac-ce\",\n    28: \"x-mac-ce\",\n    30: \"x-mac-icelandic\",\n    37: \"x-mac-romanian\",\n    38: \"x-mac-ce\",\n    39: \"x-mac-ce\",\n    40: \"x-mac-ce\",\n    143: \"x-mac-inuit\",\n    146: \"x-mac-gaelic\"\n};\nfunction Yt(e, r, t) {\n    switch(e){\n        case 0:\n            return mr;\n        case 1:\n            return wn[t] || Rn[r];\n        case 3:\n            if (r === 1 || r === 10) return mr;\n            break;\n    }\n}\n_c60 = Yt;\nfunction Dn(e, r, t) {\n    for(var a = {}, n = new k.Parser(e, r), s = n.parseUShort(), i = n.parseUShort(), u = n.offset + n.parseUShort(), o = 0; o < i; o++){\n        var l = n.parseUShort(), f = n.parseUShort(), h = n.parseUShort(), p = n.parseUShort(), c = Vt[p] || p, d = n.parseUShort(), x = n.parseUShort(), m = Ln(l, h, t), y = Yt(l, f, h);\n        if (y !== void 0 && m !== void 0) {\n            var C = void 0;\n            if (y === mr ? C = Fe.UTF16(e, u + x, d) : C = Fe.MACSTRING(e, u + x, d, y), C) {\n                var S = a[c];\n                S === void 0 && (S = a[c] = {}), S[m] = C;\n            }\n        }\n    }\n    var R = 0;\n    return s === 1 && (R = n.parseUShort()), a;\n}\n_c61 = Dn;\nfunction nr(e) {\n    var r = {};\n    for(var t in e)r[e[t]] = parseInt(t);\n    return r;\n}\nfunction Xr(e, r, t, a, n, s) {\n    return new b.Record(\"NameRecord\", [\n        {\n            name: \"platformID\",\n            type: \"USHORT\",\n            value: e\n        },\n        {\n            name: \"encodingID\",\n            type: \"USHORT\",\n            value: r\n        },\n        {\n            name: \"languageID\",\n            type: \"USHORT\",\n            value: t\n        },\n        {\n            name: \"nameID\",\n            type: \"USHORT\",\n            value: a\n        },\n        {\n            name: \"length\",\n            type: \"USHORT\",\n            value: n\n        },\n        {\n            name: \"offset\",\n            type: \"USHORT\",\n            value: s\n        }\n    ]);\n}\n_c62 = Xr;\nfunction An(e, r) {\n    var t = e.length, a = r.length - t + 1;\n    e: for(var n = 0; n < a; n++)for(; n < a; n++){\n        for(var s = 0; s < t; s++)if (r[n + s] !== e[s]) continue e;\n        return n;\n    }\n    return -1;\n}\n_c63 = An;\nfunction Yr(e, r) {\n    var t = An(e, r);\n    if (t < 0) {\n        t = r.length;\n        for(var a = 0, n = e.length; a < n; ++a)r.push(e[a]);\n    }\n    return t;\n}\n_c64 = Yr;\nfunction Bn(e, r) {\n    var t, a = [], n = {}, s = nr(Vt);\n    for(var i in e){\n        var u = s[i];\n        if (u === void 0 && (u = i), t = parseInt(u), isNaN(t)) throw new Error('Name table entry \"' + i + '\" does not exist, see nameTableNames for complete list.');\n        n[t] = e[i], a.push(t);\n    }\n    for(var o = nr(qt), l = nr(Xt), f = [], h = [], p = 0; p < a.length; p++){\n        t = a[p];\n        var c = n[t];\n        for(var d in c){\n            var x = c[d], m = 1, y = o[d], C = On[y], S = Yt(m, C, y), R = g.MACSTRING(x, S);\n            R === void 0 && (m = 0, y = r.indexOf(d), y < 0 && (y = r.length, r.push(d)), C = 4, R = g.UTF16(x));\n            var O = Yr(R, h);\n            f.push(Xr(m, C, y, t, R.length, O));\n            var D = l[d];\n            if (D !== void 0) {\n                var L = g.UTF16(x), F = Yr(L, h);\n                f.push(Xr(3, 1, D, t, L.length, F));\n            }\n        }\n    }\n    f.sort(function(Z, j) {\n        return Z.platformID - j.platformID || Z.encodingID - j.encodingID || Z.languageID - j.languageID || Z.nameID - j.nameID;\n    });\n    for(var G = new b.Table(\"name\", [\n        {\n            name: \"format\",\n            type: \"USHORT\",\n            value: 0\n        },\n        {\n            name: \"count\",\n            type: \"USHORT\",\n            value: f.length\n        },\n        {\n            name: \"stringOffset\",\n            type: \"USHORT\",\n            value: 6 + f.length * 12\n        }\n    ]), Y = 0; Y < f.length; Y++)G.fields.push({\n        name: \"record_\" + Y,\n        type: \"RECORD\",\n        value: f[Y]\n    });\n    return G.fields.push({\n        name: \"strings\",\n        type: \"LITERAL\",\n        value: h\n    }), G;\n}\n_c65 = Bn;\nvar Zt = {\n    parse: Dn,\n    make: Bn\n}, yr = [\n    {\n        begin: 0,\n        end: 127\n    },\n    {\n        begin: 128,\n        end: 255\n    },\n    {\n        begin: 256,\n        end: 383\n    },\n    {\n        begin: 384,\n        end: 591\n    },\n    {\n        begin: 592,\n        end: 687\n    },\n    {\n        begin: 688,\n        end: 767\n    },\n    {\n        begin: 768,\n        end: 879\n    },\n    {\n        begin: 880,\n        end: 1023\n    },\n    {\n        begin: 11392,\n        end: 11519\n    },\n    {\n        begin: 1024,\n        end: 1279\n    },\n    {\n        begin: 1328,\n        end: 1423\n    },\n    {\n        begin: 1424,\n        end: 1535\n    },\n    {\n        begin: 42240,\n        end: 42559\n    },\n    {\n        begin: 1536,\n        end: 1791\n    },\n    {\n        begin: 1984,\n        end: 2047\n    },\n    {\n        begin: 2304,\n        end: 2431\n    },\n    {\n        begin: 2432,\n        end: 2559\n    },\n    {\n        begin: 2560,\n        end: 2687\n    },\n    {\n        begin: 2688,\n        end: 2815\n    },\n    {\n        begin: 2816,\n        end: 2943\n    },\n    {\n        begin: 2944,\n        end: 3071\n    },\n    {\n        begin: 3072,\n        end: 3199\n    },\n    {\n        begin: 3200,\n        end: 3327\n    },\n    {\n        begin: 3328,\n        end: 3455\n    },\n    {\n        begin: 3584,\n        end: 3711\n    },\n    {\n        begin: 3712,\n        end: 3839\n    },\n    {\n        begin: 4256,\n        end: 4351\n    },\n    {\n        begin: 6912,\n        end: 7039\n    },\n    {\n        begin: 4352,\n        end: 4607\n    },\n    {\n        begin: 7680,\n        end: 7935\n    },\n    {\n        begin: 7936,\n        end: 8191\n    },\n    {\n        begin: 8192,\n        end: 8303\n    },\n    {\n        begin: 8304,\n        end: 8351\n    },\n    {\n        begin: 8352,\n        end: 8399\n    },\n    {\n        begin: 8400,\n        end: 8447\n    },\n    {\n        begin: 8448,\n        end: 8527\n    },\n    {\n        begin: 8528,\n        end: 8591\n    },\n    {\n        begin: 8592,\n        end: 8703\n    },\n    {\n        begin: 8704,\n        end: 8959\n    },\n    {\n        begin: 8960,\n        end: 9215\n    },\n    {\n        begin: 9216,\n        end: 9279\n    },\n    {\n        begin: 9280,\n        end: 9311\n    },\n    {\n        begin: 9312,\n        end: 9471\n    },\n    {\n        begin: 9472,\n        end: 9599\n    },\n    {\n        begin: 9600,\n        end: 9631\n    },\n    {\n        begin: 9632,\n        end: 9727\n    },\n    {\n        begin: 9728,\n        end: 9983\n    },\n    {\n        begin: 9984,\n        end: 10175\n    },\n    {\n        begin: 12288,\n        end: 12351\n    },\n    {\n        begin: 12352,\n        end: 12447\n    },\n    {\n        begin: 12448,\n        end: 12543\n    },\n    {\n        begin: 12544,\n        end: 12591\n    },\n    {\n        begin: 12592,\n        end: 12687\n    },\n    {\n        begin: 43072,\n        end: 43135\n    },\n    {\n        begin: 12800,\n        end: 13055\n    },\n    {\n        begin: 13056,\n        end: 13311\n    },\n    {\n        begin: 44032,\n        end: 55215\n    },\n    {\n        begin: 55296,\n        end: 57343\n    },\n    {\n        begin: 67840,\n        end: 67871\n    },\n    {\n        begin: 19968,\n        end: 40959\n    },\n    {\n        begin: 57344,\n        end: 63743\n    },\n    {\n        begin: 12736,\n        end: 12783\n    },\n    {\n        begin: 64256,\n        end: 64335\n    },\n    {\n        begin: 64336,\n        end: 65023\n    },\n    {\n        begin: 65056,\n        end: 65071\n    },\n    {\n        begin: 65040,\n        end: 65055\n    },\n    {\n        begin: 65104,\n        end: 65135\n    },\n    {\n        begin: 65136,\n        end: 65279\n    },\n    {\n        begin: 65280,\n        end: 65519\n    },\n    {\n        begin: 65520,\n        end: 65535\n    },\n    {\n        begin: 3840,\n        end: 4095\n    },\n    {\n        begin: 1792,\n        end: 1871\n    },\n    {\n        begin: 1920,\n        end: 1983\n    },\n    {\n        begin: 3456,\n        end: 3583\n    },\n    {\n        begin: 4096,\n        end: 4255\n    },\n    {\n        begin: 4608,\n        end: 4991\n    },\n    {\n        begin: 5024,\n        end: 5119\n    },\n    {\n        begin: 5120,\n        end: 5759\n    },\n    {\n        begin: 5760,\n        end: 5791\n    },\n    {\n        begin: 5792,\n        end: 5887\n    },\n    {\n        begin: 6016,\n        end: 6143\n    },\n    {\n        begin: 6144,\n        end: 6319\n    },\n    {\n        begin: 10240,\n        end: 10495\n    },\n    {\n        begin: 40960,\n        end: 42127\n    },\n    {\n        begin: 5888,\n        end: 5919\n    },\n    {\n        begin: 66304,\n        end: 66351\n    },\n    {\n        begin: 66352,\n        end: 66383\n    },\n    {\n        begin: 66560,\n        end: 66639\n    },\n    {\n        begin: 118784,\n        end: 119039\n    },\n    {\n        begin: 119808,\n        end: 120831\n    },\n    {\n        begin: 1044480,\n        end: 1048573\n    },\n    {\n        begin: 65024,\n        end: 65039\n    },\n    {\n        begin: 917504,\n        end: 917631\n    },\n    {\n        begin: 6400,\n        end: 6479\n    },\n    {\n        begin: 6480,\n        end: 6527\n    },\n    {\n        begin: 6528,\n        end: 6623\n    },\n    {\n        begin: 6656,\n        end: 6687\n    },\n    {\n        begin: 11264,\n        end: 11359\n    },\n    {\n        begin: 11568,\n        end: 11647\n    },\n    {\n        begin: 19904,\n        end: 19967\n    },\n    {\n        begin: 43008,\n        end: 43055\n    },\n    {\n        begin: 65536,\n        end: 65663\n    },\n    {\n        begin: 65856,\n        end: 65935\n    },\n    {\n        begin: 66432,\n        end: 66463\n    },\n    {\n        begin: 66464,\n        end: 66527\n    },\n    {\n        begin: 66640,\n        end: 66687\n    },\n    {\n        begin: 66688,\n        end: 66735\n    },\n    {\n        begin: 67584,\n        end: 67647\n    },\n    {\n        begin: 68096,\n        end: 68191\n    },\n    {\n        begin: 119552,\n        end: 119647\n    },\n    {\n        begin: 73728,\n        end: 74751\n    },\n    {\n        begin: 119648,\n        end: 119679\n    },\n    {\n        begin: 7040,\n        end: 7103\n    },\n    {\n        begin: 7168,\n        end: 7247\n    },\n    {\n        begin: 7248,\n        end: 7295\n    },\n    {\n        begin: 43136,\n        end: 43231\n    },\n    {\n        begin: 43264,\n        end: 43311\n    },\n    {\n        begin: 43312,\n        end: 43359\n    },\n    {\n        begin: 43520,\n        end: 43615\n    },\n    {\n        begin: 65936,\n        end: 65999\n    },\n    {\n        begin: 66e3,\n        end: 66047\n    },\n    {\n        begin: 66208,\n        end: 66271\n    },\n    {\n        begin: 127024,\n        end: 127135\n    }\n];\nfunction In(e) {\n    for(var r = 0; r < yr.length; r += 1){\n        var t = yr[r];\n        if (e >= t.begin && e < t.end) return r;\n    }\n    return -1;\n}\n_c66 = In;\nfunction Mn(e, r) {\n    var t = {}, a = new k.Parser(e, r);\n    t.version = a.parseUShort(), t.xAvgCharWidth = a.parseShort(), t.usWeightClass = a.parseUShort(), t.usWidthClass = a.parseUShort(), t.fsType = a.parseUShort(), t.ySubscriptXSize = a.parseShort(), t.ySubscriptYSize = a.parseShort(), t.ySubscriptXOffset = a.parseShort(), t.ySubscriptYOffset = a.parseShort(), t.ySuperscriptXSize = a.parseShort(), t.ySuperscriptYSize = a.parseShort(), t.ySuperscriptXOffset = a.parseShort(), t.ySuperscriptYOffset = a.parseShort(), t.yStrikeoutSize = a.parseShort(), t.yStrikeoutPosition = a.parseShort(), t.sFamilyClass = a.parseShort(), t.panose = [];\n    for(var n = 0; n < 10; n++)t.panose[n] = a.parseByte();\n    return t.ulUnicodeRange1 = a.parseULong(), t.ulUnicodeRange2 = a.parseULong(), t.ulUnicodeRange3 = a.parseULong(), t.ulUnicodeRange4 = a.parseULong(), t.achVendID = String.fromCharCode(a.parseByte(), a.parseByte(), a.parseByte(), a.parseByte()), t.fsSelection = a.parseUShort(), t.usFirstCharIndex = a.parseUShort(), t.usLastCharIndex = a.parseUShort(), t.sTypoAscender = a.parseShort(), t.sTypoDescender = a.parseShort(), t.sTypoLineGap = a.parseShort(), t.usWinAscent = a.parseUShort(), t.usWinDescent = a.parseUShort(), t.version >= 1 && (t.ulCodePageRange1 = a.parseULong(), t.ulCodePageRange2 = a.parseULong()), t.version >= 2 && (t.sxHeight = a.parseShort(), t.sCapHeight = a.parseShort(), t.usDefaultChar = a.parseUShort(), t.usBreakChar = a.parseUShort(), t.usMaxContent = a.parseUShort()), t;\n}\n_c67 = Mn;\nfunction Pn(e) {\n    return new b.Table(\"OS/2\", [\n        {\n            name: \"version\",\n            type: \"USHORT\",\n            value: 3\n        },\n        {\n            name: \"xAvgCharWidth\",\n            type: \"SHORT\",\n            value: 0\n        },\n        {\n            name: \"usWeightClass\",\n            type: \"USHORT\",\n            value: 0\n        },\n        {\n            name: \"usWidthClass\",\n            type: \"USHORT\",\n            value: 0\n        },\n        {\n            name: \"fsType\",\n            type: \"USHORT\",\n            value: 0\n        },\n        {\n            name: \"ySubscriptXSize\",\n            type: \"SHORT\",\n            value: 650\n        },\n        {\n            name: \"ySubscriptYSize\",\n            type: \"SHORT\",\n            value: 699\n        },\n        {\n            name: \"ySubscriptXOffset\",\n            type: \"SHORT\",\n            value: 0\n        },\n        {\n            name: \"ySubscriptYOffset\",\n            type: \"SHORT\",\n            value: 140\n        },\n        {\n            name: \"ySuperscriptXSize\",\n            type: \"SHORT\",\n            value: 650\n        },\n        {\n            name: \"ySuperscriptYSize\",\n            type: \"SHORT\",\n            value: 699\n        },\n        {\n            name: \"ySuperscriptXOffset\",\n            type: \"SHORT\",\n            value: 0\n        },\n        {\n            name: \"ySuperscriptYOffset\",\n            type: \"SHORT\",\n            value: 479\n        },\n        {\n            name: \"yStrikeoutSize\",\n            type: \"SHORT\",\n            value: 49\n        },\n        {\n            name: \"yStrikeoutPosition\",\n            type: \"SHORT\",\n            value: 258\n        },\n        {\n            name: \"sFamilyClass\",\n            type: \"SHORT\",\n            value: 0\n        },\n        {\n            name: \"bFamilyType\",\n            type: \"BYTE\",\n            value: 0\n        },\n        {\n            name: \"bSerifStyle\",\n            type: \"BYTE\",\n            value: 0\n        },\n        {\n            name: \"bWeight\",\n            type: \"BYTE\",\n            value: 0\n        },\n        {\n            name: \"bProportion\",\n            type: \"BYTE\",\n            value: 0\n        },\n        {\n            name: \"bContrast\",\n            type: \"BYTE\",\n            value: 0\n        },\n        {\n            name: \"bStrokeVariation\",\n            type: \"BYTE\",\n            value: 0\n        },\n        {\n            name: \"bArmStyle\",\n            type: \"BYTE\",\n            value: 0\n        },\n        {\n            name: \"bLetterform\",\n            type: \"BYTE\",\n            value: 0\n        },\n        {\n            name: \"bMidline\",\n            type: \"BYTE\",\n            value: 0\n        },\n        {\n            name: \"bXHeight\",\n            type: \"BYTE\",\n            value: 0\n        },\n        {\n            name: \"ulUnicodeRange1\",\n            type: \"ULONG\",\n            value: 0\n        },\n        {\n            name: \"ulUnicodeRange2\",\n            type: \"ULONG\",\n            value: 0\n        },\n        {\n            name: \"ulUnicodeRange3\",\n            type: \"ULONG\",\n            value: 0\n        },\n        {\n            name: \"ulUnicodeRange4\",\n            type: \"ULONG\",\n            value: 0\n        },\n        {\n            name: \"achVendID\",\n            type: \"CHARARRAY\",\n            value: \"XXXX\"\n        },\n        {\n            name: \"fsSelection\",\n            type: \"USHORT\",\n            value: 0\n        },\n        {\n            name: \"usFirstCharIndex\",\n            type: \"USHORT\",\n            value: 0\n        },\n        {\n            name: \"usLastCharIndex\",\n            type: \"USHORT\",\n            value: 0\n        },\n        {\n            name: \"sTypoAscender\",\n            type: \"SHORT\",\n            value: 0\n        },\n        {\n            name: \"sTypoDescender\",\n            type: \"SHORT\",\n            value: 0\n        },\n        {\n            name: \"sTypoLineGap\",\n            type: \"SHORT\",\n            value: 0\n        },\n        {\n            name: \"usWinAscent\",\n            type: \"USHORT\",\n            value: 0\n        },\n        {\n            name: \"usWinDescent\",\n            type: \"USHORT\",\n            value: 0\n        },\n        {\n            name: \"ulCodePageRange1\",\n            type: \"ULONG\",\n            value: 0\n        },\n        {\n            name: \"ulCodePageRange2\",\n            type: \"ULONG\",\n            value: 0\n        },\n        {\n            name: \"sxHeight\",\n            type: \"SHORT\",\n            value: 0\n        },\n        {\n            name: \"sCapHeight\",\n            type: \"SHORT\",\n            value: 0\n        },\n        {\n            name: \"usDefaultChar\",\n            type: \"USHORT\",\n            value: 0\n        },\n        {\n            name: \"usBreakChar\",\n            type: \"USHORT\",\n            value: 0\n        },\n        {\n            name: \"usMaxContext\",\n            type: \"USHORT\",\n            value: 0\n        }\n    ], e);\n}\n_c68 = Pn;\nvar xr = {\n    parse: Mn,\n    make: Pn,\n    unicodeRanges: yr,\n    getUnicodeRange: In\n};\nfunction Gn(e, r) {\n    var t = {}, a = new k.Parser(e, r);\n    switch(t.version = a.parseVersion(), t.italicAngle = a.parseFixed(), t.underlinePosition = a.parseShort(), t.underlineThickness = a.parseShort(), t.isFixedPitch = a.parseULong(), t.minMemType42 = a.parseULong(), t.maxMemType42 = a.parseULong(), t.minMemType1 = a.parseULong(), t.maxMemType1 = a.parseULong(), t.version){\n        case 1:\n            t.names = xe.slice();\n            break;\n        case 2:\n            t.numberOfGlyphs = a.parseUShort(), t.glyphNameIndex = new Array(t.numberOfGlyphs);\n            for(var n = 0; n < t.numberOfGlyphs; n++)t.glyphNameIndex[n] = a.parseUShort();\n            t.names = [];\n            for(var s = 0; s < t.numberOfGlyphs; s++)if (t.glyphNameIndex[s] >= xe.length) {\n                var i = a.parseChar();\n                t.names.push(a.parseString(i));\n            }\n            break;\n        case 2.5:\n            t.numberOfGlyphs = a.parseUShort(), t.offset = new Array(t.numberOfGlyphs);\n            for(var u = 0; u < t.numberOfGlyphs; u++)t.offset[u] = a.parseChar();\n            break;\n    }\n    return t;\n}\n_c69 = Gn;\nfunction Nn() {\n    return new b.Table(\"post\", [\n        {\n            name: \"version\",\n            type: \"FIXED\",\n            value: 196608\n        },\n        {\n            name: \"italicAngle\",\n            type: \"FIXED\",\n            value: 0\n        },\n        {\n            name: \"underlinePosition\",\n            type: \"FWORD\",\n            value: 0\n        },\n        {\n            name: \"underlineThickness\",\n            type: \"FWORD\",\n            value: 0\n        },\n        {\n            name: \"isFixedPitch\",\n            type: \"ULONG\",\n            value: 0\n        },\n        {\n            name: \"minMemType42\",\n            type: \"ULONG\",\n            value: 0\n        },\n        {\n            name: \"maxMemType42\",\n            type: \"ULONG\",\n            value: 0\n        },\n        {\n            name: \"minMemType1\",\n            type: \"ULONG\",\n            value: 0\n        },\n        {\n            name: \"maxMemType1\",\n            type: \"ULONG\",\n            value: 0\n        }\n    ]);\n}\n_c70 = Nn;\nvar Qt = {\n    parse: Gn,\n    make: Nn\n}, ee = new Array(9);\nee[1] = function() {\n    var r = this.offset + this.relativeOffset, t = this.parseUShort();\n    if (t === 1) return {\n        substFormat: 1,\n        coverage: this.parsePointer(v.coverage),\n        deltaGlyphId: this.parseUShort()\n    };\n    if (t === 2) return {\n        substFormat: 2,\n        coverage: this.parsePointer(v.coverage),\n        substitute: this.parseOffset16List()\n    };\n    U.assert(!1, \"0x\" + r.toString(16) + \": lookup type 1 format must be 1 or 2.\");\n};\nee[2] = function() {\n    var r = this.parseUShort();\n    return U.argument(r === 1, \"GSUB Multiple Substitution Subtable identifier-format must be 1\"), {\n        substFormat: r,\n        coverage: this.parsePointer(v.coverage),\n        sequences: this.parseListOfLists()\n    };\n};\nee[3] = function() {\n    var r = this.parseUShort();\n    return U.argument(r === 1, \"GSUB Alternate Substitution Subtable identifier-format must be 1\"), {\n        substFormat: r,\n        coverage: this.parsePointer(v.coverage),\n        alternateSets: this.parseListOfLists()\n    };\n};\nee[4] = function() {\n    var r = this.parseUShort();\n    return U.argument(r === 1, \"GSUB ligature table identifier-format must be 1\"), {\n        substFormat: r,\n        coverage: this.parsePointer(v.coverage),\n        ligatureSets: this.parseListOfLists(function() {\n            return {\n                ligGlyph: this.parseUShort(),\n                components: this.parseUShortList(this.parseUShort() - 1)\n            };\n        })\n    };\n};\nvar ke = {\n    sequenceIndex: v.uShort,\n    lookupListIndex: v.uShort\n};\nee[5] = function() {\n    var r = this.offset + this.relativeOffset, t = this.parseUShort();\n    if (t === 1) return {\n        substFormat: t,\n        coverage: this.parsePointer(v.coverage),\n        ruleSets: this.parseListOfLists(function() {\n            var s = this.parseUShort(), i = this.parseUShort();\n            return {\n                input: this.parseUShortList(s - 1),\n                lookupRecords: this.parseRecordList(i, ke)\n            };\n        })\n    };\n    if (t === 2) return {\n        substFormat: t,\n        coverage: this.parsePointer(v.coverage),\n        classDef: this.parsePointer(v.classDef),\n        classSets: this.parseListOfLists(function() {\n            var s = this.parseUShort(), i = this.parseUShort();\n            return {\n                classes: this.parseUShortList(s - 1),\n                lookupRecords: this.parseRecordList(i, ke)\n            };\n        })\n    };\n    if (t === 3) {\n        var a = this.parseUShort(), n = this.parseUShort();\n        return {\n            substFormat: t,\n            coverages: this.parseList(a, v.pointer(v.coverage)),\n            lookupRecords: this.parseRecordList(n, ke)\n        };\n    }\n    U.assert(!1, \"0x\" + r.toString(16) + \": lookup type 5 format must be 1, 2 or 3.\");\n};\nee[6] = function() {\n    var r = this.offset + this.relativeOffset, t = this.parseUShort();\n    if (t === 1) return {\n        substFormat: 1,\n        coverage: this.parsePointer(v.coverage),\n        chainRuleSets: this.parseListOfLists(function() {\n            return {\n                backtrack: this.parseUShortList(),\n                input: this.parseUShortList(this.parseShort() - 1),\n                lookahead: this.parseUShortList(),\n                lookupRecords: this.parseRecordList(ke)\n            };\n        })\n    };\n    if (t === 2) return {\n        substFormat: 2,\n        coverage: this.parsePointer(v.coverage),\n        backtrackClassDef: this.parsePointer(v.classDef),\n        inputClassDef: this.parsePointer(v.classDef),\n        lookaheadClassDef: this.parsePointer(v.classDef),\n        chainClassSet: this.parseListOfLists(function() {\n            return {\n                backtrack: this.parseUShortList(),\n                input: this.parseUShortList(this.parseShort() - 1),\n                lookahead: this.parseUShortList(),\n                lookupRecords: this.parseRecordList(ke)\n            };\n        })\n    };\n    if (t === 3) return {\n        substFormat: 3,\n        backtrackCoverage: this.parseList(v.pointer(v.coverage)),\n        inputCoverage: this.parseList(v.pointer(v.coverage)),\n        lookaheadCoverage: this.parseList(v.pointer(v.coverage)),\n        lookupRecords: this.parseRecordList(ke)\n    };\n    U.assert(!1, \"0x\" + r.toString(16) + \": lookup type 6 format must be 1, 2 or 3.\");\n};\nee[7] = function() {\n    var r = this.parseUShort();\n    U.argument(r === 1, \"GSUB Extension Substitution subtable identifier-format must be 1\");\n    var t = this.parseUShort(), a = new v(this.data, this.offset + this.parseULong());\n    return {\n        substFormat: 1,\n        lookupType: t,\n        extension: ee[t].call(a)\n    };\n};\nee[8] = function() {\n    var r = this.parseUShort();\n    return U.argument(r === 1, \"GSUB Reverse Chaining Contextual Single Substitution Subtable identifier-format must be 1\"), {\n        substFormat: r,\n        coverage: this.parsePointer(v.coverage),\n        backtrackCoverage: this.parseList(v.pointer(v.coverage)),\n        lookaheadCoverage: this.parseList(v.pointer(v.coverage)),\n        substitutes: this.parseUShortList()\n    };\n};\nfunction Hn(e, r) {\n    r = r || 0;\n    var t = new v(e, r), a = t.parseVersion(1);\n    return U.argument(a === 1 || a === 1.1, \"Unsupported GSUB table version.\"), a === 1 ? {\n        version: a,\n        scripts: t.parseScriptList(),\n        features: t.parseFeatureList(),\n        lookups: t.parseLookupList(ee)\n    } : {\n        version: a,\n        scripts: t.parseScriptList(),\n        features: t.parseFeatureList(),\n        lookups: t.parseLookupList(ee),\n        variations: t.parseFeatureVariationsList()\n    };\n}\n_c71 = Hn;\nvar Ue = new Array(9);\nUe[1] = function(r) {\n    return r.substFormat === 1 ? new b.Table(\"substitutionTable\", [\n        {\n            name: \"substFormat\",\n            type: \"USHORT\",\n            value: 1\n        },\n        {\n            name: \"coverage\",\n            type: \"TABLE\",\n            value: new b.Coverage(r.coverage)\n        },\n        {\n            name: \"deltaGlyphID\",\n            type: \"USHORT\",\n            value: r.deltaGlyphId\n        }\n    ]) : new b.Table(\"substitutionTable\", [\n        {\n            name: \"substFormat\",\n            type: \"USHORT\",\n            value: 2\n        },\n        {\n            name: \"coverage\",\n            type: \"TABLE\",\n            value: new b.Coverage(r.coverage)\n        }\n    ].concat(b.ushortList(\"substitute\", r.substitute)));\n};\nUe[2] = function(r) {\n    return U.assert(r.substFormat === 1, \"Lookup type 2 substFormat must be 1.\"), new b.Table(\"substitutionTable\", [\n        {\n            name: \"substFormat\",\n            type: \"USHORT\",\n            value: 1\n        },\n        {\n            name: \"coverage\",\n            type: \"TABLE\",\n            value: new b.Coverage(r.coverage)\n        }\n    ].concat(b.tableList(\"seqSet\", r.sequences, function(t) {\n        return new b.Table(\"sequenceSetTable\", b.ushortList(\"sequence\", t));\n    })));\n};\nUe[3] = function(r) {\n    return U.assert(r.substFormat === 1, \"Lookup type 3 substFormat must be 1.\"), new b.Table(\"substitutionTable\", [\n        {\n            name: \"substFormat\",\n            type: \"USHORT\",\n            value: 1\n        },\n        {\n            name: \"coverage\",\n            type: \"TABLE\",\n            value: new b.Coverage(r.coverage)\n        }\n    ].concat(b.tableList(\"altSet\", r.alternateSets, function(t) {\n        return new b.Table(\"alternateSetTable\", b.ushortList(\"alternate\", t));\n    })));\n};\nUe[4] = function(r) {\n    return U.assert(r.substFormat === 1, \"Lookup type 4 substFormat must be 1.\"), new b.Table(\"substitutionTable\", [\n        {\n            name: \"substFormat\",\n            type: \"USHORT\",\n            value: 1\n        },\n        {\n            name: \"coverage\",\n            type: \"TABLE\",\n            value: new b.Coverage(r.coverage)\n        }\n    ].concat(b.tableList(\"ligSet\", r.ligatureSets, function(t) {\n        return new b.Table(\"ligatureSetTable\", b.tableList(\"ligature\", t, function(a) {\n            return new b.Table(\"ligatureTable\", [\n                {\n                    name: \"ligGlyph\",\n                    type: \"USHORT\",\n                    value: a.ligGlyph\n                }\n            ].concat(b.ushortList(\"component\", a.components, a.components.length + 1)));\n        }));\n    })));\n};\nUe[6] = function(r) {\n    if (r.substFormat === 1) {\n        var t = new b.Table(\"chainContextTable\", [\n            {\n                name: \"substFormat\",\n                type: \"USHORT\",\n                value: r.substFormat\n            },\n            {\n                name: \"coverage\",\n                type: \"TABLE\",\n                value: new b.Coverage(r.coverage)\n            }\n        ].concat(b.tableList(\"chainRuleSet\", r.chainRuleSets, function(s) {\n            return new b.Table(\"chainRuleSetTable\", b.tableList(\"chainRule\", s, function(i) {\n                var u = b.ushortList(\"backtrackGlyph\", i.backtrack, i.backtrack.length).concat(b.ushortList(\"inputGlyph\", i.input, i.input.length + 1)).concat(b.ushortList(\"lookaheadGlyph\", i.lookahead, i.lookahead.length)).concat(b.ushortList(\"substitution\", [], i.lookupRecords.length));\n                return i.lookupRecords.forEach(function(o, l) {\n                    u = u.concat({\n                        name: \"sequenceIndex\" + l,\n                        type: \"USHORT\",\n                        value: o.sequenceIndex\n                    }).concat({\n                        name: \"lookupListIndex\" + l,\n                        type: \"USHORT\",\n                        value: o.lookupListIndex\n                    });\n                }), new b.Table(\"chainRuleTable\", u);\n            }));\n        })));\n        return t;\n    } else if (r.substFormat === 2) U.assert(!1, \"lookup type 6 format 2 is not yet supported.\");\n    else if (r.substFormat === 3) {\n        var a = [\n            {\n                name: \"substFormat\",\n                type: \"USHORT\",\n                value: r.substFormat\n            }\n        ];\n        a.push({\n            name: \"backtrackGlyphCount\",\n            type: \"USHORT\",\n            value: r.backtrackCoverage.length\n        }), r.backtrackCoverage.forEach(function(s, i) {\n            a.push({\n                name: \"backtrackCoverage\" + i,\n                type: \"TABLE\",\n                value: new b.Coverage(s)\n            });\n        }), a.push({\n            name: \"inputGlyphCount\",\n            type: \"USHORT\",\n            value: r.inputCoverage.length\n        }), r.inputCoverage.forEach(function(s, i) {\n            a.push({\n                name: \"inputCoverage\" + i,\n                type: \"TABLE\",\n                value: new b.Coverage(s)\n            });\n        }), a.push({\n            name: \"lookaheadGlyphCount\",\n            type: \"USHORT\",\n            value: r.lookaheadCoverage.length\n        }), r.lookaheadCoverage.forEach(function(s, i) {\n            a.push({\n                name: \"lookaheadCoverage\" + i,\n                type: \"TABLE\",\n                value: new b.Coverage(s)\n            });\n        }), a.push({\n            name: \"substitutionCount\",\n            type: \"USHORT\",\n            value: r.lookupRecords.length\n        }), r.lookupRecords.forEach(function(s, i) {\n            a = a.concat({\n                name: \"sequenceIndex\" + i,\n                type: \"USHORT\",\n                value: s.sequenceIndex\n            }).concat({\n                name: \"lookupListIndex\" + i,\n                type: \"USHORT\",\n                value: s.lookupListIndex\n            });\n        });\n        var n = new b.Table(\"chainContextTable\", a);\n        return n;\n    }\n    U.assert(!1, \"lookup type 6 format must be 1, 2 or 3.\");\n};\nfunction zn(e) {\n    return new b.Table(\"GSUB\", [\n        {\n            name: \"version\",\n            type: \"ULONG\",\n            value: 65536\n        },\n        {\n            name: \"scripts\",\n            type: \"TABLE\",\n            value: new b.ScriptList(e.scripts)\n        },\n        {\n            name: \"features\",\n            type: \"TABLE\",\n            value: new b.FeatureList(e.features)\n        },\n        {\n            name: \"lookups\",\n            type: \"TABLE\",\n            value: new b.LookupList(e.lookups, Ue)\n        }\n    ]);\n}\nvar Kt = {\n    parse: Hn,\n    make: zn\n};\nfunction Wn(e, r) {\n    var t = new k.Parser(e, r), a = t.parseULong();\n    U.argument(a === 1, \"Unsupported META table version.\"), t.parseULong(), t.parseULong();\n    for(var n = t.parseULong(), s = {}, i = 0; i < n; i++){\n        var u = t.parseTag(), o = t.parseULong(), l = t.parseULong(), f = Fe.UTF8(e, r + o, l);\n        s[u] = f;\n    }\n    return s;\n}\n_c72 = Wn;\nfunction _n(e) {\n    var r = Object.keys(e).length, t = \"\", a = 16 + r * 12, n = new b.Table(\"meta\", [\n        {\n            name: \"version\",\n            type: \"ULONG\",\n            value: 1\n        },\n        {\n            name: \"flags\",\n            type: \"ULONG\",\n            value: 0\n        },\n        {\n            name: \"offset\",\n            type: \"ULONG\",\n            value: a\n        },\n        {\n            name: \"numTags\",\n            type: \"ULONG\",\n            value: r\n        }\n    ]);\n    for(var s in e){\n        var i = t.length;\n        t += e[s], n.fields.push({\n            name: \"tag \" + s,\n            type: \"TAG\",\n            value: s\n        }), n.fields.push({\n            name: \"offset \" + s,\n            type: \"ULONG\",\n            value: a + i\n        }), n.fields.push({\n            name: \"length \" + s,\n            type: \"ULONG\",\n            value: e[s].length\n        });\n    }\n    return n.fields.push({\n        name: \"stringPool\",\n        type: \"CHARARRAY\",\n        value: t\n    }), n;\n}\nvar Jt = {\n    parse: Wn,\n    make: _n\n};\nfunction Zr(e) {\n    return Math.log(e) / Math.log(2) | 0;\n}\n_c73 = Zr;\nfunction Er(e) {\n    for(; e.length % 4 !== 0;)e.push(0);\n    for(var r = 0, t = 0; t < e.length; t += 4)r += (e[t] << 24) + (e[t + 1] << 16) + (e[t + 2] << 8) + e[t + 3];\n    return r %= Math.pow(2, 32), r;\n}\n_c74 = Er;\nfunction Qr(e, r, t, a) {\n    return new b.Record(\"Table Record\", [\n        {\n            name: \"tag\",\n            type: \"TAG\",\n            value: e !== void 0 ? e : \"\"\n        },\n        {\n            name: \"checkSum\",\n            type: \"ULONG\",\n            value: r !== void 0 ? r : 0\n        },\n        {\n            name: \"offset\",\n            type: \"ULONG\",\n            value: t !== void 0 ? t : 0\n        },\n        {\n            name: \"length\",\n            type: \"ULONG\",\n            value: a !== void 0 ? a : 0\n        }\n    ]);\n}\n_c75 = Qr;\nfunction jt(e) {\n    var r = new b.Table(\"sfnt\", [\n        {\n            name: \"version\",\n            type: \"TAG\",\n            value: \"OTTO\"\n        },\n        {\n            name: \"numTables\",\n            type: \"USHORT\",\n            value: 0\n        },\n        {\n            name: \"searchRange\",\n            type: \"USHORT\",\n            value: 0\n        },\n        {\n            name: \"entrySelector\",\n            type: \"USHORT\",\n            value: 0\n        },\n        {\n            name: \"rangeShift\",\n            type: \"USHORT\",\n            value: 0\n        }\n    ]);\n    r.tables = e, r.numTables = e.length;\n    var t = Math.pow(2, Zr(r.numTables));\n    r.searchRange = 16 * t, r.entrySelector = Zr(t), r.rangeShift = r.numTables * 16 - r.searchRange;\n    for(var a = [], n = [], s = r.sizeOf() + Qr().sizeOf() * r.numTables; s % 4 !== 0;)s += 1, n.push({\n        name: \"padding\",\n        type: \"BYTE\",\n        value: 0\n    });\n    for(var i = 0; i < e.length; i += 1){\n        var u = e[i];\n        U.argument(u.tableName.length === 4, \"Table name\" + u.tableName + \" is invalid.\");\n        var o = u.sizeOf(), l = Qr(u.tableName, Er(u.encode()), s, o);\n        for(a.push({\n            name: l.tag + \" Table Record\",\n            type: \"RECORD\",\n            value: l\n        }), n.push({\n            name: u.tableName + \" table\",\n            type: \"RECORD\",\n            value: u\n        }), s += o, U.argument(!isNaN(s), \"Something went wrong calculating the offset.\"); s % 4 !== 0;)s += 1, n.push({\n            name: \"padding\",\n            type: \"BYTE\",\n            value: 0\n        });\n    }\n    return a.sort(function(f, h) {\n        return f.value.tag > h.value.tag ? 1 : -1;\n    }), r.fields = r.fields.concat(a), r.fields = r.fields.concat(n), r;\n}\nfunction Kr(e, r, t) {\n    for(var a = 0; a < r.length; a += 1){\n        var n = e.charToGlyphIndex(r[a]);\n        if (n > 0) {\n            var s = e.glyphs.get(n);\n            return s.getMetrics();\n        }\n    }\n    return t;\n}\n_c76 = Kr;\nfunction Vn(e) {\n    for(var r = 0, t = 0; t < e.length; t += 1)r += e[t];\n    return r / e.length;\n}\n_c77 = Vn;\nfunction qn(e) {\n    for(var r = [], t = [], a = [], n = [], s = [], i = [], u = [], o, l = 0, f = 0, h = 0, p = 0, c = 0, d = 0; d < e.glyphs.length; d += 1){\n        var x = e.glyphs.get(d), m = x.unicode | 0;\n        if (isNaN(x.advanceWidth)) throw new Error(\"Glyph \" + x.name + \" (\" + d + \"): advanceWidth is not a number.\");\n        (o > m || o === void 0) && m > 0 && (o = m), l < m && (l = m);\n        var y = xr.getUnicodeRange(m);\n        if (y < 32) f |= 1 << y;\n        else if (y < 64) h |= 1 << y - 32;\n        else if (y < 96) p |= 1 << y - 64;\n        else if (y < 123) c |= 1 << y - 96;\n        else throw new Error(\"Unicode ranges bits > 123 are reserved for internal usage\");\n        if (x.name !== \".notdef\") {\n            var C = x.getMetrics();\n            r.push(C.xMin), t.push(C.yMin), a.push(C.xMax), n.push(C.yMax), i.push(C.leftSideBearing), u.push(C.rightSideBearing), s.push(x.advanceWidth);\n        }\n    }\n    var S = {\n        xMin: Math.min.apply(null, r),\n        yMin: Math.min.apply(null, t),\n        xMax: Math.max.apply(null, a),\n        yMax: Math.max.apply(null, n),\n        advanceWidthMax: Math.max.apply(null, s),\n        advanceWidthAvg: Vn(s),\n        minLeftSideBearing: Math.min.apply(null, i),\n        maxLeftSideBearing: Math.max.apply(null, i),\n        minRightSideBearing: Math.min.apply(null, u)\n    };\n    S.ascender = e.ascender, S.descender = e.descender;\n    var R = Nt.make({\n        flags: 3,\n        unitsPerEm: e.unitsPerEm,\n        xMin: S.xMin,\n        yMin: S.yMin,\n        xMax: S.xMax,\n        yMax: S.yMax,\n        lowestRecPPEM: 3,\n        createdTimestamp: e.createdTimestamp\n    }), O = Ht.make({\n        ascender: S.ascender,\n        descender: S.descender,\n        advanceWidthMax: S.advanceWidthMax,\n        minLeftSideBearing: S.minLeftSideBearing,\n        minRightSideBearing: S.minRightSideBearing,\n        xMaxExtent: S.maxLeftSideBearing + (S.xMax - S.xMin),\n        numberOfHMetrics: e.glyphs.length\n    }), D = _t.make(e.glyphs.length), L = xr.make(Object.assign({\n        xAvgCharWidth: Math.round(S.advanceWidthAvg),\n        usFirstCharIndex: o,\n        usLastCharIndex: l,\n        ulUnicodeRange1: f,\n        ulUnicodeRange2: h,\n        ulUnicodeRange3: p,\n        ulUnicodeRange4: c,\n        sTypoAscender: S.ascender,\n        sTypoDescender: S.descender,\n        sTypoLineGap: 0,\n        usWinAscent: S.yMax,\n        usWinDescent: Math.abs(S.yMin),\n        ulCodePageRange1: 1,\n        sxHeight: Kr(e, \"xyvw\", {\n            yMax: Math.round(S.ascender / 2)\n        }).yMax,\n        sCapHeight: Kr(e, \"HIKLEFJMNTZBDPRAGOQSUVWXY\", S).yMax,\n        usDefaultChar: e.hasChar(\" \") ? 32 : 0,\n        usBreakChar: e.hasChar(\" \") ? 32 : 0\n    }, e.tables.os2)), F = zt.make(e.glyphs), G = Et.make(e.glyphs), Y = e.getEnglishName(\"fontFamily\"), Z = e.getEnglishName(\"fontSubfamily\"), j = Y + \" \" + Z, $ = e.getEnglishName(\"postScriptName\");\n    $ || ($ = Y.replace(/\\s/g, \"\") + \"-\" + Z);\n    var M = {};\n    for(var N in e.names)M[N] = e.names[N];\n    M.uniqueID || (M.uniqueID = {\n        en: e.getEnglishName(\"manufacturer\") + \":\" + j\n    }), M.postScriptName || (M.postScriptName = {\n        en: $\n    }), M.preferredFamily || (M.preferredFamily = e.names.fontFamily), M.preferredSubfamily || (M.preferredSubfamily = e.names.fontSubfamily);\n    var W = [], _ = Zt.make(M, W), V = W.length > 0 ? Wt.make(W) : void 0, H = Qt.make(), X = Gt.make(e.glyphs, {\n        version: e.getEnglishName(\"version\"),\n        fullName: j,\n        familyName: Y,\n        weightName: Z,\n        postScriptName: $,\n        unitsPerEm: e.unitsPerEm,\n        fontBBox: [\n            0,\n            S.yMin,\n            S.ascender,\n            S.advanceWidthMax\n        ]\n    }), A = e.metas && Object.keys(e.metas).length > 0 ? Jt.make(e.metas) : void 0, q = [\n        R,\n        O,\n        D,\n        L,\n        _,\n        G,\n        H,\n        X,\n        F\n    ];\n    V && q.push(V), e.tables.gsub && q.push(Kt.make(e.tables.gsub)), A && q.push(A);\n    for(var rr = jt(q), ha = rr.encode(), ca = Er(ha), tr = rr.fields, Ar = !1, Ge = 0; Ge < tr.length; Ge += 1)if (tr[Ge].name === \"head table\") {\n        tr[Ge].value.checkSumAdjustment = 2981146554 - ca, Ar = !0;\n        break;\n    }\n    if (!Ar) throw new Error(\"Could not find head table with checkSum to adjust.\");\n    return rr;\n}\nvar Xn = {\n    make: jt,\n    fontToTable: qn,\n    computeCheckSum: Er\n};\nfunction sr(e, r) {\n    for(var t = 0, a = e.length - 1; t <= a;){\n        var n = t + a >>> 1, s = e[n].tag;\n        if (s === r) return n;\n        s < r ? t = n + 1 : a = n - 1;\n    }\n    return -t - 1;\n}\nfunction Jr(e, r) {\n    for(var t = 0, a = e.length - 1; t <= a;){\n        var n = t + a >>> 1, s = e[n];\n        if (s === r) return n;\n        s < r ? t = n + 1 : a = n - 1;\n    }\n    return -t - 1;\n}\n_c78 = Jr;\nfunction jr(e, r) {\n    for(var t, a = 0, n = e.length - 1; a <= n;){\n        var s = a + n >>> 1;\n        t = e[s];\n        var i = t.start;\n        if (i === r) return t;\n        i < r ? a = s + 1 : n = s - 1;\n    }\n    if (a > 0) return t = e[a - 1], r > t.end ? 0 : t;\n}\nfunction Ae(e, r) {\n    this.font = e, this.tableName = r;\n}\n_c79 = Ae;\nAe.prototype = {\n    searchTag: sr,\n    binSearch: Jr,\n    getTable: function(e) {\n        var r = this.font.tables[this.tableName];\n        return !r && e && (r = this.font.tables[this.tableName] = this.createDefaultTable()), r;\n    },\n    getScriptNames: function() {\n        var e = this.getTable();\n        return e ? e.scripts.map(function(r) {\n            return r.tag;\n        }) : [];\n    },\n    getDefaultScriptName: function() {\n        var e = this.getTable();\n        if (!!e) {\n            for(var r = !1, t = 0; t < e.scripts.length; t++){\n                var a = e.scripts[t].tag;\n                if (a === \"DFLT\") return a;\n                a === \"latn\" && (r = !0);\n            }\n            if (r) return \"latn\";\n        }\n    },\n    getScriptTable: function(e, r) {\n        var t = this.getTable(r);\n        if (t) {\n            e = e || \"DFLT\";\n            var a = t.scripts, n = sr(t.scripts, e);\n            if (n >= 0) return a[n].script;\n            if (r) {\n                var s = {\n                    tag: e,\n                    script: {\n                        defaultLangSys: {\n                            reserved: 0,\n                            reqFeatureIndex: 65535,\n                            featureIndexes: []\n                        },\n                        langSysRecords: []\n                    }\n                };\n                return a.splice(-1 - n, 0, s), s.script;\n            }\n        }\n    },\n    getLangSysTable: function(e, r, t) {\n        var a = this.getScriptTable(e, t);\n        if (a) {\n            if (!r || r === \"dflt\" || r === \"DFLT\") return a.defaultLangSys;\n            var n = sr(a.langSysRecords, r);\n            if (n >= 0) return a.langSysRecords[n].langSys;\n            if (t) {\n                var s = {\n                    tag: r,\n                    langSys: {\n                        reserved: 0,\n                        reqFeatureIndex: 65535,\n                        featureIndexes: []\n                    }\n                };\n                return a.langSysRecords.splice(-1 - n, 0, s), s.langSys;\n            }\n        }\n    },\n    getFeatureTable: function(e, r, t, a) {\n        var n = this.getLangSysTable(e, r, a);\n        if (n) {\n            for(var s, i = n.featureIndexes, u = this.font.tables[this.tableName].features, o = 0; o < i.length; o++)if (s = u[i[o]], s.tag === t) return s.feature;\n            if (a) {\n                var l = u.length;\n                return U.assert(l === 0 || t >= u[l - 1].tag, \"Features must be added in alphabetical order.\"), s = {\n                    tag: t,\n                    feature: {\n                        params: 0,\n                        lookupListIndexes: []\n                    }\n                }, u.push(s), i.push(l), s.feature;\n            }\n        }\n    },\n    getLookupTables: function(e, r, t, a, n) {\n        var s = this.getFeatureTable(e, r, t, n), i = [];\n        if (s) {\n            for(var u, o = s.lookupListIndexes, l = this.font.tables[this.tableName].lookups, f = 0; f < o.length; f++)u = l[o[f]], u.lookupType === a && i.push(u);\n            if (i.length === 0 && n) {\n                u = {\n                    lookupType: a,\n                    lookupFlag: 0,\n                    subtables: [],\n                    markFilteringSet: void 0\n                };\n                var h = l.length;\n                return l.push(u), o.push(h), [\n                    u\n                ];\n            }\n        }\n        return i;\n    },\n    getGlyphClass: function(e, r) {\n        switch(e.format){\n            case 1:\n                return e.startGlyph <= r && r < e.startGlyph + e.classes.length ? e.classes[r - e.startGlyph] : 0;\n            case 2:\n                var t = jr(e.ranges, r);\n                return t ? t.classId : 0;\n        }\n    },\n    getCoverageIndex: function(e, r) {\n        switch(e.format){\n            case 1:\n                var t = Jr(e.glyphs, r);\n                return t >= 0 ? t : -1;\n            case 2:\n                var a = jr(e.ranges, r);\n                return a ? a.index + r - a.start : -1;\n        }\n    },\n    expandCoverage: function(e) {\n        if (e.format === 1) return e.glyphs;\n        for(var r = [], t = e.ranges, a = 0; a < t.length; a++)for(var n = t[a], s = n.start, i = n.end, u = s; u <= i; u++)r.push(u);\n        return r;\n    }\n};\nfunction Be(e) {\n    Ae.call(this, e, \"gpos\");\n}\n_c80 = Be;\nBe.prototype = Ae.prototype;\nBe.prototype.init = function() {\n    var e = this.getDefaultScriptName();\n    this.defaultKerningTables = this.getKerningTables(e);\n};\nBe.prototype.getKerningValue = function(e, r, t) {\n    for(var a = 0; a < e.length; a++)for(var n = e[a].subtables, s = 0; s < n.length; s++){\n        var i = n[s], u = this.getCoverageIndex(i.coverage, r);\n        if (!(u < 0)) switch(i.posFormat){\n            case 1:\n                for(var o = i.pairSets[u], l = 0; l < o.length; l++){\n                    var f = o[l];\n                    if (f.secondGlyph === t) return f.value1 && f.value1.xAdvance || 0;\n                }\n                break;\n            case 2:\n                var h = this.getGlyphClass(i.classDef1, r), p = this.getGlyphClass(i.classDef2, t), c = i.classRecords[h][p];\n                return c.value1 && c.value1.xAdvance || 0;\n        }\n    }\n    return 0;\n};\nBe.prototype.getKerningTables = function(e, r) {\n    if (this.font.tables.gpos) return this.getLookupTables(e, r, \"kern\", 2);\n};\nfunction K(e) {\n    Ae.call(this, e, \"gsub\");\n}\n_c81 = K;\nfunction Yn(e, r) {\n    var t = e.length;\n    if (t !== r.length) return !1;\n    for(var a = 0; a < t; a++)if (e[a] !== r[a]) return !1;\n    return !0;\n}\n_c82 = Yn;\nfunction Or(e, r, t) {\n    for(var a = e.subtables, n = 0; n < a.length; n++){\n        var s = a[n];\n        if (s.substFormat === r) return s;\n    }\n    if (t) return a.push(t), t;\n}\n_c83 = Or;\nK.prototype = Ae.prototype;\nK.prototype.createDefaultTable = function() {\n    return {\n        version: 1,\n        scripts: [\n            {\n                tag: \"DFLT\",\n                script: {\n                    defaultLangSys: {\n                        reserved: 0,\n                        reqFeatureIndex: 65535,\n                        featureIndexes: []\n                    },\n                    langSysRecords: []\n                }\n            }\n        ],\n        features: [],\n        lookups: []\n    };\n};\nK.prototype.getSingle = function(e, r, t) {\n    for(var a = [], n = this.getLookupTables(r, t, e, 1), s = 0; s < n.length; s++)for(var i = n[s].subtables, u = 0; u < i.length; u++){\n        var o = i[u], l = this.expandCoverage(o.coverage), f = void 0;\n        if (o.substFormat === 1) {\n            var h = o.deltaGlyphId;\n            for(f = 0; f < l.length; f++){\n                var p = l[f];\n                a.push({\n                    sub: p,\n                    by: p + h\n                });\n            }\n        } else {\n            var c = o.substitute;\n            for(f = 0; f < l.length; f++)a.push({\n                sub: l[f],\n                by: c[f]\n            });\n        }\n    }\n    return a;\n};\nK.prototype.getMultiple = function(e, r, t) {\n    for(var a = [], n = this.getLookupTables(r, t, e, 2), s = 0; s < n.length; s++)for(var i = n[s].subtables, u = 0; u < i.length; u++){\n        var o = i[u], l = this.expandCoverage(o.coverage), f = void 0;\n        for(f = 0; f < l.length; f++){\n            var h = l[f], p = o.sequences[f];\n            a.push({\n                sub: h,\n                by: p\n            });\n        }\n    }\n    return a;\n};\nK.prototype.getAlternates = function(e, r, t) {\n    for(var a = [], n = this.getLookupTables(r, t, e, 3), s = 0; s < n.length; s++)for(var i = n[s].subtables, u = 0; u < i.length; u++)for(var o = i[u], l = this.expandCoverage(o.coverage), f = o.alternateSets, h = 0; h < l.length; h++)a.push({\n        sub: l[h],\n        by: f[h]\n    });\n    return a;\n};\nK.prototype.getLigatures = function(e, r, t) {\n    for(var a = [], n = this.getLookupTables(r, t, e, 4), s = 0; s < n.length; s++)for(var i = n[s].subtables, u = 0; u < i.length; u++)for(var o = i[u], l = this.expandCoverage(o.coverage), f = o.ligatureSets, h = 0; h < l.length; h++)for(var p = l[h], c = f[h], d = 0; d < c.length; d++){\n        var x = c[d];\n        a.push({\n            sub: [\n                p\n            ].concat(x.components),\n            by: x.ligGlyph\n        });\n    }\n    return a;\n};\nK.prototype.addSingle = function(e, r, t, a) {\n    var n = this.getLookupTables(t, a, e, 1, !0)[0], s = Or(n, 2, {\n        substFormat: 2,\n        coverage: {\n            format: 1,\n            glyphs: []\n        },\n        substitute: []\n    });\n    U.assert(s.coverage.format === 1, \"Single: unable to modify coverage table format \" + s.coverage.format);\n    var i = r.sub, u = this.binSearch(s.coverage.glyphs, i);\n    u < 0 && (u = -1 - u, s.coverage.glyphs.splice(u, 0, i), s.substitute.splice(u, 0, 0)), s.substitute[u] = r.by;\n};\nK.prototype.addMultiple = function(e, r, t, a) {\n    U.assert(r.by instanceof Array && r.by.length > 1, 'Multiple: \"by\" must be an array of two or more ids');\n    var n = this.getLookupTables(t, a, e, 2, !0)[0], s = Or(n, 1, {\n        substFormat: 1,\n        coverage: {\n            format: 1,\n            glyphs: []\n        },\n        sequences: []\n    });\n    U.assert(s.coverage.format === 1, \"Multiple: unable to modify coverage table format \" + s.coverage.format);\n    var i = r.sub, u = this.binSearch(s.coverage.glyphs, i);\n    u < 0 && (u = -1 - u, s.coverage.glyphs.splice(u, 0, i), s.sequences.splice(u, 0, 0)), s.sequences[u] = r.by;\n};\nK.prototype.addAlternate = function(e, r, t, a) {\n    var n = this.getLookupTables(t, a, e, 3, !0)[0], s = Or(n, 1, {\n        substFormat: 1,\n        coverage: {\n            format: 1,\n            glyphs: []\n        },\n        alternateSets: []\n    });\n    U.assert(s.coverage.format === 1, \"Alternate: unable to modify coverage table format \" + s.coverage.format);\n    var i = r.sub, u = this.binSearch(s.coverage.glyphs, i);\n    u < 0 && (u = -1 - u, s.coverage.glyphs.splice(u, 0, i), s.alternateSets.splice(u, 0, 0)), s.alternateSets[u] = r.by;\n};\nK.prototype.addLigature = function(e, r, t, a) {\n    var n = this.getLookupTables(t, a, e, 4, !0)[0], s = n.subtables[0];\n    s || (s = {\n        substFormat: 1,\n        coverage: {\n            format: 1,\n            glyphs: []\n        },\n        ligatureSets: []\n    }, n.subtables[0] = s), U.assert(s.coverage.format === 1, \"Ligature: unable to modify coverage table format \" + s.coverage.format);\n    var i = r.sub[0], u = r.sub.slice(1), o = {\n        ligGlyph: r.by,\n        components: u\n    }, l = this.binSearch(s.coverage.glyphs, i);\n    if (l >= 0) {\n        for(var f = s.ligatureSets[l], h = 0; h < f.length; h++)if (Yn(f[h].components, u)) return;\n        f.push(o);\n    } else l = -1 - l, s.coverage.glyphs.splice(l, 0, i), s.ligatureSets.splice(l, 0, [\n        o\n    ]);\n};\nK.prototype.getFeature = function(e, r, t) {\n    if (/ss\\d\\d/.test(e)) return this.getSingle(e, r, t);\n    switch(e){\n        case \"aalt\":\n        case \"salt\":\n            return this.getSingle(e, r, t).concat(this.getAlternates(e, r, t));\n        case \"dlig\":\n        case \"liga\":\n        case \"rlig\":\n            return this.getLigatures(e, r, t);\n        case \"ccmp\":\n            return this.getMultiple(e, r, t).concat(this.getLigatures(e, r, t));\n        case \"stch\":\n            return this.getMultiple(e, r, t);\n    }\n};\nK.prototype.add = function(e, r, t, a) {\n    if (/ss\\d\\d/.test(e)) return this.addSingle(e, r, t, a);\n    switch(e){\n        case \"aalt\":\n        case \"salt\":\n            return typeof r.by == \"number\" ? this.addSingle(e, r, t, a) : this.addAlternate(e, r, t, a);\n        case \"dlig\":\n        case \"liga\":\n        case \"rlig\":\n            return this.addLigature(e, r, t, a);\n        case \"ccmp\":\n            return r.by instanceof Array ? this.addMultiple(e, r, t, a) : this.addLigature(e, r, t, a);\n    }\n};\nfunction Zn() {\n    return \"object\" < \"u\";\n}\n_c84 = Zn;\nfunction $t(e) {\n    for(var r = new ArrayBuffer(e.length), t = new Uint8Array(r), a = 0; a < e.length; ++a)t[a] = e[a];\n    return r;\n}\nfunction Qn(e) {\n    for(var r = new Buffer(e.byteLength), t = new Uint8Array(e), a = 0; a < r.length; ++a)r[a] = t[a];\n    return r;\n}\n_c85 = Qn;\nfunction Ee(e, r) {\n    if (!e) throw r;\n}\n_c86 = Ee;\nfunction $r(e, r, t, a, n) {\n    var s;\n    return (r & a) > 0 ? (s = e.parseByte(), (r & n) === 0 && (s = -s), s = t + s) : (r & n) > 0 ? s = t : s = t + e.parseShort(), s;\n}\nfunction ea(e, r, t) {\n    var a = new k.Parser(r, t);\n    e.numberOfContours = a.parseShort(), e._xMin = a.parseShort(), e._yMin = a.parseShort(), e._xMax = a.parseShort(), e._yMax = a.parseShort();\n    var n, s;\n    if (e.numberOfContours > 0) {\n        for(var i = e.endPointIndices = [], u = 0; u < e.numberOfContours; u += 1)i.push(a.parseUShort());\n        e.instructionLength = a.parseUShort(), e.instructions = [];\n        for(var o = 0; o < e.instructionLength; o += 1)e.instructions.push(a.parseByte());\n        var l = i[i.length - 1] + 1;\n        n = [];\n        for(var f = 0; f < l; f += 1)if (s = a.parseByte(), n.push(s), (s & 8) > 0) for(var h = a.parseByte(), p = 0; p < h; p += 1)n.push(s), f += 1;\n        if (U.argument(n.length === l, \"Bad flags.\"), i.length > 0) {\n            var c = [], d;\n            if (l > 0) {\n                for(var x = 0; x < l; x += 1)s = n[x], d = {}, d.onCurve = !!(s & 1), d.lastPointOfContour = i.indexOf(x) >= 0, c.push(d);\n                for(var m = 0, y = 0; y < l; y += 1)s = n[y], d = c[y], d.x = $r(a, s, m, 2, 16), m = d.x;\n                for(var C = 0, S = 0; S < l; S += 1)s = n[S], d = c[S], d.y = $r(a, s, C, 4, 32), C = d.y;\n            }\n            e.points = c;\n        } else e.points = [];\n    } else if (e.numberOfContours === 0) e.points = [];\n    else {\n        e.isComposite = !0, e.points = [], e.components = [];\n        for(var R = !0; R;){\n            n = a.parseUShort();\n            var O = {\n                glyphIndex: a.parseUShort(),\n                xScale: 1,\n                scale01: 0,\n                scale10: 0,\n                yScale: 1,\n                dx: 0,\n                dy: 0\n            };\n            (n & 1) > 0 ? (n & 2) > 0 ? (O.dx = a.parseShort(), O.dy = a.parseShort()) : O.matchedPoints = [\n                a.parseUShort(),\n                a.parseUShort()\n            ] : (n & 2) > 0 ? (O.dx = a.parseChar(), O.dy = a.parseChar()) : O.matchedPoints = [\n                a.parseByte(),\n                a.parseByte()\n            ], (n & 8) > 0 ? O.xScale = O.yScale = a.parseF2Dot14() : (n & 64) > 0 ? (O.xScale = a.parseF2Dot14(), O.yScale = a.parseF2Dot14()) : (n & 128) > 0 && (O.xScale = a.parseF2Dot14(), O.scale01 = a.parseF2Dot14(), O.scale10 = a.parseF2Dot14(), O.yScale = a.parseF2Dot14()), e.components.push(O), R = !!(n & 32);\n        }\n        if (n & 256) {\n            e.instructionLength = a.parseUShort(), e.instructions = [];\n            for(var D = 0; D < e.instructionLength; D += 1)e.instructions.push(a.parseByte());\n        }\n    }\n}\nfunction ir(e, r) {\n    for(var t = [], a = 0; a < e.length; a += 1){\n        var n = e[a], s = {\n            x: r.xScale * n.x + r.scale01 * n.y + r.dx,\n            y: r.scale10 * n.x + r.yScale * n.y + r.dy,\n            onCurve: n.onCurve,\n            lastPointOfContour: n.lastPointOfContour\n        };\n        t.push(s);\n    }\n    return t;\n}\nfunction Kn(e) {\n    for(var r = [], t = [], a = 0; a < e.length; a += 1){\n        var n = e[a];\n        t.push(n), n.lastPointOfContour && (r.push(t), t = []);\n    }\n    return U.argument(t.length === 0, \"There are still points left in the current contour.\"), r;\n}\n_c87 = Kn;\nfunction ra(e) {\n    var r = new P;\n    if (!e) return r;\n    for(var t = Kn(e), a = 0; a < t.length; ++a){\n        var n = t[a], s = null, i = n[n.length - 1], u = n[0];\n        if (i.onCurve) r.moveTo(i.x, i.y);\n        else if (u.onCurve) r.moveTo(u.x, u.y);\n        else {\n            var o = {\n                x: (i.x + u.x) * .5,\n                y: (i.y + u.y) * .5\n            };\n            r.moveTo(o.x, o.y);\n        }\n        for(var l = 0; l < n.length; ++l)if (s = i, i = u, u = n[(l + 1) % n.length], i.onCurve) r.lineTo(i.x, i.y);\n        else {\n            var f = s, h = u;\n            s.onCurve || (f = {\n                x: (i.x + s.x) * .5,\n                y: (i.y + s.y) * .5\n            }), u.onCurve || (h = {\n                x: (i.x + u.x) * .5,\n                y: (i.y + u.y) * .5\n            }), r.quadraticCurveTo(i.x, i.y, h.x, h.y);\n        }\n        r.closePath();\n    }\n    return r;\n}\nfunction ta(e, r) {\n    if (r.isComposite) for(var t = 0; t < r.components.length; t += 1){\n        var a = r.components[t], n = e.get(a.glyphIndex);\n        if (n.getPath(), n.points) {\n            var s = void 0;\n            if (a.matchedPoints === void 0) s = ir(n.points, a);\n            else {\n                if (a.matchedPoints[0] > r.points.length - 1 || a.matchedPoints[1] > n.points.length - 1) throw Error(\"Matched points out of range in \" + r.name);\n                var i = r.points[a.matchedPoints[0]], u = n.points[a.matchedPoints[1]], o = {\n                    xScale: a.xScale,\n                    scale01: a.scale01,\n                    scale10: a.scale10,\n                    yScale: a.yScale,\n                    dx: 0,\n                    dy: 0\n                };\n                u = ir([\n                    u\n                ], o)[0], o.dx = i.x - u.x, o.dy = i.y - u.y, s = ir(n.points, o);\n            }\n            r.points = r.points.concat(s);\n        }\n    }\n    return ra(r.points);\n}\nfunction Jn(e, r, t, a) {\n    for(var n = new ue.GlyphSet(a), s = 0; s < t.length - 1; s += 1){\n        var i = t[s], u = t[s + 1];\n        i !== u ? n.push(s, ue.ttfGlyphLoader(a, s, ea, e, r + i, ta)) : n.push(s, ue.glyphLoader(a, s));\n    }\n    return n;\n}\n_c88 = Jn;\nfunction jn(e, r, t, a) {\n    var n = new ue.GlyphSet(a);\n    return a._push = function(s) {\n        var i = t[s], u = t[s + 1];\n        i !== u ? n.push(s, ue.ttfGlyphLoader(a, s, ea, e, r + i, ta)) : n.push(s, ue.glyphLoader(a, s));\n    }, n;\n}\nfunction $n(e, r, t, a, n) {\n    return n.lowMemory ? jn(e, r, t, a) : Jn(e, r, t, a);\n}\nvar aa = {\n    getPath: ra,\n    parse: $n\n}, na, Se, sa, br;\nfunction ia(e) {\n    this.font = e, this.getCommands = function(r) {\n        return aa.getPath(r).commands;\n    }, this._fpgmState = this._prepState = void 0, this._errorState = 0;\n}\nfunction es(e) {\n    return e;\n}\nfunction oa(e) {\n    return Math.sign(e) * Math.round(Math.abs(e));\n}\nfunction rs(e) {\n    return Math.sign(e) * Math.round(Math.abs(e * 2)) / 2;\n}\nfunction ts(e) {\n    return Math.sign(e) * (Math.round(Math.abs(e) + .5) - .5);\n}\nfunction as(e) {\n    return Math.sign(e) * Math.ceil(Math.abs(e));\n}\nfunction ns(e) {\n    return Math.sign(e) * Math.floor(Math.abs(e));\n}\nvar ua = function(e) {\n    var r = this.srPeriod, t = this.srPhase, a = this.srThreshold, n = 1;\n    return e < 0 && (e = -e, n = -1), e += a - t, e = Math.trunc(e / r) * r, e += t, e < 0 ? t * n : e * n;\n}, oe = {\n    x: 1,\n    y: 0,\n    axis: \"x\",\n    distance: function(e, r, t, a) {\n        return (t ? e.xo : e.x) - (a ? r.xo : r.x);\n    },\n    interpolate: function(e, r, t, a) {\n        var n, s, i, u, o, l, f;\n        if (!a || a === this) {\n            if (n = e.xo - r.xo, s = e.xo - t.xo, o = r.x - r.xo, l = t.x - t.xo, i = Math.abs(n), u = Math.abs(s), f = i + u, f === 0) {\n                e.x = e.xo + (o + l) / 2;\n                return;\n            }\n            e.x = e.xo + (o * u + l * i) / f;\n            return;\n        }\n        if (n = a.distance(e, r, !0, !0), s = a.distance(e, t, !0, !0), o = a.distance(r, r, !1, !0), l = a.distance(t, t, !1, !0), i = Math.abs(n), u = Math.abs(s), f = i + u, f === 0) {\n            oe.setRelative(e, e, (o + l) / 2, a, !0);\n            return;\n        }\n        oe.setRelative(e, e, (o * u + l * i) / f, a, !0);\n    },\n    normalSlope: Number.NEGATIVE_INFINITY,\n    setRelative: function(e, r, t, a, n) {\n        if (!a || a === this) {\n            e.x = (n ? r.xo : r.x) + t;\n            return;\n        }\n        var s = n ? r.xo : r.x, i = n ? r.yo : r.y, u = s + t * a.x, o = i + t * a.y;\n        e.x = u + (e.y - o) / a.normalSlope;\n    },\n    slope: 0,\n    touch: function(e) {\n        e.xTouched = !0;\n    },\n    touched: function(e) {\n        return e.xTouched;\n    },\n    untouch: function(e) {\n        e.xTouched = !1;\n    }\n}, le = {\n    x: 0,\n    y: 1,\n    axis: \"y\",\n    distance: function(e, r, t, a) {\n        return (t ? e.yo : e.y) - (a ? r.yo : r.y);\n    },\n    interpolate: function(e, r, t, a) {\n        var n, s, i, u, o, l, f;\n        if (!a || a === this) {\n            if (n = e.yo - r.yo, s = e.yo - t.yo, o = r.y - r.yo, l = t.y - t.yo, i = Math.abs(n), u = Math.abs(s), f = i + u, f === 0) {\n                e.y = e.yo + (o + l) / 2;\n                return;\n            }\n            e.y = e.yo + (o * u + l * i) / f;\n            return;\n        }\n        if (n = a.distance(e, r, !0, !0), s = a.distance(e, t, !0, !0), o = a.distance(r, r, !1, !0), l = a.distance(t, t, !1, !0), i = Math.abs(n), u = Math.abs(s), f = i + u, f === 0) {\n            le.setRelative(e, e, (o + l) / 2, a, !0);\n            return;\n        }\n        le.setRelative(e, e, (o * u + l * i) / f, a, !0);\n    },\n    normalSlope: 0,\n    setRelative: function(e, r, t, a, n) {\n        if (!a || a === this) {\n            e.y = (n ? r.yo : r.y) + t;\n            return;\n        }\n        var s = n ? r.xo : r.x, i = n ? r.yo : r.y, u = s + t * a.x, o = i + t * a.y;\n        e.y = o + a.normalSlope * (e.x - u);\n    },\n    slope: Number.POSITIVE_INFINITY,\n    touch: function(e) {\n        e.yTouched = !0;\n    },\n    touched: function(e) {\n        return e.yTouched;\n    },\n    untouch: function(e) {\n        e.yTouched = !1;\n    }\n};\nObject.freeze(oe);\nObject.freeze(le);\nfunction Ie(e, r) {\n    this.x = e, this.y = r, this.axis = void 0, this.slope = r / e, this.normalSlope = -e / r, Object.freeze(this);\n}\n_c89 = Ie;\nIe.prototype.distance = function(e, r, t, a) {\n    return this.x * oe.distance(e, r, t, a) + this.y * le.distance(e, r, t, a);\n};\nIe.prototype.interpolate = function(e, r, t, a) {\n    var n, s, i, u, o, l, f;\n    if (i = a.distance(e, r, !0, !0), u = a.distance(e, t, !0, !0), n = a.distance(r, r, !1, !0), s = a.distance(t, t, !1, !0), o = Math.abs(i), l = Math.abs(u), f = o + l, f === 0) {\n        this.setRelative(e, e, (n + s) / 2, a, !0);\n        return;\n    }\n    this.setRelative(e, e, (n * l + s * o) / f, a, !0);\n};\nIe.prototype.setRelative = function(e, r, t, a, n) {\n    a = a || this;\n    var s = n ? r.xo : r.x, i = n ? r.yo : r.y, u = s + t * a.x, o = i + t * a.y, l = a.normalSlope, f = this.slope, h = e.x, p = e.y;\n    e.x = (f * h - l * u + o - p) / (f - l), e.y = f * (e.x - h) + p;\n};\nIe.prototype.touch = function(e) {\n    e.xTouched = !0, e.yTouched = !0;\n};\nfunction Me(e, r) {\n    var t = Math.sqrt(e * e + r * r);\n    return e /= t, r /= t, e === 1 && r === 0 ? oe : e === 0 && r === 1 ? le : new Ie(e, r);\n}\n_c90 = Me;\nfunction fe(e, r, t, a) {\n    this.x = this.xo = Math.round(e * 64) / 64, this.y = this.yo = Math.round(r * 64) / 64, this.lastPointOfContour = t, this.onCurve = a, this.prevPointOnContour = void 0, this.nextPointOnContour = void 0, this.xTouched = !1, this.yTouched = !1, Object.preventExtensions(this);\n}\nfe.prototype.nextTouched = function(e) {\n    for(var r = this.nextPointOnContour; !e.touched(r) && r !== this;)r = r.nextPointOnContour;\n    return r;\n};\nfe.prototype.prevTouched = function(e) {\n    for(var r = this.prevPointOnContour; !e.touched(r) && r !== this;)r = r.prevPointOnContour;\n    return r;\n};\nvar De = Object.freeze(new fe(0, 0)), ss = {\n    cvCutIn: 17 / 16,\n    deltaBase: 9,\n    deltaShift: .125,\n    loop: 1,\n    minDis: 1,\n    autoFlip: !0\n};\nfunction de(e, r) {\n    switch(this.env = e, this.stack = [], this.prog = r, e){\n        case \"glyf\":\n            this.zp0 = this.zp1 = this.zp2 = 1, this.rp0 = this.rp1 = this.rp2 = 0;\n        case \"prep\":\n            this.fv = this.pv = this.dpv = oe, this.round = oa;\n    }\n}\nia.prototype.exec = function(e, r) {\n    if (typeof r != \"number\") throw new Error(\"Point size is not a number!\");\n    if (!(this._errorState > 2)) {\n        var t = this.font, a = this._prepState;\n        if (!a || a.ppem !== r) {\n            var n = this._fpgmState;\n            if (!n) {\n                de.prototype = ss, n = this._fpgmState = new de(\"fpgm\", t.tables.fpgm), n.funcs = [], n.font = t, exports.DEBUG && (console.log(\"---EXEC FPGM---\"), n.step = -1);\n                try {\n                    Se(n);\n                } catch (l) {\n                    console.log(\"Hinting error in FPGM:\" + l), this._errorState = 3;\n                    return;\n                }\n            }\n            de.prototype = n, a = this._prepState = new de(\"prep\", t.tables.prep), a.ppem = r;\n            var s = t.tables.cvt;\n            if (s) for(var i = a.cvt = new Array(s.length), u = r / t.unitsPerEm, o = 0; o < s.length; o++)i[o] = s[o] * u;\n            else a.cvt = [];\n            exports.DEBUG && (console.log(\"---EXEC PREP---\"), a.step = -1);\n            try {\n                Se(a);\n            } catch (l) {\n                this._errorState < 2 && console.log(\"Hinting error in PREP:\" + l), this._errorState = 2;\n            }\n        }\n        if (!(this._errorState > 1)) try {\n            return sa(e, a);\n        } catch (l) {\n            this._errorState < 1 && (console.log(\"Hinting error:\" + l), console.log(\"Note: further hinting errors are silenced\")), this._errorState = 1;\n            return;\n        }\n    }\n};\nsa = function(e, r) {\n    var t = r.ppem / r.font.unitsPerEm, a = t, n = e.components, s, i, u;\n    if (de.prototype = r, !n) u = new de(\"glyf\", e.instructions), exports.DEBUG && (console.log(\"---EXEC GLYPH---\"), u.step = -1), br(e, u, t, a), i = u.gZone;\n    else {\n        var o = r.font;\n        i = [], s = [];\n        for(var l = 0; l < n.length; l++){\n            var f = n[l], h = o.glyphs.get(f.glyphIndex);\n            u = new de(\"glyf\", h.instructions), exports.DEBUG && (console.log(\"---EXEC COMP \" + l + \"---\"), u.step = -1), br(h, u, t, a);\n            for(var p = Math.round(f.dx * t), c = Math.round(f.dy * a), d = u.gZone, x = u.contours, m = 0; m < d.length; m++){\n                var y = d[m];\n                y.xTouched = y.yTouched = !1, y.xo = y.x = y.x + p, y.yo = y.y = y.y + c;\n            }\n            var C = i.length;\n            i.push.apply(i, d);\n            for(var S = 0; S < x.length; S++)s.push(x[S] + C);\n        }\n        e.instructions && !u.inhibitGridFit && (u = new de(\"glyf\", e.instructions), u.gZone = u.z0 = u.z1 = u.z2 = i, u.contours = s, i.push(new fe(0, 0), new fe(Math.round(e.advanceWidth * t), 0)), exports.DEBUG && (console.log(\"---EXEC COMPOSITE---\"), u.step = -1), Se(u), i.length -= 2);\n    }\n    return i;\n};\nbr = function(e, r, t, a) {\n    for(var n = e.points || [], s = n.length, i = r.gZone = r.z0 = r.z1 = r.z2 = [], u = r.contours = [], o, l = 0; l < s; l++)o = n[l], i[l] = new fe(o.x * t, o.y * a, o.lastPointOfContour, o.onCurve);\n    for(var f, h, p = 0; p < s; p++)o = i[p], f || (f = o, u.push(p)), o.lastPointOfContour ? (o.nextPointOnContour = f, f.prevPointOnContour = o, f = void 0) : (h = i[p + 1], o.nextPointOnContour = h, h.prevPointOnContour = o);\n    if (!r.inhibitGridFit) {\n        if (exports.DEBUG) {\n            console.log(\"PROCESSING GLYPH\", r.stack);\n            for(var c = 0; c < s; c++)console.log(c, i[c].x, i[c].y);\n        }\n        if (i.push(new fe(0, 0), new fe(Math.round(e.advanceWidth * t), 0)), Se(r), i.length -= 2, exports.DEBUG) {\n            console.log(\"FINISHED GLYPH\", r.stack);\n            for(var d = 0; d < s; d++)console.log(d, i[d].x, i[d].y);\n        }\n    }\n};\nSe = function(e) {\n    var r = e.prog;\n    if (!!r) {\n        var t = r.length, a;\n        for(e.ip = 0; e.ip < t; e.ip++){\n            if (exports.DEBUG && e.step++, a = na[r[e.ip]], !a) throw new Error(\"unknown instruction: 0x\" + Number(r[e.ip]).toString(16));\n            a(e);\n        }\n    }\n};\nfunction $e(e) {\n    for(var r = e.tZone = new Array(e.gZone.length), t = 0; t < r.length; t++)r[t] = new fe(0, 0);\n}\nfunction la(e, r) {\n    var t = e.prog, a = e.ip, n = 1, s;\n    do if (s = t[++a], s === 88) n++;\n    else if (s === 89) n--;\n    else if (s === 64) a += t[a + 1] + 1;\n    else if (s === 65) a += 2 * t[a + 1] + 1;\n    else if (s >= 176 && s <= 183) a += s - 176 + 1;\n    else if (s >= 184 && s <= 191) a += (s - 184 + 1) * 2;\n    else if (r && n === 1 && s === 27) break;\n    while (n > 0);\n    e.ip = a;\n}\nfunction et(e, r) {\n    exports.DEBUG && console.log(r.step, \"SVTCA[\" + e.axis + \"]\"), r.fv = r.pv = r.dpv = e;\n}\nfunction rt(e, r) {\n    exports.DEBUG && console.log(r.step, \"SPVTCA[\" + e.axis + \"]\"), r.pv = r.dpv = e;\n}\nfunction tt(e, r) {\n    exports.DEBUG && console.log(r.step, \"SFVTCA[\" + e.axis + \"]\"), r.fv = e;\n}\nfunction at(e, r) {\n    var t = r.stack, a = t.pop(), n = t.pop(), s = r.z2[a], i = r.z1[n];\n    exports.DEBUG && console.log(\"SPVTL[\" + e + \"]\", a, n);\n    var u, o;\n    e ? (u = s.y - i.y, o = i.x - s.x) : (u = i.x - s.x, o = i.y - s.y), r.pv = r.dpv = Me(u, o);\n}\nfunction nt(e, r) {\n    var t = r.stack, a = t.pop(), n = t.pop(), s = r.z2[a], i = r.z1[n];\n    exports.DEBUG && console.log(\"SFVTL[\" + e + \"]\", a, n);\n    var u, o;\n    e ? (u = s.y - i.y, o = i.x - s.x) : (u = i.x - s.x, o = i.y - s.y), r.fv = Me(u, o);\n}\nfunction is(e) {\n    var r = e.stack, t = r.pop(), a = r.pop();\n    exports.DEBUG && console.log(e.step, \"SPVFS[]\", t, a), e.pv = e.dpv = Me(a, t);\n}\nfunction os(e) {\n    var r = e.stack, t = r.pop(), a = r.pop();\n    exports.DEBUG && console.log(e.step, \"SPVFS[]\", t, a), e.fv = Me(a, t);\n}\nfunction us(e) {\n    var r = e.stack, t = e.pv;\n    exports.DEBUG && console.log(e.step, \"GPV[]\"), r.push(t.x * 16384), r.push(t.y * 16384);\n}\nfunction ls(e) {\n    var r = e.stack, t = e.fv;\n    exports.DEBUG && console.log(e.step, \"GFV[]\"), r.push(t.x * 16384), r.push(t.y * 16384);\n}\nfunction fs(e) {\n    e.fv = e.pv, exports.DEBUG && console.log(e.step, \"SFVTPV[]\");\n}\nfunction ps(e) {\n    var r = e.stack, t = r.pop(), a = r.pop(), n = r.pop(), s = r.pop(), i = r.pop(), u = e.z0, o = e.z1, l = u[t], f = u[a], h = o[n], p = o[s], c = e.z2[i];\n    exports.DEBUG && console.log(\"ISECT[], \", t, a, n, s, i);\n    var d = l.x, x = l.y, m = f.x, y = f.y, C = h.x, S = h.y, R = p.x, O = p.y, D = (d - m) * (S - O) - (x - y) * (C - R), L = d * y - x * m, F = C * O - S * R;\n    c.x = (L * (C - R) - F * (d - m)) / D, c.y = (L * (S - O) - F * (x - y)) / D;\n}\nfunction hs(e) {\n    e.rp0 = e.stack.pop(), exports.DEBUG && console.log(e.step, \"SRP0[]\", e.rp0);\n}\nfunction cs(e) {\n    e.rp1 = e.stack.pop(), exports.DEBUG && console.log(e.step, \"SRP1[]\", e.rp1);\n}\nfunction vs(e) {\n    e.rp2 = e.stack.pop(), exports.DEBUG && console.log(e.step, \"SRP2[]\", e.rp2);\n}\nfunction ds(e) {\n    var r = e.stack.pop();\n    switch(exports.DEBUG && console.log(e.step, \"SZP0[]\", r), e.zp0 = r, r){\n        case 0:\n            e.tZone || $e(e), e.z0 = e.tZone;\n            break;\n        case 1:\n            e.z0 = e.gZone;\n            break;\n        default:\n            throw new Error(\"Invalid zone pointer\");\n    }\n}\nfunction gs(e) {\n    var r = e.stack.pop();\n    switch(exports.DEBUG && console.log(e.step, \"SZP1[]\", r), e.zp1 = r, r){\n        case 0:\n            e.tZone || $e(e), e.z1 = e.tZone;\n            break;\n        case 1:\n            e.z1 = e.gZone;\n            break;\n        default:\n            throw new Error(\"Invalid zone pointer\");\n    }\n}\nfunction ms(e) {\n    var r = e.stack.pop();\n    switch(exports.DEBUG && console.log(e.step, \"SZP2[]\", r), e.zp2 = r, r){\n        case 0:\n            e.tZone || $e(e), e.z2 = e.tZone;\n            break;\n        case 1:\n            e.z2 = e.gZone;\n            break;\n        default:\n            throw new Error(\"Invalid zone pointer\");\n    }\n}\nfunction ys(e) {\n    var r = e.stack.pop();\n    switch(exports.DEBUG && console.log(e.step, \"SZPS[]\", r), e.zp0 = e.zp1 = e.zp2 = r, r){\n        case 0:\n            e.tZone || $e(e), e.z0 = e.z1 = e.z2 = e.tZone;\n            break;\n        case 1:\n            e.z0 = e.z1 = e.z2 = e.gZone;\n            break;\n        default:\n            throw new Error(\"Invalid zone pointer\");\n    }\n}\nfunction xs(e) {\n    e.loop = e.stack.pop(), exports.DEBUG && console.log(e.step, \"SLOOP[]\", e.loop);\n}\nfunction bs(e) {\n    exports.DEBUG && console.log(e.step, \"RTG[]\"), e.round = oa;\n}\nfunction Ss(e) {\n    exports.DEBUG && console.log(e.step, \"RTHG[]\"), e.round = ts;\n}\n_c91 = Ss;\nfunction Ts(e) {\n    var r = e.stack.pop();\n    exports.DEBUG && console.log(e.step, \"SMD[]\", r), e.minDis = r / 64;\n}\n_c92 = Ts;\nfunction ks(e) {\n    exports.DEBUG && console.log(e.step, \"ELSE[]\"), la(e, !1);\n}\nfunction Fs(e) {\n    var r = e.stack.pop();\n    exports.DEBUG && console.log(e.step, \"JMPR[]\", r), e.ip += r - 1;\n}\n_c93 = Fs;\nfunction Us(e) {\n    var r = e.stack.pop();\n    exports.DEBUG && console.log(e.step, \"SCVTCI[]\", r), e.cvCutIn = r / 64;\n}\n_c94 = Us;\nfunction Cs(e) {\n    var r = e.stack;\n    exports.DEBUG && console.log(e.step, \"DUP[]\"), r.push(r[r.length - 1]);\n}\n_c95 = Cs;\nfunction or(e) {\n    exports.DEBUG && console.log(e.step, \"POP[]\"), e.stack.pop();\n}\nfunction Es(e) {\n    exports.DEBUG && console.log(e.step, \"CLEAR[]\"), e.stack.length = 0;\n}\n_c96 = Es;\nfunction Os(e) {\n    var r = e.stack, t = r.pop(), a = r.pop();\n    exports.DEBUG && console.log(e.step, \"SWAP[]\"), r.push(t), r.push(a);\n}\n_c97 = Os;\nfunction Ls(e) {\n    var r = e.stack;\n    exports.DEBUG && console.log(e.step, \"DEPTH[]\"), r.push(r.length);\n}\n_c98 = Ls;\nfunction Rs(e) {\n    var r = e.stack, t = r.pop(), a = r.pop();\n    exports.DEBUG && console.log(e.step, \"LOOPCALL[]\", t, a);\n    var n = e.ip, s = e.prog;\n    e.prog = e.funcs[t];\n    for(var i = 0; i < a; i++)Se(e), exports.DEBUG && console.log(++e.step, i + 1 < a ? \"next loopcall\" : \"done loopcall\", i);\n    e.ip = n, e.prog = s;\n}\n_c99 = Rs;\nfunction ws(e) {\n    var r = e.stack.pop();\n    exports.DEBUG && console.log(e.step, \"CALL[]\", r);\n    var t = e.ip, a = e.prog;\n    e.prog = e.funcs[r], Se(e), e.ip = t, e.prog = a, exports.DEBUG && console.log(++e.step, \"returning from\", r);\n}\nfunction Ds(e) {\n    var r = e.stack, t = r.pop();\n    exports.DEBUG && console.log(e.step, \"CINDEX[]\", t), r.push(r[r.length - t]);\n}\n_c100 = Ds;\nfunction As(e) {\n    var r = e.stack, t = r.pop();\n    exports.DEBUG && console.log(e.step, \"MINDEX[]\", t), r.push(r.splice(r.length - t, 1)[0]);\n}\n_c101 = As;\nfunction Bs(e) {\n    if (e.env !== \"fpgm\") throw new Error(\"FDEF not allowed here\");\n    var r = e.stack, t = e.prog, a = e.ip, n = r.pop(), s = a;\n    for(exports.DEBUG && console.log(e.step, \"FDEF[]\", n); t[++a] !== 45;);\n    e.ip = a, e.funcs[n] = t.slice(s + 1, a);\n}\n_c102 = Bs;\nfunction st(e, r) {\n    var t = r.stack.pop(), a = r.z0[t], n = r.fv, s = r.pv;\n    exports.DEBUG && console.log(r.step, \"MDAP[\" + e + \"]\", t);\n    var i = s.distance(a, De);\n    e && (i = r.round(i)), n.setRelative(a, De, i, s), n.touch(a), r.rp0 = r.rp1 = t;\n}\nfunction it(e, r) {\n    var t = r.z2, a = t.length - 2, n, s, i;\n    exports.DEBUG && console.log(r.step, \"IUP[\" + e.axis + \"]\");\n    for(var u = 0; u < a; u++)n = t[u], !e.touched(n) && (s = n.prevTouched(e), s !== n && (i = n.nextTouched(e), s === i && e.setRelative(n, n, e.distance(s, s, !1, !0), e, !0), e.interpolate(n, s, i, e)));\n}\nfunction ot(e, r) {\n    for(var t = r.stack, a = e ? r.rp1 : r.rp2, n = (e ? r.z0 : r.z1)[a], s = r.fv, i = r.pv, u = r.loop, o = r.z2; u--;){\n        var l = t.pop(), f = o[l], h = i.distance(n, n, !1, !0);\n        s.setRelative(f, f, h, i), s.touch(f), exports.DEBUG && console.log(r.step, (r.loop > 1 ? \"loop \" + (r.loop - u) + \": \" : \"\") + \"SHP[\" + (e ? \"rp1\" : \"rp2\") + \"]\", l);\n    }\n    r.loop = 1;\n}\nfunction ut(e, r) {\n    var t = r.stack, a = e ? r.rp1 : r.rp2, n = (e ? r.z0 : r.z1)[a], s = r.fv, i = r.pv, u = t.pop(), o = r.z2[r.contours[u]], l = o;\n    exports.DEBUG && console.log(r.step, \"SHC[\" + e + \"]\", u);\n    var f = i.distance(n, n, !1, !0);\n    do l !== n && s.setRelative(l, l, f, i), l = l.nextPointOnContour;\n    while (l !== o);\n}\nfunction lt(e, r) {\n    var t = r.stack, a = e ? r.rp1 : r.rp2, n = (e ? r.z0 : r.z1)[a], s = r.fv, i = r.pv, u = t.pop();\n    exports.DEBUG && console.log(r.step, \"SHZ[\" + e + \"]\", u);\n    var o;\n    switch(u){\n        case 0:\n            o = r.tZone;\n            break;\n        case 1:\n            o = r.gZone;\n            break;\n        default:\n            throw new Error(\"Invalid zone\");\n    }\n    for(var l, f = i.distance(n, n, !1, !0), h = o.length - 2, p = 0; p < h; p++)l = o[p], s.setRelative(l, l, f, i);\n}\nfunction Is(e) {\n    for(var r = e.stack, t = e.loop, a = e.fv, n = r.pop() / 64, s = e.z2; t--;){\n        var i = r.pop(), u = s[i];\n        exports.DEBUG && console.log(e.step, (e.loop > 1 ? \"loop \" + (e.loop - t) + \": \" : \"\") + \"SHPIX[]\", i, n), a.setRelative(u, u, n), a.touch(u);\n    }\n    e.loop = 1;\n}\n_c103 = Is;\nfunction Ms(e) {\n    for(var r = e.stack, t = e.rp1, a = e.rp2, n = e.loop, s = e.z0[t], i = e.z1[a], u = e.fv, o = e.dpv, l = e.z2; n--;){\n        var f = r.pop(), h = l[f];\n        exports.DEBUG && console.log(e.step, (e.loop > 1 ? \"loop \" + (e.loop - n) + \": \" : \"\") + \"IP[]\", f, t, \"<->\", a), u.interpolate(h, s, i, o), u.touch(h);\n    }\n    e.loop = 1;\n}\n_c104 = Ms;\nfunction ft(e, r) {\n    var t = r.stack, a = t.pop() / 64, n = t.pop(), s = r.z1[n], i = r.z0[r.rp0], u = r.fv, o = r.pv;\n    u.setRelative(s, i, a, o), u.touch(s), exports.DEBUG && console.log(r.step, \"MSIRP[\" + e + \"]\", a, n), r.rp1 = r.rp0, r.rp2 = n, e && (r.rp0 = n);\n}\nfunction Ps(e) {\n    for(var r = e.stack, t = e.rp0, a = e.z0[t], n = e.loop, s = e.fv, i = e.pv, u = e.z1; n--;){\n        var o = r.pop(), l = u[o];\n        exports.DEBUG && console.log(e.step, (e.loop > 1 ? \"loop \" + (e.loop - n) + \": \" : \"\") + \"ALIGNRP[]\", o), s.setRelative(l, a, 0, i), s.touch(l);\n    }\n    e.loop = 1;\n}\n_c105 = Ps;\nfunction Gs(e) {\n    exports.DEBUG && console.log(e.step, \"RTDG[]\"), e.round = rs;\n}\n_c106 = Gs;\nfunction pt(e, r) {\n    var t = r.stack, a = t.pop(), n = t.pop(), s = r.z0[n], i = r.fv, u = r.pv, o = r.cvt[a];\n    exports.DEBUG && console.log(r.step, \"MIAP[\" + e + \"]\", a, \"(\", o, \")\", n);\n    var l = u.distance(s, De);\n    e && (Math.abs(l - o) < r.cvCutIn && (l = o), l = r.round(l)), i.setRelative(s, De, l, u), r.zp0 === 0 && (s.xo = s.x, s.yo = s.y), i.touch(s), r.rp0 = r.rp1 = n;\n}\nfunction Ns(e) {\n    var r = e.prog, t = e.ip, a = e.stack, n = r[++t];\n    exports.DEBUG && console.log(e.step, \"NPUSHB[]\", n);\n    for(var s = 0; s < n; s++)a.push(r[++t]);\n    e.ip = t;\n}\n_c107 = Ns;\nfunction Hs(e) {\n    var r = e.ip, t = e.prog, a = e.stack, n = t[++r];\n    exports.DEBUG && console.log(e.step, \"NPUSHW[]\", n);\n    for(var s = 0; s < n; s++){\n        var i = t[++r] << 8 | t[++r];\n        i & 32768 && (i = -((i ^ 65535) + 1)), a.push(i);\n    }\n    e.ip = r;\n}\n_c108 = Hs;\nfunction zs(e) {\n    var r = e.stack, t = e.store;\n    t || (t = e.store = []);\n    var a = r.pop(), n = r.pop();\n    exports.DEBUG && console.log(e.step, \"WS\", a, n), t[n] = a;\n}\nfunction Ws(e) {\n    var r = e.stack, t = e.store, a = r.pop();\n    exports.DEBUG && console.log(e.step, \"RS\", a);\n    var n = t && t[a] || 0;\n    r.push(n);\n}\n_c109 = Ws;\nfunction _s(e) {\n    var r = e.stack, t = r.pop(), a = r.pop();\n    exports.DEBUG && console.log(e.step, \"WCVTP\", t, a), e.cvt[a] = t / 64;\n}\nfunction Vs(e) {\n    var r = e.stack, t = r.pop();\n    exports.DEBUG && console.log(e.step, \"RCVT\", t), r.push(e.cvt[t] * 64);\n}\n_c110 = Vs;\nfunction ht(e, r) {\n    var t = r.stack, a = t.pop(), n = r.z2[a];\n    exports.DEBUG && console.log(r.step, \"GC[\" + e + \"]\", a), t.push(r.dpv.distance(n, De, e, !1) * 64);\n}\nfunction ct(e, r) {\n    var t = r.stack, a = t.pop(), n = t.pop(), s = r.z1[a], i = r.z0[n], u = r.dpv.distance(i, s, e, e);\n    exports.DEBUG && console.log(r.step, \"MD[\" + e + \"]\", a, n, \"->\", u), r.stack.push(Math.round(u * 64));\n}\nfunction qs(e) {\n    exports.DEBUG && console.log(e.step, \"MPPEM[]\"), e.stack.push(e.ppem);\n}\nfunction Xs(e) {\n    exports.DEBUG && console.log(e.step, \"FLIPON[]\"), e.autoFlip = !0;\n}\n_c111 = Xs;\nfunction Ys(e) {\n    var r = e.stack, t = r.pop(), a = r.pop();\n    exports.DEBUG && console.log(e.step, \"LT[]\", t, a), r.push(a < t ? 1 : 0);\n}\n_c112 = Ys;\nfunction Zs(e) {\n    var r = e.stack, t = r.pop(), a = r.pop();\n    exports.DEBUG && console.log(e.step, \"LTEQ[]\", t, a), r.push(a <= t ? 1 : 0);\n}\n_c113 = Zs;\nfunction Qs(e) {\n    var r = e.stack, t = r.pop(), a = r.pop();\n    exports.DEBUG && console.log(e.step, \"GT[]\", t, a), r.push(a > t ? 1 : 0);\n}\n_c114 = Qs;\nfunction Ks(e) {\n    var r = e.stack, t = r.pop(), a = r.pop();\n    exports.DEBUG && console.log(e.step, \"GTEQ[]\", t, a), r.push(a >= t ? 1 : 0);\n}\n_c115 = Ks;\nfunction Js(e) {\n    var r = e.stack, t = r.pop(), a = r.pop();\n    exports.DEBUG && console.log(e.step, \"EQ[]\", t, a), r.push(t === a ? 1 : 0);\n}\n_c116 = Js;\nfunction js(e) {\n    var r = e.stack, t = r.pop(), a = r.pop();\n    exports.DEBUG && console.log(e.step, \"NEQ[]\", t, a), r.push(t !== a ? 1 : 0);\n}\nfunction $s(e) {\n    var r = e.stack, t = r.pop();\n    exports.DEBUG && console.log(e.step, \"ODD[]\", t), r.push(Math.trunc(t) % 2 ? 1 : 0);\n}\nfunction ei(e) {\n    var r = e.stack, t = r.pop();\n    exports.DEBUG && console.log(e.step, \"EVEN[]\", t), r.push(Math.trunc(t) % 2 ? 0 : 1);\n}\nfunction ri(e) {\n    var r = e.stack.pop();\n    exports.DEBUG && console.log(e.step, \"IF[]\", r), r || (la(e, !0), exports.DEBUG && console.log(e.step, \"EIF[]\"));\n}\nfunction ti(e) {\n    exports.DEBUG && console.log(e.step, \"EIF[]\");\n}\nfunction ai(e) {\n    var r = e.stack, t = r.pop(), a = r.pop();\n    exports.DEBUG && console.log(e.step, \"AND[]\", t, a), r.push(t && a ? 1 : 0);\n}\nfunction ni(e) {\n    var r = e.stack, t = r.pop(), a = r.pop();\n    exports.DEBUG && console.log(e.step, \"OR[]\", t, a), r.push(t || a ? 1 : 0);\n}\nfunction si(e) {\n    var r = e.stack, t = r.pop();\n    exports.DEBUG && console.log(e.step, \"NOT[]\", t), r.push(t ? 0 : 1);\n}\nfunction ur(e, r) {\n    var t = r.stack, a = t.pop(), n = r.fv, s = r.pv, i = r.ppem, u = r.deltaBase + (e - 1) * 16, o = r.deltaShift, l = r.z0;\n    exports.DEBUG && console.log(r.step, \"DELTAP[\" + e + \"]\", a, t);\n    for(var f = 0; f < a; f++){\n        var h = t.pop(), p = t.pop(), c = u + ((p & 240) >> 4);\n        if (c === i) {\n            var d = (p & 15) - 8;\n            d >= 0 && d++, exports.DEBUG && console.log(r.step, \"DELTAPFIX\", h, \"by\", d * o);\n            var x = l[h];\n            n.setRelative(x, x, d * o, s);\n        }\n    }\n}\nfunction ii(e) {\n    var r = e.stack, t = r.pop();\n    exports.DEBUG && console.log(e.step, \"SDB[]\", t), e.deltaBase = t;\n}\nfunction oi(e) {\n    var r = e.stack, t = r.pop();\n    exports.DEBUG && console.log(e.step, \"SDS[]\", t), e.deltaShift = Math.pow(.5, t);\n}\nfunction ui(e) {\n    var r = e.stack, t = r.pop(), a = r.pop();\n    exports.DEBUG && console.log(e.step, \"ADD[]\", t, a), r.push(a + t);\n}\nfunction li(e) {\n    var r = e.stack, t = r.pop(), a = r.pop();\n    exports.DEBUG && console.log(e.step, \"SUB[]\", t, a), r.push(a - t);\n}\nfunction fi(e) {\n    var r = e.stack, t = r.pop(), a = r.pop();\n    exports.DEBUG && console.log(e.step, \"DIV[]\", t, a), r.push(a * 64 / t);\n}\nfunction pi(e) {\n    var r = e.stack, t = r.pop(), a = r.pop();\n    exports.DEBUG && console.log(e.step, \"MUL[]\", t, a), r.push(a * t / 64);\n}\nfunction hi(e) {\n    var r = e.stack, t = r.pop();\n    exports.DEBUG && console.log(e.step, \"ABS[]\", t), r.push(Math.abs(t));\n}\nfunction ci(e) {\n    var r = e.stack, t = r.pop();\n    exports.DEBUG && console.log(e.step, \"NEG[]\", t), r.push(-t);\n}\nfunction vi(e) {\n    var r = e.stack, t = r.pop();\n    exports.DEBUG && console.log(e.step, \"FLOOR[]\", t), r.push(Math.floor(t / 64) * 64);\n}\nfunction di(e) {\n    var r = e.stack, t = r.pop();\n    exports.DEBUG && console.log(e.step, \"CEILING[]\", t), r.push(Math.ceil(t / 64) * 64);\n}\nfunction Ve(e, r) {\n    var t = r.stack, a = t.pop();\n    exports.DEBUG && console.log(r.step, \"ROUND[]\"), t.push(r.round(a / 64) * 64);\n}\n_c117 = Ve;\nfunction gi(e) {\n    var r = e.stack, t = r.pop(), a = r.pop();\n    exports.DEBUG && console.log(e.step, \"WCVTF[]\", t, a), e.cvt[a] = t * e.ppem / e.font.unitsPerEm;\n}\nfunction lr(e, r) {\n    var t = r.stack, a = t.pop(), n = r.ppem, s = r.deltaBase + (e - 1) * 16, i = r.deltaShift;\n    exports.DEBUG && console.log(r.step, \"DELTAC[\" + e + \"]\", a, t);\n    for(var u = 0; u < a; u++){\n        var o = t.pop(), l = t.pop(), f = s + ((l & 240) >> 4);\n        if (f === n) {\n            var h = (l & 15) - 8;\n            h >= 0 && h++;\n            var p = h * i;\n            exports.DEBUG && console.log(r.step, \"DELTACFIX\", o, \"by\", p), r.cvt[o] += p;\n        }\n    }\n}\nfunction mi(e) {\n    var r = e.stack.pop();\n    exports.DEBUG && console.log(e.step, \"SROUND[]\", r), e.round = ua;\n    var t;\n    switch(r & 192){\n        case 0:\n            t = .5;\n            break;\n        case 64:\n            t = 1;\n            break;\n        case 128:\n            t = 2;\n            break;\n        default:\n            throw new Error(\"invalid SROUND value\");\n    }\n    switch(e.srPeriod = t, r & 48){\n        case 0:\n            e.srPhase = 0;\n            break;\n        case 16:\n            e.srPhase = .25 * t;\n            break;\n        case 32:\n            e.srPhase = .5 * t;\n            break;\n        case 48:\n            e.srPhase = .75 * t;\n            break;\n        default:\n            throw new Error(\"invalid SROUND value\");\n    }\n    r &= 15, r === 0 ? e.srThreshold = 0 : e.srThreshold = (r / 8 - .5) * t;\n}\nfunction yi(e) {\n    var r = e.stack.pop();\n    exports.DEBUG && console.log(e.step, \"S45ROUND[]\", r), e.round = ua;\n    var t;\n    switch(r & 192){\n        case 0:\n            t = Math.sqrt(2) / 2;\n            break;\n        case 64:\n            t = Math.sqrt(2);\n            break;\n        case 128:\n            t = 2 * Math.sqrt(2);\n            break;\n        default:\n            throw new Error(\"invalid S45ROUND value\");\n    }\n    switch(e.srPeriod = t, r & 48){\n        case 0:\n            e.srPhase = 0;\n            break;\n        case 16:\n            e.srPhase = .25 * t;\n            break;\n        case 32:\n            e.srPhase = .5 * t;\n            break;\n        case 48:\n            e.srPhase = .75 * t;\n            break;\n        default:\n            throw new Error(\"invalid S45ROUND value\");\n    }\n    r &= 15, r === 0 ? e.srThreshold = 0 : e.srThreshold = (r / 8 - .5) * t;\n}\nfunction xi(e) {\n    exports.DEBUG && console.log(e.step, \"ROFF[]\"), e.round = es;\n}\nfunction bi(e) {\n    exports.DEBUG && console.log(e.step, \"RUTG[]\"), e.round = as;\n}\nfunction Si(e) {\n    exports.DEBUG && console.log(e.step, \"RDTG[]\"), e.round = ns;\n}\n_c118 = Si;\nfunction Ti(e) {\n    var r = e.stack.pop();\n    exports.DEBUG && console.log(e.step, \"SCANCTRL[]\", r);\n}\n_c119 = Ti;\nfunction vt(e, r) {\n    var t = r.stack, a = t.pop(), n = t.pop(), s = r.z2[a], i = r.z1[n];\n    exports.DEBUG && console.log(r.step, \"SDPVTL[\" + e + \"]\", a, n);\n    var u, o;\n    e ? (u = s.y - i.y, o = i.x - s.x) : (u = i.x - s.x, o = i.y - s.y), r.dpv = Me(u, o);\n}\nfunction ki(e) {\n    var r = e.stack, t = r.pop(), a = 0;\n    exports.DEBUG && console.log(e.step, \"GETINFO[]\", t), t & 1 && (a = 35), t & 32 && (a |= 4096), r.push(a);\n}\nfunction Fi(e) {\n    var r = e.stack, t = r.pop(), a = r.pop(), n = r.pop();\n    exports.DEBUG && console.log(e.step, \"ROLL[]\"), r.push(a), r.push(t), r.push(n);\n}\n_c120 = Fi;\nfunction Ui(e) {\n    var r = e.stack, t = r.pop(), a = r.pop();\n    exports.DEBUG && console.log(e.step, \"MAX[]\", t, a), r.push(Math.max(a, t));\n}\n_c121 = Ui;\nfunction Ci(e) {\n    var r = e.stack, t = r.pop(), a = r.pop();\n    exports.DEBUG && console.log(e.step, \"MIN[]\", t, a), r.push(Math.min(a, t));\n}\n_c122 = Ci;\nfunction Ei(e) {\n    var r = e.stack.pop();\n    exports.DEBUG && console.log(e.step, \"SCANTYPE[]\", r);\n}\n_c123 = Ei;\nfunction Oi(e) {\n    var r = e.stack.pop(), t = e.stack.pop();\n    switch(exports.DEBUG && console.log(e.step, \"INSTCTRL[]\", r, t), r){\n        case 1:\n            e.inhibitGridFit = !!t;\n            return;\n        case 2:\n            e.ignoreCvt = !!t;\n            return;\n        default:\n            throw new Error(\"invalid INSTCTRL[] selector\");\n    }\n}\n_c124 = Oi;\nfunction he(e, r) {\n    var t = r.stack, a = r.prog, n = r.ip;\n    exports.DEBUG && console.log(r.step, \"PUSHB[\" + e + \"]\");\n    for(var s = 0; s < e; s++)t.push(a[++n]);\n    r.ip = n;\n}\nfunction ce(e, r) {\n    var t = r.ip, a = r.prog, n = r.stack;\n    exports.DEBUG && console.log(r.ip, \"PUSHW[\" + e + \"]\");\n    for(var s = 0; s < e; s++){\n        var i = a[++t] << 8 | a[++t];\n        i & 32768 && (i = -((i ^ 65535) + 1)), n.push(i);\n    }\n    r.ip = t;\n}\nfunction T(e, r, t, a, n, s) {\n    var i = s.stack, u = e && i.pop(), o = i.pop(), l = s.rp0, f = s.z0[l], h = s.z1[o], p = s.minDis, c = s.fv, d = s.dpv, x, m, y, C;\n    m = x = d.distance(h, f, !0, !0), y = m >= 0 ? 1 : -1, m = Math.abs(m), e && (C = s.cvt[u], a && Math.abs(m - C) < s.cvCutIn && (m = C)), t && m < p && (m = p), a && (m = s.round(m)), c.setRelative(h, f, y * m, d), c.touch(h), exports.DEBUG && console.log(s.step, (e ? \"MIRP[\" : \"MDRP[\") + (r ? \"M\" : \"m\") + (t ? \">\" : \"_\") + (a ? \"R\" : \"_\") + (n === 0 ? \"Gr\" : n === 1 ? \"Bl\" : n === 2 ? \"Wh\" : \"\") + \"]\", e ? u + \"(\" + s.cvt[u] + \",\" + C + \")\" : \"\", o, \"(d =\", x, \"->\", y * m, \")\"), s.rp1 = s.rp0, s.rp2 = o, r && (s.rp0 = o);\n}\n_c125 = T;\nna = [\n    et.bind(void 0, le),\n    et.bind(void 0, oe),\n    rt.bind(void 0, le),\n    rt.bind(void 0, oe),\n    tt.bind(void 0, le),\n    tt.bind(void 0, oe),\n    at.bind(void 0, 0),\n    at.bind(void 0, 1),\n    nt.bind(void 0, 0),\n    nt.bind(void 0, 1),\n    is,\n    os,\n    us,\n    ls,\n    fs,\n    ps,\n    hs,\n    cs,\n    vs,\n    ds,\n    gs,\n    ms,\n    ys,\n    xs,\n    bs,\n    Ss,\n    Ts,\n    ks,\n    Fs,\n    Us,\n    void 0,\n    void 0,\n    Cs,\n    or,\n    Es,\n    Os,\n    Ls,\n    Ds,\n    As,\n    void 0,\n    void 0,\n    void 0,\n    Rs,\n    ws,\n    Bs,\n    void 0,\n    st.bind(void 0, 0),\n    st.bind(void 0, 1),\n    it.bind(void 0, le),\n    it.bind(void 0, oe),\n    ot.bind(void 0, 0),\n    ot.bind(void 0, 1),\n    ut.bind(void 0, 0),\n    ut.bind(void 0, 1),\n    lt.bind(void 0, 0),\n    lt.bind(void 0, 1),\n    Is,\n    Ms,\n    ft.bind(void 0, 0),\n    ft.bind(void 0, 1),\n    Ps,\n    Gs,\n    pt.bind(void 0, 0),\n    pt.bind(void 0, 1),\n    Ns,\n    Hs,\n    zs,\n    Ws,\n    _s,\n    Vs,\n    ht.bind(void 0, 0),\n    ht.bind(void 0, 1),\n    void 0,\n    ct.bind(void 0, 0),\n    ct.bind(void 0, 1),\n    qs,\n    void 0,\n    Xs,\n    void 0,\n    void 0,\n    Ys,\n    Zs,\n    Qs,\n    Ks,\n    Js,\n    js,\n    $s,\n    ei,\n    ri,\n    ti,\n    ai,\n    ni,\n    si,\n    ur.bind(void 0, 1),\n    ii,\n    oi,\n    ui,\n    li,\n    fi,\n    pi,\n    hi,\n    ci,\n    vi,\n    di,\n    Ve.bind(void 0, 0),\n    Ve.bind(void 0, 1),\n    Ve.bind(void 0, 2),\n    Ve.bind(void 0, 3),\n    void 0,\n    void 0,\n    void 0,\n    void 0,\n    gi,\n    ur.bind(void 0, 2),\n    ur.bind(void 0, 3),\n    lr.bind(void 0, 1),\n    lr.bind(void 0, 2),\n    lr.bind(void 0, 3),\n    mi,\n    yi,\n    void 0,\n    void 0,\n    xi,\n    void 0,\n    bi,\n    Si,\n    or,\n    or,\n    void 0,\n    void 0,\n    void 0,\n    void 0,\n    void 0,\n    Ti,\n    vt.bind(void 0, 0),\n    vt.bind(void 0, 1),\n    ki,\n    void 0,\n    Fi,\n    Ui,\n    Ci,\n    Ei,\n    Oi,\n    void 0,\n    void 0,\n    void 0,\n    void 0,\n    void 0,\n    void 0,\n    void 0,\n    void 0,\n    void 0,\n    void 0,\n    void 0,\n    void 0,\n    void 0,\n    void 0,\n    void 0,\n    void 0,\n    void 0,\n    void 0,\n    void 0,\n    void 0,\n    void 0,\n    void 0,\n    void 0,\n    void 0,\n    void 0,\n    void 0,\n    void 0,\n    void 0,\n    void 0,\n    void 0,\n    void 0,\n    void 0,\n    void 0,\n    he.bind(void 0, 1),\n    he.bind(void 0, 2),\n    he.bind(void 0, 3),\n    he.bind(void 0, 4),\n    he.bind(void 0, 5),\n    he.bind(void 0, 6),\n    he.bind(void 0, 7),\n    he.bind(void 0, 8),\n    ce.bind(void 0, 1),\n    ce.bind(void 0, 2),\n    ce.bind(void 0, 3),\n    ce.bind(void 0, 4),\n    ce.bind(void 0, 5),\n    ce.bind(void 0, 6),\n    ce.bind(void 0, 7),\n    ce.bind(void 0, 8),\n    T.bind(void 0, 0, 0, 0, 0, 0),\n    T.bind(void 0, 0, 0, 0, 0, 1),\n    T.bind(void 0, 0, 0, 0, 0, 2),\n    T.bind(void 0, 0, 0, 0, 0, 3),\n    T.bind(void 0, 0, 0, 0, 1, 0),\n    T.bind(void 0, 0, 0, 0, 1, 1),\n    T.bind(void 0, 0, 0, 0, 1, 2),\n    T.bind(void 0, 0, 0, 0, 1, 3),\n    T.bind(void 0, 0, 0, 1, 0, 0),\n    T.bind(void 0, 0, 0, 1, 0, 1),\n    T.bind(void 0, 0, 0, 1, 0, 2),\n    T.bind(void 0, 0, 0, 1, 0, 3),\n    T.bind(void 0, 0, 0, 1, 1, 0),\n    T.bind(void 0, 0, 0, 1, 1, 1),\n    T.bind(void 0, 0, 0, 1, 1, 2),\n    T.bind(void 0, 0, 0, 1, 1, 3),\n    T.bind(void 0, 0, 1, 0, 0, 0),\n    T.bind(void 0, 0, 1, 0, 0, 1),\n    T.bind(void 0, 0, 1, 0, 0, 2),\n    T.bind(void 0, 0, 1, 0, 0, 3),\n    T.bind(void 0, 0, 1, 0, 1, 0),\n    T.bind(void 0, 0, 1, 0, 1, 1),\n    T.bind(void 0, 0, 1, 0, 1, 2),\n    T.bind(void 0, 0, 1, 0, 1, 3),\n    T.bind(void 0, 0, 1, 1, 0, 0),\n    T.bind(void 0, 0, 1, 1, 0, 1),\n    T.bind(void 0, 0, 1, 1, 0, 2),\n    T.bind(void 0, 0, 1, 1, 0, 3),\n    T.bind(void 0, 0, 1, 1, 1, 0),\n    T.bind(void 0, 0, 1, 1, 1, 1),\n    T.bind(void 0, 0, 1, 1, 1, 2),\n    T.bind(void 0, 0, 1, 1, 1, 3),\n    T.bind(void 0, 1, 0, 0, 0, 0),\n    T.bind(void 0, 1, 0, 0, 0, 1),\n    T.bind(void 0, 1, 0, 0, 0, 2),\n    T.bind(void 0, 1, 0, 0, 0, 3),\n    T.bind(void 0, 1, 0, 0, 1, 0),\n    T.bind(void 0, 1, 0, 0, 1, 1),\n    T.bind(void 0, 1, 0, 0, 1, 2),\n    T.bind(void 0, 1, 0, 0, 1, 3),\n    T.bind(void 0, 1, 0, 1, 0, 0),\n    T.bind(void 0, 1, 0, 1, 0, 1),\n    T.bind(void 0, 1, 0, 1, 0, 2),\n    T.bind(void 0, 1, 0, 1, 0, 3),\n    T.bind(void 0, 1, 0, 1, 1, 0),\n    T.bind(void 0, 1, 0, 1, 1, 1),\n    T.bind(void 0, 1, 0, 1, 1, 2),\n    T.bind(void 0, 1, 0, 1, 1, 3),\n    T.bind(void 0, 1, 1, 0, 0, 0),\n    T.bind(void 0, 1, 1, 0, 0, 1),\n    T.bind(void 0, 1, 1, 0, 0, 2),\n    T.bind(void 0, 1, 1, 0, 0, 3),\n    T.bind(void 0, 1, 1, 0, 1, 0),\n    T.bind(void 0, 1, 1, 0, 1, 1),\n    T.bind(void 0, 1, 1, 0, 1, 2),\n    T.bind(void 0, 1, 1, 0, 1, 3),\n    T.bind(void 0, 1, 1, 1, 0, 0),\n    T.bind(void 0, 1, 1, 1, 0, 1),\n    T.bind(void 0, 1, 1, 1, 0, 2),\n    T.bind(void 0, 1, 1, 1, 0, 3),\n    T.bind(void 0, 1, 1, 1, 1, 0),\n    T.bind(void 0, 1, 1, 1, 1, 1),\n    T.bind(void 0, 1, 1, 1, 1, 2),\n    T.bind(void 0, 1, 1, 1, 1, 3)\n];\nfunction Ce(e) {\n    this.char = e, this.state = {}, this.activeState = null;\n}\n_c126 = Ce;\nfunction Lr(e, r, t) {\n    this.contextName = t, this.startIndex = e, this.endOffset = r;\n}\n_c127 = Lr;\nfunction Li(e, r, t) {\n    this.contextName = e, this.openRange = null, this.ranges = [], this.checkStart = r, this.checkEnd = t;\n}\n_c128 = Li;\nfunction re(e, r) {\n    this.context = e, this.index = r, this.length = e.length, this.current = e[r], this.backtrack = e.slice(0, r), this.lookahead = e.slice(r + 1);\n}\nfunction er(e) {\n    this.eventId = e, this.subscribers = [];\n}\nfunction Ri(e) {\n    var r = this, t = [\n        \"start\",\n        \"end\",\n        \"next\",\n        \"newToken\",\n        \"contextStart\",\n        \"contextEnd\",\n        \"insertToken\",\n        \"removeToken\",\n        \"removeRange\",\n        \"replaceToken\",\n        \"replaceRange\",\n        \"composeRUD\",\n        \"updateContextsRanges\"\n    ];\n    t.forEach(function(n) {\n        Object.defineProperty(r.events, n, {\n            value: new er(n)\n        });\n    }), e && t.forEach(function(n) {\n        var s = e[n];\n        typeof s == \"function\" && r.events[n].subscribe(s);\n    });\n    var a = [\n        \"insertToken\",\n        \"removeToken\",\n        \"removeRange\",\n        \"replaceToken\",\n        \"replaceRange\",\n        \"composeRUD\"\n    ];\n    a.forEach(function(n) {\n        r.events[n].subscribe(r.updateContextsRanges);\n    });\n}\n_c129 = Ri;\nfunction B(e) {\n    this.tokens = [], this.registeredContexts = {}, this.contextCheckers = [], this.events = {}, this.registeredModifiers = [], Ri.call(this, e);\n}\n_c130 = B;\nCe.prototype.setState = function(e, r) {\n    return this.state[e] = r, this.activeState = {\n        key: e,\n        value: this.state[e]\n    }, this.activeState;\n};\nCe.prototype.getState = function(e) {\n    return this.state[e] || null;\n};\nB.prototype.inboundIndex = function(e) {\n    return e >= 0 && e < this.tokens.length;\n};\nB.prototype.composeRUD = function(e) {\n    var r = this, t = !0, a = e.map(function(s) {\n        return r[s[0]].apply(r, s.slice(1).concat(t));\n    }), n = function(s) {\n        return typeof s == \"object\" && s.hasOwnProperty(\"FAIL\");\n    };\n    if (a.every(n)) return {\n        FAIL: \"composeRUD: one or more operations hasn't completed successfully\",\n        report: a.filter(n)\n    };\n    this.dispatch(\"composeRUD\", [\n        a.filter(function(s) {\n            return !n(s);\n        })\n    ]);\n};\nB.prototype.replaceRange = function(e, r, t, a) {\n    r = r !== null ? r : this.tokens.length;\n    var n = t.every(function(i) {\n        return i instanceof Ce;\n    });\n    if (!isNaN(e) && this.inboundIndex(e) && n) {\n        var s = this.tokens.splice.apply(this.tokens, [\n            e,\n            r\n        ].concat(t));\n        return a || this.dispatch(\"replaceToken\", [\n            e,\n            r,\n            t\n        ]), [\n            s,\n            t\n        ];\n    } else return {\n        FAIL: \"replaceRange: invalid tokens or startIndex.\"\n    };\n};\nB.prototype.replaceToken = function(e, r, t) {\n    if (!isNaN(e) && this.inboundIndex(e) && r instanceof Ce) {\n        var a = this.tokens.splice(e, 1, r);\n        return t || this.dispatch(\"replaceToken\", [\n            e,\n            r\n        ]), [\n            a[0],\n            r\n        ];\n    } else return {\n        FAIL: \"replaceToken: invalid token or index.\"\n    };\n};\nB.prototype.removeRange = function(e, r, t) {\n    r = isNaN(r) ? this.tokens.length : r;\n    var a = this.tokens.splice(e, r);\n    return t || this.dispatch(\"removeRange\", [\n        a,\n        e,\n        r\n    ]), a;\n};\nB.prototype.removeToken = function(e, r) {\n    if (!isNaN(e) && this.inboundIndex(e)) {\n        var t = this.tokens.splice(e, 1);\n        return r || this.dispatch(\"removeToken\", [\n            t,\n            e\n        ]), t;\n    } else return {\n        FAIL: \"removeToken: invalid token index.\"\n    };\n};\nB.prototype.insertToken = function(e, r, t) {\n    var a = e.every(function(n) {\n        return n instanceof Ce;\n    });\n    return a ? (this.tokens.splice.apply(this.tokens, [\n        r,\n        0\n    ].concat(e)), t || this.dispatch(\"insertToken\", [\n        e,\n        r\n    ]), e) : {\n        FAIL: \"insertToken: invalid token(s).\"\n    };\n};\nB.prototype.registerModifier = function(e, r, t) {\n    this.events.newToken.subscribe(function(a, n) {\n        var s = [\n            a,\n            n\n        ], i = r === null || r.apply(this, s) === !0, u = [\n            a,\n            n\n        ];\n        if (i) {\n            var o = t.apply(this, u);\n            a.setState(e, o);\n        }\n    }), this.registeredModifiers.push(e);\n};\ner.prototype.subscribe = function(e) {\n    return typeof e == \"function\" ? this.subscribers.push(e) - 1 : {\n        FAIL: \"invalid '\" + this.eventId + \"' event handler\"\n    };\n};\ner.prototype.unsubscribe = function(e) {\n    this.subscribers.splice(e, 1);\n};\nre.prototype.setCurrentIndex = function(e) {\n    this.index = e, this.current = this.context[e], this.backtrack = this.context.slice(0, e), this.lookahead = this.context.slice(e + 1);\n};\nre.prototype.get = function(e) {\n    switch(!0){\n        case e === 0:\n            return this.current;\n        case e < 0 && Math.abs(e) <= this.backtrack.length:\n            return this.backtrack.slice(e)[0];\n        case e > 0 && e <= this.lookahead.length:\n            return this.lookahead[e - 1];\n        default:\n            return null;\n    }\n};\nB.prototype.rangeToText = function(e) {\n    if (e instanceof Lr) return this.getRangeTokens(e).map(function(r) {\n        return r.char;\n    }).join(\"\");\n};\nB.prototype.getText = function() {\n    return this.tokens.map(function(e) {\n        return e.char;\n    }).join(\"\");\n};\nB.prototype.getContext = function(e) {\n    var r = this.registeredContexts[e];\n    return r || null;\n};\nB.prototype.on = function(e, r) {\n    var t = this.events[e];\n    return t ? t.subscribe(r) : null;\n};\nB.prototype.dispatch = function(e, r) {\n    var t = this, a = this.events[e];\n    a instanceof er && a.subscribers.forEach(function(n) {\n        n.apply(t, r || []);\n    });\n};\nB.prototype.registerContextChecker = function(e, r, t) {\n    if (this.getContext(e)) return {\n        FAIL: \"context name '\" + e + \"' is already registered.\"\n    };\n    if (typeof r != \"function\") return {\n        FAIL: \"missing context start check.\"\n    };\n    if (typeof t != \"function\") return {\n        FAIL: \"missing context end check.\"\n    };\n    var a = new Li(e, r, t);\n    return this.registeredContexts[e] = a, this.contextCheckers.push(a), a;\n};\nB.prototype.getRangeTokens = function(e) {\n    var r = e.startIndex + e.endOffset;\n    return [].concat(this.tokens.slice(e.startIndex, r));\n};\nB.prototype.getContextRanges = function(e) {\n    var r = this.getContext(e);\n    return r ? r.ranges : {\n        FAIL: \"context checker '\" + e + \"' is not registered.\"\n    };\n};\nB.prototype.resetContextsRanges = function() {\n    var e = this.registeredContexts;\n    for(var r in e)if (e.hasOwnProperty(r)) {\n        var t = e[r];\n        t.ranges = [];\n    }\n};\nB.prototype.updateContextsRanges = function() {\n    this.resetContextsRanges();\n    for(var e = this.tokens.map(function(a) {\n        return a.char;\n    }), r = 0; r < e.length; r++){\n        var t = new re(e, r);\n        this.runContextCheck(t);\n    }\n    this.dispatch(\"updateContextsRanges\", [\n        this.registeredContexts\n    ]);\n};\nB.prototype.setEndOffset = function(e, r) {\n    var t = this.getContext(r).openRange.startIndex, a = new Lr(t, e, r), n = this.getContext(r).ranges;\n    return a.rangeId = r + \".\" + n.length, n.push(a), this.getContext(r).openRange = null, a;\n};\nB.prototype.runContextCheck = function(e) {\n    var r = this, t = e.index;\n    this.contextCheckers.forEach(function(a) {\n        var n = a.contextName, s = r.getContext(n).openRange;\n        if (!s && a.checkStart(e) && (s = new Lr(t, null, n), r.getContext(n).openRange = s, r.dispatch(\"contextStart\", [\n            n,\n            t\n        ])), !!s && a.checkEnd(e)) {\n            var i = t - s.startIndex + 1, u = r.setEndOffset(i, n);\n            r.dispatch(\"contextEnd\", [\n                n,\n                u\n            ]);\n        }\n    });\n};\nB.prototype.tokenize = function(e) {\n    this.tokens = [], this.resetContextsRanges();\n    var r = Array.from(e);\n    this.dispatch(\"start\");\n    for(var t = 0; t < r.length; t++){\n        var a = r[t], n = new re(r, t);\n        this.dispatch(\"next\", [\n            n\n        ]), this.runContextCheck(n);\n        var s = new Ce(a);\n        this.tokens.push(s), this.dispatch(\"newToken\", [\n            s,\n            n\n        ]);\n    }\n    return this.dispatch(\"end\", [\n        this.tokens\n    ]), this.tokens;\n};\nfunction ge(e) {\n    return /[\\u0600-\\u065F\\u066A-\\u06D2\\u06FA-\\u06FF]/.test(e);\n}\nfunction fa(e) {\n    return /[\\u0630\\u0690\\u0621\\u0631\\u0661\\u0671\\u0622\\u0632\\u0672\\u0692\\u06C2\\u0623\\u0673\\u0693\\u06C3\\u0624\\u0694\\u06C4\\u0625\\u0675\\u0695\\u06C5\\u06E5\\u0676\\u0696\\u06C6\\u0627\\u0677\\u0697\\u06C7\\u0648\\u0688\\u0698\\u06C8\\u0689\\u0699\\u06C9\\u068A\\u06CA\\u066B\\u068B\\u06CB\\u068C\\u068D\\u06CD\\u06FD\\u068E\\u06EE\\u06FE\\u062F\\u068F\\u06CF\\u06EF]/.test(e);\n}\nfunction me(e) {\n    return /[\\u0600-\\u0605\\u060C-\\u060E\\u0610-\\u061B\\u061E\\u064B-\\u065F\\u0670\\u06D6-\\u06DC\\u06DF-\\u06E4\\u06E7\\u06E8\\u06EA-\\u06ED]/.test(e);\n}\nfunction Xe(e) {\n    return /[A-z]/.test(e);\n}\n_c131 = Xe;\nfunction wi(e) {\n    return /\\s/.test(e);\n}\nfunction J(e) {\n    this.font = e, this.features = {};\n}\n_c132 = J;\nfunction be(e) {\n    this.id = e.id, this.tag = e.tag, this.substitution = e.substitution;\n}\nfunction Pe(e, r) {\n    if (!e) return -1;\n    switch(r.format){\n        case 1:\n            return r.glyphs.indexOf(e);\n        case 2:\n            for(var t = r.ranges, a = 0; a < t.length; a++){\n                var n = t[a];\n                if (e >= n.start && e <= n.end) {\n                    var s = e - n.start;\n                    return n.index + s;\n                }\n            }\n            break;\n        default:\n            return -1;\n    }\n    return -1;\n}\n_c133 = Pe;\nfunction Di(e, r) {\n    var t = Pe(e, r.coverage);\n    return t === -1 ? null : e + r.deltaGlyphId;\n}\n_c134 = Di;\nfunction Ai(e, r) {\n    var t = Pe(e, r.coverage);\n    return t === -1 ? null : r.substitute[t];\n}\n_c135 = Ai;\nfunction fr(e, r) {\n    for(var t = [], a = 0; a < e.length; a++){\n        var n = e[a], s = r.current;\n        s = Array.isArray(s) ? s[0] : s;\n        var i = Pe(s, n);\n        i !== -1 && t.push(i);\n    }\n    return t.length !== e.length ? -1 : t;\n}\nfunction Bi(e, r) {\n    var t = r.inputCoverage.length + r.lookaheadCoverage.length + r.backtrackCoverage.length;\n    if (e.context.length < t) return [];\n    var a = fr(r.inputCoverage, e);\n    if (a === -1) return [];\n    var n = r.inputCoverage.length - 1;\n    if (e.lookahead.length < r.lookaheadCoverage.length) return [];\n    for(var s = e.lookahead.slice(n); s.length && me(s[0].char);)s.shift();\n    var i = new re(s, 0), u = fr(r.lookaheadCoverage, i), o = [].concat(e.backtrack);\n    for(o.reverse(); o.length && me(o[0].char);)o.shift();\n    if (o.length < r.backtrackCoverage.length) return [];\n    var l = new re(o, 0), f = fr(r.backtrackCoverage, l), h = a.length === r.inputCoverage.length && u.length === r.lookaheadCoverage.length && f.length === r.backtrackCoverage.length, p = [];\n    if (h) for(var c = 0; c < r.lookupRecords.length; c++)for(var d = r.lookupRecords[c], x = d.lookupListIndex, m = this.getLookupByIndex(x), y = 0; y < m.subtables.length; y++){\n        var C = m.subtables[y], S = this.getLookupMethod(m, C), R = this.getSubstitutionType(m, C);\n        if (R === \"12\") for(var O = 0; O < a.length; O++){\n            var D = e.get(O), L = S(D);\n            L && p.push(L);\n        }\n    }\n    return p;\n}\n_c136 = Bi;\nfunction Ii(e, r) {\n    var t = e.current, a = Pe(t, r.coverage);\n    if (a === -1) return null;\n    for(var n, s = r.ligatureSets[a], i = 0; i < s.length; i++){\n        n = s[i];\n        for(var u = 0; u < n.components.length; u++){\n            var o = e.lookahead[u], l = n.components[u];\n            if (o !== l) break;\n            if (u === n.components.length - 1) return n;\n        }\n    }\n    return null;\n}\n_c137 = Ii;\nfunction Mi(e, r) {\n    var t = Pe(e, r.coverage);\n    return t === -1 ? null : r.sequences[t];\n}\n_c138 = Mi;\nJ.prototype.getDefaultScriptFeaturesIndexes = function() {\n    for(var e = this.font.tables.gsub.scripts, r = 0; r < e.length; r++){\n        var t = e[r];\n        if (t.tag === \"DFLT\") return t.script.defaultLangSys.featureIndexes;\n    }\n    return [];\n};\nJ.prototype.getScriptFeaturesIndexes = function(e) {\n    var r = this.font.tables;\n    if (!r.gsub) return [];\n    if (!e) return this.getDefaultScriptFeaturesIndexes();\n    for(var t = this.font.tables.gsub.scripts, a = 0; a < t.length; a++){\n        var n = t[a];\n        if (n.tag === e && n.script.defaultLangSys) return n.script.defaultLangSys.featureIndexes;\n        var s = n.langSysRecords;\n        if (s) for(var i = 0; i < s.length; i++){\n            var u = s[i];\n            if (u.tag === e) {\n                var o = u.langSys;\n                return o.featureIndexes;\n            }\n        }\n    }\n    return this.getDefaultScriptFeaturesIndexes();\n};\nJ.prototype.mapTagsToFeatures = function(e, r) {\n    for(var t = {}, a = 0; a < e.length; a++){\n        var n = e[a].tag, s = e[a].feature;\n        t[n] = s;\n    }\n    this.features[r].tags = t;\n};\nJ.prototype.getScriptFeatures = function(e) {\n    var r = this.features[e];\n    if (this.features.hasOwnProperty(e)) return r;\n    var t = this.getScriptFeaturesIndexes(e);\n    if (!t) return null;\n    var a = this.font.tables.gsub;\n    return r = t.map(function(n) {\n        return a.features[n];\n    }), this.features[e] = r, this.mapTagsToFeatures(r, e), r;\n};\nJ.prototype.getSubstitutionType = function(e, r) {\n    var t = e.lookupType.toString(), a = r.substFormat.toString();\n    return t + a;\n};\nJ.prototype.getLookupMethod = function(e, r) {\n    var t = this, a = this.getSubstitutionType(e, r);\n    switch(a){\n        case \"11\":\n            return function(n) {\n                return Di.apply(t, [\n                    n,\n                    r\n                ]);\n            };\n        case \"12\":\n            return function(n) {\n                return Ai.apply(t, [\n                    n,\n                    r\n                ]);\n            };\n        case \"63\":\n            return function(n) {\n                return Bi.apply(t, [\n                    n,\n                    r\n                ]);\n            };\n        case \"41\":\n            return function(n) {\n                return Ii.apply(t, [\n                    n,\n                    r\n                ]);\n            };\n        case \"21\":\n            return function(n) {\n                return Mi.apply(t, [\n                    n,\n                    r\n                ]);\n            };\n        default:\n            throw new Error(\"lookupType: \" + e.lookupType + \" - substFormat: \" + r.substFormat + \" is not yet supported\");\n    }\n};\nJ.prototype.lookupFeature = function(e) {\n    var r = e.contextParams, t = r.index, a = this.getFeature({\n        tag: e.tag,\n        script: e.script\n    });\n    if (!a) return new Error(\"font '\" + this.font.names.fullName.en + \"' doesn't support feature '\" + e.tag + \"' for script '\" + e.script + \"'.\");\n    for(var n = this.getFeatureLookups(a), s = [].concat(r.context), i = 0; i < n.length; i++)for(var u = n[i], o = this.getLookupSubtables(u), l = 0; l < o.length; l++){\n        var f = o[l], h = this.getSubstitutionType(u, f), p = this.getLookupMethod(u, f), c = void 0;\n        switch(h){\n            case \"11\":\n                c = p(r.current), c && s.splice(t, 1, new be({\n                    id: 11,\n                    tag: e.tag,\n                    substitution: c\n                }));\n                break;\n            case \"12\":\n                c = p(r.current), c && s.splice(t, 1, new be({\n                    id: 12,\n                    tag: e.tag,\n                    substitution: c\n                }));\n                break;\n            case \"63\":\n                c = p(r), Array.isArray(c) && c.length && s.splice(t, 1, new be({\n                    id: 63,\n                    tag: e.tag,\n                    substitution: c\n                }));\n                break;\n            case \"41\":\n                c = p(r), c && s.splice(t, 1, new be({\n                    id: 41,\n                    tag: e.tag,\n                    substitution: c\n                }));\n                break;\n            case \"21\":\n                c = p(r.current), c && s.splice(t, 1, new be({\n                    id: 21,\n                    tag: e.tag,\n                    substitution: c\n                }));\n                break;\n        }\n        r = new re(s, t), !(Array.isArray(c) && !c.length) && (c = null);\n    }\n    return s.length ? s : null;\n};\nJ.prototype.supports = function(e) {\n    if (!e.script) return !1;\n    this.getScriptFeatures(e.script);\n    var r = this.features.hasOwnProperty(e.script);\n    if (!e.tag) return r;\n    var t = this.features[e.script].some(function(a) {\n        return a.tag === e.tag;\n    });\n    return r && t;\n};\nJ.prototype.getLookupSubtables = function(e) {\n    return e.subtables || null;\n};\nJ.prototype.getLookupByIndex = function(e) {\n    var r = this.font.tables.gsub.lookups;\n    return r[e] || null;\n};\nJ.prototype.getFeatureLookups = function(e) {\n    return e.lookupListIndexes.map(this.getLookupByIndex.bind(this));\n};\nJ.prototype.getFeature = function(r) {\n    if (!this.font) return {\n        FAIL: \"No font was found\"\n    };\n    this.features.hasOwnProperty(r.script) || this.getScriptFeatures(r.script);\n    var t = this.features[r.script];\n    return t ? t.tags[r.tag] ? this.features[r.script].tags[r.tag] : null : {\n        FAIL: \"No feature for script \" + r.script\n    };\n};\nfunction Pi(e) {\n    var r = e.current, t = e.get(-1);\n    return t === null && ge(r) || !ge(t) && ge(r);\n}\n_c139 = Pi;\nfunction Gi(e) {\n    var r = e.get(1);\n    return r === null || !ge(r);\n}\n_c140 = Gi;\nvar Ni = {\n    startCheck: Pi,\n    endCheck: Gi\n};\nfunction Hi(e) {\n    var r = e.current, t = e.get(-1);\n    return (ge(r) || me(r)) && !ge(t);\n}\n_c141 = Hi;\nfunction zi(e) {\n    var r = e.get(1);\n    switch(!0){\n        case r === null:\n            return !0;\n        case !ge(r) && !me(r):\n            var t = wi(r);\n            if (!t) return !0;\n            if (t) {\n                var a = !1;\n                if (a = e.lookahead.some(function(n) {\n                    return ge(n) || me(n);\n                }), !a) return !0;\n            }\n            break;\n        default:\n            return !1;\n    }\n}\nvar Wi = {\n    startCheck: Hi,\n    endCheck: zi\n};\nfunction _i(e, r, t) {\n    r[t].setState(e.tag, e.substitution);\n}\nfunction Vi(e, r, t) {\n    r[t].setState(e.tag, e.substitution);\n}\n_c142 = Vi;\nfunction qi(e, r, t) {\n    e.substitution.forEach(function(a, n) {\n        var s = r[t + n];\n        s.setState(e.tag, a);\n    });\n}\nfunction Xi(e, r, t) {\n    var a = r[t];\n    a.setState(e.tag, e.substitution.ligGlyph);\n    for(var n = e.substitution.components.length, s = 0; s < n; s++)a = r[t + s + 1], a.setState(\"deleted\", !0);\n}\n_c143 = Xi;\nvar dt = {\n    11: _i,\n    12: Vi,\n    63: qi,\n    41: Xi\n};\nfunction Rr(e, r, t) {\n    e instanceof be && dt[e.id] && dt[e.id](e, r, t);\n}\n_c144 = Rr;\nfunction Yi(e) {\n    for(var r = [].concat(e.backtrack), t = r.length - 1; t >= 0; t--){\n        var a = r[t], n = fa(a), s = me(a);\n        if (!n && !s) return !0;\n        if (n) return !1;\n    }\n    return !1;\n}\n_c145 = Yi;\nfunction Zi(e) {\n    if (fa(e.current)) return !1;\n    for(var r = 0; r < e.lookahead.length; r++){\n        var t = e.lookahead[r], a = me(t);\n        if (!a) return !0;\n    }\n    return !1;\n}\n_c146 = Zi;\nfunction Qi(e) {\n    var r = this, t = \"arab\", a = this.featuresTags[t], n = this.tokenizer.getRangeTokens(e);\n    if (n.length !== 1) {\n        var s = new re(n.map(function(u) {\n            return u.getState(\"glyphIndex\");\n        }), 0), i = new re(n.map(function(u) {\n            return u.char;\n        }), 0);\n        n.forEach(function(u, o) {\n            if (!me(u.char)) {\n                s.setCurrentIndex(o), i.setCurrentIndex(o);\n                var l = 0;\n                Yi(i) && (l |= 1), Zi(i) && (l |= 2);\n                var f;\n                switch(l){\n                    case 1:\n                        f = \"fina\";\n                        break;\n                    case 2:\n                        f = \"init\";\n                        break;\n                    case 3:\n                        f = \"medi\";\n                        break;\n                }\n                if (a.indexOf(f) !== -1) {\n                    var h = r.query.lookupFeature({\n                        tag: f,\n                        script: t,\n                        contextParams: s\n                    });\n                    if (h instanceof Error) return console.info(h.message);\n                    h.forEach(function(p, c) {\n                        p instanceof be && (Rr(p, n, c), s.context[c] = p.substitution);\n                    });\n                }\n            }\n        });\n    }\n}\n_c147 = Qi;\nfunction gt(e, r) {\n    var t = e.map(function(a) {\n        return a.activeState.value;\n    });\n    return new re(t, r || 0);\n}\nfunction Ki(e) {\n    var r = this, t = \"arab\", a = this.tokenizer.getRangeTokens(e), n = gt(a);\n    n.context.forEach(function(s, i) {\n        n.setCurrentIndex(i);\n        var u = r.query.lookupFeature({\n            tag: \"rlig\",\n            script: t,\n            contextParams: n\n        });\n        u.length && (u.forEach(function(o) {\n            return Rr(o, a, i);\n        }), n = gt(a));\n    });\n}\n_c148 = Ki;\nfunction Ji(e) {\n    var r = e.current, t = e.get(-1);\n    return t === null && Xe(r) || !Xe(t) && Xe(r);\n}\n_c149 = Ji;\nfunction ji(e) {\n    var r = e.get(1);\n    return r === null || !Xe(r);\n}\nvar $i = {\n    startCheck: Ji,\n    endCheck: ji\n};\nfunction mt(e, r) {\n    var t = e.map(function(a) {\n        return a.activeState.value;\n    });\n    return new re(t, r || 0);\n}\nfunction eo(e) {\n    var r = this, t = \"latn\", a = this.tokenizer.getRangeTokens(e), n = mt(a);\n    n.context.forEach(function(s, i) {\n        n.setCurrentIndex(i);\n        var u = r.query.lookupFeature({\n            tag: \"liga\",\n            script: t,\n            contextParams: n\n        });\n        u.length && (u.forEach(function(o) {\n            return Rr(o, a, i);\n        }), n = mt(a));\n    });\n}\nfunction ne(e) {\n    this.baseDir = e || \"ltr\", this.tokenizer = new B, this.featuresTags = {};\n}\nne.prototype.setText = function(e) {\n    this.text = e;\n};\nne.prototype.contextChecks = {\n    latinWordCheck: $i,\n    arabicWordCheck: Ni,\n    arabicSentenceCheck: Wi\n};\nfunction pr(e) {\n    var r = this.contextChecks[e + \"Check\"];\n    return this.tokenizer.registerContextChecker(e, r.startCheck, r.endCheck);\n}\nfunction ro() {\n    return pr.call(this, \"latinWord\"), pr.call(this, \"arabicWord\"), pr.call(this, \"arabicSentence\"), this.tokenizer.tokenize(this.text);\n}\nfunction to() {\n    var e = this, r = this.tokenizer.getContextRanges(\"arabicSentence\");\n    r.forEach(function(t) {\n        var a = e.tokenizer.getRangeTokens(t);\n        e.tokenizer.replaceRange(t.startIndex, t.endOffset, a.reverse());\n    });\n}\nne.prototype.registerFeatures = function(e, r) {\n    var t = this, a = r.filter(function(n) {\n        return t.query.supports({\n            script: e,\n            tag: n\n        });\n    });\n    this.featuresTags.hasOwnProperty(e) ? this.featuresTags[e] = this.featuresTags[e].concat(a) : this.featuresTags[e] = a;\n};\nne.prototype.applyFeatures = function(e, r) {\n    if (!e) throw new Error(\"No valid font was provided to apply features\");\n    this.query || (this.query = new J(e));\n    for(var t = 0; t < r.length; t++){\n        var a = r[t];\n        !this.query.supports({\n            script: a.script\n        }) || this.registerFeatures(a.script, a.tags);\n    }\n};\nne.prototype.registerModifier = function(e, r, t) {\n    this.tokenizer.registerModifier(e, r, t);\n};\nfunction wr() {\n    if (this.tokenizer.registeredModifiers.indexOf(\"glyphIndex\") === -1) throw new Error(\"glyphIndex modifier is required to apply arabic presentation features.\");\n}\nfunction ao() {\n    var e = this, r = \"arab\";\n    if (!!this.featuresTags.hasOwnProperty(r)) {\n        wr.call(this);\n        var t = this.tokenizer.getContextRanges(\"arabicWord\");\n        t.forEach(function(a) {\n            Qi.call(e, a);\n        });\n    }\n}\nfunction no() {\n    var e = this, r = \"arab\";\n    if (!!this.featuresTags.hasOwnProperty(r)) {\n        var t = this.featuresTags[r];\n        if (t.indexOf(\"rlig\") !== -1) {\n            wr.call(this);\n            var a = this.tokenizer.getContextRanges(\"arabicWord\");\n            a.forEach(function(n) {\n                Ki.call(e, n);\n            });\n        }\n    }\n}\nfunction so() {\n    var e = this, r = \"latn\";\n    if (!!this.featuresTags.hasOwnProperty(r)) {\n        var t = this.featuresTags[r];\n        if (t.indexOf(\"liga\") !== -1) {\n            wr.call(this);\n            var a = this.tokenizer.getContextRanges(\"latinWord\");\n            a.forEach(function(n) {\n                eo.call(e, n);\n            });\n        }\n    }\n}\nne.prototype.checkContextReady = function(e) {\n    return !!this.tokenizer.getContext(e);\n};\nne.prototype.applyFeaturesToContexts = function() {\n    this.checkContextReady(\"arabicWord\") && (ao.call(this), no.call(this)), this.checkContextReady(\"latinWord\") && so.call(this), this.checkContextReady(\"arabicSentence\") && to.call(this);\n};\nne.prototype.processText = function(e) {\n    (!this.text || this.text !== e) && (this.setText(e), ro.call(this), this.applyFeaturesToContexts());\n};\nne.prototype.getBidiText = function(e) {\n    return this.processText(e), this.tokenizer.getText();\n};\nne.prototype.getTextGlyphs = function(e) {\n    this.processText(e);\n    for(var r = [], t = 0; t < this.tokenizer.tokens.length; t++){\n        var a = this.tokenizer.tokens[t];\n        if (!a.state.deleted) {\n            var n = a.activeState.value;\n            r.push(Array.isArray(n) ? n[0] : n);\n        }\n    }\n    return r;\n};\nfunction w(e) {\n    e = e || {}, e.tables = e.tables || {}, e.empty || (Ee(e.familyName, \"When creating a new Font object, familyName is required.\"), Ee(e.styleName, \"When creating a new Font object, styleName is required.\"), Ee(e.unitsPerEm, \"When creating a new Font object, unitsPerEm is required.\"), Ee(e.ascender, \"When creating a new Font object, ascender is required.\"), Ee(e.descender <= 0, \"When creating a new Font object, negative descender value is required.\"), this.names = {\n        fontFamily: {\n            en: e.familyName || \" \"\n        },\n        fontSubfamily: {\n            en: e.styleName || \" \"\n        },\n        fullName: {\n            en: e.fullName || e.familyName + \" \" + e.styleName\n        },\n        postScriptName: {\n            en: e.postScriptName || (e.familyName + e.styleName).replace(/\\s/g, \"\")\n        },\n        designer: {\n            en: e.designer || \" \"\n        },\n        designerURL: {\n            en: e.designerURL || \" \"\n        },\n        manufacturer: {\n            en: e.manufacturer || \" \"\n        },\n        manufacturerURL: {\n            en: e.manufacturerURL || \" \"\n        },\n        license: {\n            en: e.license || \" \"\n        },\n        licenseURL: {\n            en: e.licenseURL || \" \"\n        },\n        version: {\n            en: e.version || \"Version 0.1\"\n        },\n        description: {\n            en: e.description || \" \"\n        },\n        copyright: {\n            en: e.copyright || \" \"\n        },\n        trademark: {\n            en: e.trademark || \" \"\n        }\n    }, this.unitsPerEm = e.unitsPerEm || 1e3, this.ascender = e.ascender, this.descender = e.descender, this.createdTimestamp = e.createdTimestamp, this.tables = Object.assign(e.tables, {\n        os2: Object.assign({\n            usWeightClass: e.weightClass || this.usWeightClasses.MEDIUM,\n            usWidthClass: e.widthClass || this.usWidthClasses.MEDIUM,\n            fsSelection: e.fsSelection || this.fsSelectionValues.REGULAR\n        }, e.tables.os2)\n    })), this.supported = !0, this.glyphs = new ue.GlyphSet(this, e.glyphs || []), this.encoding = new Ot(this), this.position = new Be(this), this.substitution = new K(this), this.tables = this.tables || {}, this._push = null, this._hmtxTableData = {}, Object.defineProperty(this, \"hinting\", {\n        get: function() {\n            if (this._hinting) return this._hinting;\n            if (this.outlinesFormat === \"truetype\") return this._hinting = new ia(this);\n        }\n    });\n}\nw.prototype.hasChar = function(e) {\n    return this.encoding.charToGlyphIndex(e) !== null;\n};\nw.prototype.charToGlyphIndex = function(e) {\n    return this.encoding.charToGlyphIndex(e);\n};\nw.prototype.charToGlyph = function(e) {\n    var r = this.charToGlyphIndex(e), t = this.glyphs.get(r);\n    return t || (t = this.glyphs.get(0)), t;\n};\nw.prototype.updateFeatures = function(e) {\n    return this.defaultRenderOptions.features.map(function(r) {\n        return r.script === \"latn\" ? {\n            script: \"latn\",\n            tags: r.tags.filter(function(t) {\n                return e[t];\n            })\n        } : r;\n    });\n};\nw.prototype.stringToGlyphs = function(e, r) {\n    var t = this, a = new ne, n = function(h) {\n        return t.charToGlyphIndex(h.char);\n    };\n    a.registerModifier(\"glyphIndex\", null, n);\n    var s = r ? this.updateFeatures(r.features) : this.defaultRenderOptions.features;\n    a.applyFeatures(this, s);\n    for(var i = a.getTextGlyphs(e), u = i.length, o = new Array(u), l = this.glyphs.get(0), f = 0; f < u; f += 1)o[f] = this.glyphs.get(i[f]) || l;\n    return o;\n};\nw.prototype.nameToGlyphIndex = function(e) {\n    return this.glyphNames.nameToGlyphIndex(e);\n};\nw.prototype.nameToGlyph = function(e) {\n    var r = this.nameToGlyphIndex(e), t = this.glyphs.get(r);\n    return t || (t = this.glyphs.get(0)), t;\n};\nw.prototype.glyphIndexToName = function(e) {\n    return this.glyphNames.glyphIndexToName ? this.glyphNames.glyphIndexToName(e) : \"\";\n};\nw.prototype.getKerningValue = function(e, r) {\n    e = e.index || e, r = r.index || r;\n    var t = this.position.defaultKerningTables;\n    return t ? this.position.getKerningValue(t, e, r) : this.kerningPairs[e + \",\" + r] || 0;\n};\nw.prototype.defaultRenderOptions = {\n    kerning: !0,\n    features: [\n        {\n            script: \"arab\",\n            tags: [\n                \"init\",\n                \"medi\",\n                \"fina\",\n                \"rlig\"\n            ]\n        },\n        {\n            script: \"latn\",\n            tags: [\n                \"liga\",\n                \"rlig\"\n            ]\n        }\n    ]\n};\nw.prototype.forEachGlyph = function(e, r, t, a, n, s) {\n    r = r !== void 0 ? r : 0, t = t !== void 0 ? t : 0, a = a !== void 0 ? a : 72, n = Object.assign({}, this.defaultRenderOptions, n);\n    var i = 1 / this.unitsPerEm * a, u = this.stringToGlyphs(e, n), o;\n    if (n.kerning) {\n        var l = n.script || this.position.getDefaultScriptName();\n        o = this.position.getKerningTables(l, n.language);\n    }\n    for(var f = 0; f < u.length; f += 1){\n        var h = u[f];\n        if (s.call(this, h, r, t, a, n), h.advanceWidth && (r += h.advanceWidth * i), n.kerning && f < u.length - 1) {\n            var p = o ? this.position.getKerningValue(o, h.index, u[f + 1].index) : this.getKerningValue(h, u[f + 1]);\n            r += p * i;\n        }\n        n.letterSpacing ? r += n.letterSpacing * a : n.tracking && (r += n.tracking / 1e3 * a);\n    }\n    return r;\n};\nw.prototype.getPath = function(e, r, t, a, n) {\n    var s = new P;\n    return this.forEachGlyph(e, r, t, a, n, function(i, u, o, l) {\n        var f = i.getPath(u, o, l, n, this);\n        s.extend(f);\n    }), s;\n};\nw.prototype.getPaths = function(e, r, t, a, n) {\n    var s = [];\n    return this.forEachGlyph(e, r, t, a, n, function(i, u, o, l) {\n        var f = i.getPath(u, o, l, n, this);\n        s.push(f);\n    }), s;\n};\nw.prototype.getAdvanceWidth = function(e, r, t) {\n    return this.forEachGlyph(e, 0, 0, r, t, function() {});\n};\nw.prototype.draw = function(e, r, t, a, n, s) {\n    this.getPath(r, t, a, n, s).draw(e);\n};\nw.prototype.drawPoints = function(e, r, t, a, n, s) {\n    this.forEachGlyph(r, t, a, n, s, function(i, u, o, l) {\n        i.drawPoints(e, u, o, l);\n    });\n};\nw.prototype.drawMetrics = function(e, r, t, a, n, s) {\n    this.forEachGlyph(r, t, a, n, s, function(i, u, o, l) {\n        i.drawMetrics(e, u, o, l);\n    });\n};\nw.prototype.getEnglishName = function(e) {\n    var r = this.names[e];\n    if (r) return r.en;\n};\nw.prototype.validate = function() {\n    var e = this;\n    function r(a, n) {}\n    function t(a) {\n        var n = e.getEnglishName(a);\n        n && n.trim().length > 0;\n    }\n    t(\"fontFamily\"), t(\"weightName\"), t(\"manufacturer\"), t(\"copyright\"), t(\"version\"), this.unitsPerEm > 0;\n};\nw.prototype.toTables = function() {\n    return Xn.fontToTable(this);\n};\nw.prototype.toBuffer = function() {\n    return console.warn(\"Font.toBuffer is deprecated. Use Font.toArrayBuffer instead.\"), this.toArrayBuffer();\n};\nw.prototype.toArrayBuffer = function() {\n    for(var e = this.toTables(), r = e.encode(), t = new ArrayBuffer(r.length), a = new Uint8Array(t), n = 0; n < r.length; n++)a[n] = r[n];\n    return t;\n};\nw.prototype.download = function(e) {\n    var r = this.getEnglishName(\"fontFamily\"), t = this.getEnglishName(\"fontSubfamily\");\n    e = e || r.replace(/\\s/g, \"\") + \"-\" + t + \".otf\";\n    var a = this.toArrayBuffer();\n    if (Zn()) if (window.URL = window.URL || window.webkitURL, window.URL) {\n        var n = new DataView(a), s = new Blob([\n            n\n        ], {\n            type: \"font/opentype\"\n        }), i = document.createElement(\"a\");\n        i.href = window.URL.createObjectURL(s), i.download = e;\n        var u = document.createEvent(\"MouseEvents\");\n        u.initEvent(\"click\", !0, !1), i.dispatchEvent(u);\n    } else console.warn(\"Font file could not be downloaded. Try using a different browser.\");\n    else {\n        var o = Ne(), l = Qn(a);\n        o.writeFileSync(e, l);\n    }\n};\nw.prototype.fsSelectionValues = {\n    ITALIC: 1,\n    UNDERSCORE: 2,\n    NEGATIVE: 4,\n    OUTLINED: 8,\n    STRIKEOUT: 16,\n    BOLD: 32,\n    REGULAR: 64,\n    USER_TYPO_METRICS: 128,\n    WWS: 256,\n    OBLIQUE: 512\n};\nw.prototype.usWidthClasses = {\n    ULTRA_CONDENSED: 1,\n    EXTRA_CONDENSED: 2,\n    CONDENSED: 3,\n    SEMI_CONDENSED: 4,\n    MEDIUM: 5,\n    SEMI_EXPANDED: 6,\n    EXPANDED: 7,\n    EXTRA_EXPANDED: 8,\n    ULTRA_EXPANDED: 9\n};\nw.prototype.usWeightClasses = {\n    THIN: 100,\n    EXTRA_LIGHT: 200,\n    LIGHT: 300,\n    NORMAL: 400,\n    MEDIUM: 500,\n    SEMI_BOLD: 600,\n    BOLD: 700,\n    EXTRA_BOLD: 800,\n    BLACK: 900\n};\nfunction pa(e, r) {\n    var t = JSON.stringify(e), a = 256;\n    for(var n in r){\n        var s = parseInt(n);\n        if (!(!s || s < 256)) {\n            if (JSON.stringify(r[n]) === t) return s;\n            a <= s && (a = s + 1);\n        }\n    }\n    return r[a] = e, a;\n}\nfunction io(e, r, t) {\n    var a = pa(r.name, t);\n    return [\n        {\n            name: \"tag_\" + e,\n            type: \"TAG\",\n            value: r.tag\n        },\n        {\n            name: \"minValue_\" + e,\n            type: \"FIXED\",\n            value: r.minValue << 16\n        },\n        {\n            name: \"defaultValue_\" + e,\n            type: \"FIXED\",\n            value: r.defaultValue << 16\n        },\n        {\n            name: \"maxValue_\" + e,\n            type: \"FIXED\",\n            value: r.maxValue << 16\n        },\n        {\n            name: \"flags_\" + e,\n            type: \"USHORT\",\n            value: 0\n        },\n        {\n            name: \"nameID_\" + e,\n            type: \"USHORT\",\n            value: a\n        }\n    ];\n}\nfunction oo(e, r, t) {\n    var a = {}, n = new k.Parser(e, r);\n    return a.tag = n.parseTag(), a.minValue = n.parseFixed(), a.defaultValue = n.parseFixed(), a.maxValue = n.parseFixed(), n.skip(\"uShort\", 1), a.name = t[n.parseUShort()] || {}, a;\n}\nfunction uo(e, r, t, a) {\n    for(var n = pa(r.name, a), s = [\n        {\n            name: \"nameID_\" + e,\n            type: \"USHORT\",\n            value: n\n        },\n        {\n            name: \"flags_\" + e,\n            type: \"USHORT\",\n            value: 0\n        }\n    ], i = 0; i < t.length; ++i){\n        var u = t[i].tag;\n        s.push({\n            name: \"axis_\" + e + \" \" + u,\n            type: \"FIXED\",\n            value: r.coordinates[u] << 16\n        });\n    }\n    return s;\n}\nfunction lo(e, r, t, a) {\n    var n = {}, s = new k.Parser(e, r);\n    n.name = a[s.parseUShort()] || {}, s.skip(\"uShort\", 1), n.coordinates = {};\n    for(var i = 0; i < t.length; ++i)n.coordinates[t[i].tag] = s.parseFixed();\n    return n;\n}\nfunction fo(e, r) {\n    var t = new b.Table(\"fvar\", [\n        {\n            name: \"version\",\n            type: \"ULONG\",\n            value: 65536\n        },\n        {\n            name: \"offsetToData\",\n            type: \"USHORT\",\n            value: 0\n        },\n        {\n            name: \"countSizePairs\",\n            type: \"USHORT\",\n            value: 2\n        },\n        {\n            name: \"axisCount\",\n            type: \"USHORT\",\n            value: e.axes.length\n        },\n        {\n            name: \"axisSize\",\n            type: \"USHORT\",\n            value: 20\n        },\n        {\n            name: \"instanceCount\",\n            type: \"USHORT\",\n            value: e.instances.length\n        },\n        {\n            name: \"instanceSize\",\n            type: \"USHORT\",\n            value: 4 + e.axes.length * 4\n        }\n    ]);\n    t.offsetToData = t.sizeOf();\n    for(var a = 0; a < e.axes.length; a++)t.fields = t.fields.concat(io(a, e.axes[a], r));\n    for(var n = 0; n < e.instances.length; n++)t.fields = t.fields.concat(uo(n, e.instances[n], e.axes, r));\n    return t;\n}\nfunction po(e, r, t) {\n    var a = new k.Parser(e, r), n = a.parseULong();\n    U.argument(n === 65536, \"Unsupported fvar table version.\");\n    var s = a.parseOffset16();\n    a.skip(\"uShort\", 1);\n    for(var i = a.parseUShort(), u = a.parseUShort(), o = a.parseUShort(), l = a.parseUShort(), f = [], h = 0; h < i; h++)f.push(oo(e, r + s + h * u, t));\n    for(var p = [], c = r + s + i * u, d = 0; d < o; d++)p.push(lo(e, c + d * l, f, t));\n    return {\n        axes: f,\n        instances: p\n    };\n}\nvar ho = {\n    make: fo,\n    parse: po\n}, co = function() {\n    return {\n        coverage: this.parsePointer(v.coverage),\n        attachPoints: this.parseList(v.pointer(v.uShortList))\n    };\n}, vo = function() {\n    var e = this.parseUShort();\n    if (U.argument(e === 1 || e === 2 || e === 3, \"Unsupported CaretValue table version.\"), e === 1) return {\n        coordinate: this.parseShort()\n    };\n    if (e === 2) return {\n        pointindex: this.parseShort()\n    };\n    if (e === 3) return {\n        coordinate: this.parseShort()\n    };\n}, go = function() {\n    return this.parseList(v.pointer(vo));\n}, mo = function() {\n    return {\n        coverage: this.parsePointer(v.coverage),\n        ligGlyphs: this.parseList(v.pointer(go))\n    };\n}, yo = function() {\n    return this.parseUShort(), this.parseList(v.pointer(v.coverage));\n};\nfunction xo(e, r) {\n    r = r || 0;\n    var t = new v(e, r), a = t.parseVersion(1);\n    U.argument(a === 1 || a === 1.2 || a === 1.3, \"Unsupported GDEF table version.\");\n    var n = {\n        version: a,\n        classDef: t.parsePointer(v.classDef),\n        attachList: t.parsePointer(co),\n        ligCaretList: t.parsePointer(mo),\n        markAttachClassDef: t.parsePointer(v.classDef)\n    };\n    return a >= 1.2 && (n.markGlyphSets = t.parsePointer(yo)), n;\n}\nvar bo = {\n    parse: xo\n}, te = new Array(10);\nte[1] = function() {\n    var r = this.offset + this.relativeOffset, t = this.parseUShort();\n    if (t === 1) return {\n        posFormat: 1,\n        coverage: this.parsePointer(v.coverage),\n        value: this.parseValueRecord()\n    };\n    if (t === 2) return {\n        posFormat: 2,\n        coverage: this.parsePointer(v.coverage),\n        values: this.parseValueRecordList()\n    };\n    U.assert(!1, \"0x\" + r.toString(16) + \": GPOS lookup type 1 format must be 1 or 2.\");\n};\nte[2] = function() {\n    var r = this.offset + this.relativeOffset, t = this.parseUShort();\n    U.assert(t === 1 || t === 2, \"0x\" + r.toString(16) + \": GPOS lookup type 2 format must be 1 or 2.\");\n    var a = this.parsePointer(v.coverage), n = this.parseUShort(), s = this.parseUShort();\n    if (t === 1) return {\n        posFormat: t,\n        coverage: a,\n        valueFormat1: n,\n        valueFormat2: s,\n        pairSets: this.parseList(v.pointer(v.list(function() {\n            return {\n                secondGlyph: this.parseUShort(),\n                value1: this.parseValueRecord(n),\n                value2: this.parseValueRecord(s)\n            };\n        })))\n    };\n    if (t === 2) {\n        var i = this.parsePointer(v.classDef), u = this.parsePointer(v.classDef), o = this.parseUShort(), l = this.parseUShort();\n        return {\n            posFormat: t,\n            coverage: a,\n            valueFormat1: n,\n            valueFormat2: s,\n            classDef1: i,\n            classDef2: u,\n            class1Count: o,\n            class2Count: l,\n            classRecords: this.parseList(o, v.list(l, function() {\n                return {\n                    value1: this.parseValueRecord(n),\n                    value2: this.parseValueRecord(s)\n                };\n            }))\n        };\n    }\n};\nte[3] = function() {\n    return {\n        error: \"GPOS Lookup 3 not supported\"\n    };\n};\nte[4] = function() {\n    return {\n        error: \"GPOS Lookup 4 not supported\"\n    };\n};\nte[5] = function() {\n    return {\n        error: \"GPOS Lookup 5 not supported\"\n    };\n};\nte[6] = function() {\n    return {\n        error: \"GPOS Lookup 6 not supported\"\n    };\n};\nte[7] = function() {\n    return {\n        error: \"GPOS Lookup 7 not supported\"\n    };\n};\nte[8] = function() {\n    return {\n        error: \"GPOS Lookup 8 not supported\"\n    };\n};\nte[9] = function() {\n    return {\n        error: \"GPOS Lookup 9 not supported\"\n    };\n};\nfunction So(e, r) {\n    r = r || 0;\n    var t = new v(e, r), a = t.parseVersion(1);\n    return U.argument(a === 1 || a === 1.1, \"Unsupported GPOS table version \" + a), a === 1 ? {\n        version: a,\n        scripts: t.parseScriptList(),\n        features: t.parseFeatureList(),\n        lookups: t.parseLookupList(te)\n    } : {\n        version: a,\n        scripts: t.parseScriptList(),\n        features: t.parseFeatureList(),\n        lookups: t.parseLookupList(te),\n        variations: t.parseFeatureVariationsList()\n    };\n}\n_c150 = So;\nvar To = new Array(10);\nfunction ko(e) {\n    return new b.Table(\"GPOS\", [\n        {\n            name: \"version\",\n            type: \"ULONG\",\n            value: 65536\n        },\n        {\n            name: \"scripts\",\n            type: \"TABLE\",\n            value: new b.ScriptList(e.scripts)\n        },\n        {\n            name: \"features\",\n            type: \"TABLE\",\n            value: new b.FeatureList(e.features)\n        },\n        {\n            name: \"lookups\",\n            type: \"TABLE\",\n            value: new b.LookupList(e.lookups, To)\n        }\n    ]);\n}\nvar Fo = {\n    parse: So,\n    make: ko\n};\nfunction Uo(e) {\n    var r = {};\n    e.skip(\"uShort\");\n    var t = e.parseUShort();\n    U.argument(t === 0, \"Unsupported kern sub-table version.\"), e.skip(\"uShort\", 2);\n    var a = e.parseUShort();\n    e.skip(\"uShort\", 3);\n    for(var n = 0; n < a; n += 1){\n        var s = e.parseUShort(), i = e.parseUShort(), u = e.parseShort();\n        r[s + \",\" + i] = u;\n    }\n    return r;\n}\n_c151 = Uo;\nfunction Co(e) {\n    var r = {};\n    e.skip(\"uShort\");\n    var t = e.parseULong();\n    t > 1 && console.warn(\"Only the first kern subtable is supported.\"), e.skip(\"uLong\");\n    var a = e.parseUShort(), n = a & 255;\n    if (e.skip(\"uShort\"), n === 0) {\n        var s = e.parseUShort();\n        e.skip(\"uShort\", 3);\n        for(var i = 0; i < s; i += 1){\n            var u = e.parseUShort(), o = e.parseUShort(), l = e.parseShort();\n            r[u + \",\" + o] = l;\n        }\n    }\n    return r;\n}\n_c152 = Co;\nfunction Eo(e, r) {\n    var t = new k.Parser(e, r), a = t.parseUShort();\n    if (a === 0) return Uo(t);\n    if (a === 1) return Co(t);\n    throw new Error(\"Unsupported kern table version (\" + a + \").\");\n}\n_c153 = Eo;\nvar Oo = {\n    parse: Eo\n};\nfunction Lo(e, r, t, a) {\n    for(var n = new k.Parser(e, r), s = a ? n.parseUShort : n.parseULong, i = [], u = 0; u < t + 1; u += 1){\n        var o = s.call(n);\n        a && (o *= 2), i.push(o);\n    }\n    return i;\n}\n_c154 = Lo;\nvar Ro = {\n    parse: Lo\n};\nfunction wo(e, r) {\n    var t = Ne();\n    t.readFile(e, function(a, n) {\n        if (a) return r(a.message);\n        r(null, $t(n));\n    });\n}\nfunction Do(e, r) {\n    var t = new XMLHttpRequest;\n    t.open(\"get\", e, !0), t.responseType = \"arraybuffer\", t.onload = function() {\n        return t.response ? r(null, t.response) : r(\"Font could not be loaded: \" + t.statusText);\n    }, t.onerror = function() {\n        r(\"Font could not be loaded\");\n    }, t.send();\n}\n_c155 = Do;\nfunction yt(e, r) {\n    for(var t = [], a = 12, n = 0; n < r; n += 1){\n        var s = k.getTag(e, a), i = k.getULong(e, a + 4), u = k.getULong(e, a + 8), o = k.getULong(e, a + 12);\n        t.push({\n            tag: s,\n            checksum: i,\n            offset: u,\n            length: o,\n            compression: !1\n        }), a += 16;\n    }\n    return t;\n}\nfunction Ao(e, r) {\n    for(var t = [], a = 44, n = 0; n < r; n += 1){\n        var s = k.getTag(e, a), i = k.getULong(e, a + 4), u = k.getULong(e, a + 8), o = k.getULong(e, a + 12), l = void 0;\n        u < o ? l = \"WOFF\" : l = !1, t.push({\n            tag: s,\n            offset: i,\n            compression: l,\n            compressedLength: u,\n            length: o\n        }), a += 20;\n    }\n    return t;\n}\n_c156 = Ao;\nfunction I(e, r) {\n    if (r.compression === \"WOFF\") {\n        var t = new Uint8Array(e.buffer, r.offset + 2, r.compressedLength - 2), a = new Uint8Array(r.length);\n        if (Ta(t, a), a.byteLength !== r.length) throw new Error(\"Decompression error: \" + r.tag + \" decompressed length doesn't match recorded length\");\n        var n = new DataView(a.buffer, 0);\n        return {\n            data: n,\n            offset: 0\n        };\n    } else return {\n        data: e,\n        offset: r.offset\n    };\n}\n_c157 = I;\nfunction Dr(e, r) {\n    r = r !== null && r !== void 0 ? r : {};\n    var t, a, n = new w({\n        empty: !0\n    }), s = new DataView(e, 0), i, u = [], o = k.getTag(s, 0);\n    if (o === String.fromCharCode(0, 1, 0, 0) || o === \"true\" || o === \"typ1\") n.outlinesFormat = \"truetype\", i = k.getUShort(s, 4), u = yt(s, i);\n    else if (o === \"OTTO\") n.outlinesFormat = \"cff\", i = k.getUShort(s, 4), u = yt(s, i);\n    else if (o === \"wOFF\") {\n        var l = k.getTag(s, 4);\n        if (l === String.fromCharCode(0, 1, 0, 0)) n.outlinesFormat = \"truetype\";\n        else if (l === \"OTTO\") n.outlinesFormat = \"cff\";\n        else throw new Error(\"Unsupported OpenType flavor \" + o);\n        i = k.getUShort(s, 12), u = Ao(s, i);\n    } else throw new Error(\"Unsupported OpenType signature \" + o);\n    for(var f, h, p, c, d, x, m, y, C, S, R, O, D = 0; D < i; D += 1){\n        var L = u[D], F = void 0;\n        switch(L.tag){\n            case \"cmap\":\n                F = I(s, L), n.tables.cmap = Et.parse(F.data, F.offset), n.encoding = new Lt(n.tables.cmap);\n                break;\n            case \"cvt \":\n                F = I(s, L), O = new k.Parser(F.data, F.offset), n.tables.cvt = O.parseShortList(L.length / 2);\n                break;\n            case \"fvar\":\n                h = L;\n                break;\n            case \"fpgm\":\n                F = I(s, L), O = new k.Parser(F.data, F.offset), n.tables.fpgm = O.parseByteList(L.length);\n                break;\n            case \"head\":\n                F = I(s, L), n.tables.head = Nt.parse(F.data, F.offset), n.unitsPerEm = n.tables.head.unitsPerEm, t = n.tables.head.indexToLocFormat;\n                break;\n            case \"hhea\":\n                F = I(s, L), n.tables.hhea = Ht.parse(F.data, F.offset), n.ascender = n.tables.hhea.ascender, n.descender = n.tables.hhea.descender, n.numberOfHMetrics = n.tables.hhea.numberOfHMetrics;\n                break;\n            case \"hmtx\":\n                m = L;\n                break;\n            case \"ltag\":\n                F = I(s, L), a = Wt.parse(F.data, F.offset);\n                break;\n            case \"maxp\":\n                F = I(s, L), n.tables.maxp = _t.parse(F.data, F.offset), n.numGlyphs = n.tables.maxp.numGlyphs;\n                break;\n            case \"name\":\n                S = L;\n                break;\n            case \"OS/2\":\n                F = I(s, L), n.tables.os2 = xr.parse(F.data, F.offset);\n                break;\n            case \"post\":\n                F = I(s, L), n.tables.post = Qt.parse(F.data, F.offset), n.glyphNames = new Ur(n.tables.post);\n                break;\n            case \"prep\":\n                F = I(s, L), O = new k.Parser(F.data, F.offset), n.tables.prep = O.parseByteList(L.length);\n                break;\n            case \"glyf\":\n                p = L;\n                break;\n            case \"loca\":\n                C = L;\n                break;\n            case \"CFF \":\n                f = L;\n                break;\n            case \"kern\":\n                y = L;\n                break;\n            case \"GDEF\":\n                c = L;\n                break;\n            case \"GPOS\":\n                d = L;\n                break;\n            case \"GSUB\":\n                x = L;\n                break;\n            case \"meta\":\n                R = L;\n                break;\n        }\n    }\n    var G = I(s, S);\n    if (n.tables.name = Zt.parse(G.data, G.offset, a), n.names = n.tables.name, p && C) {\n        var Y = t === 0, Z = I(s, C), j = Ro.parse(Z.data, Z.offset, n.numGlyphs, Y), $ = I(s, p);\n        n.glyphs = aa.parse($.data, $.offset, j, n, r);\n    } else if (f) {\n        var M = I(s, f);\n        Gt.parse(M.data, M.offset, n, r);\n    } else throw new Error(\"Font doesn't contain TrueType or CFF outlines.\");\n    var N = I(s, m);\n    if (zt.parse(n, N.data, N.offset, n.numberOfHMetrics, n.numGlyphs, n.glyphs, r), _a(n, r), y) {\n        var W = I(s, y);\n        n.kerningPairs = Oo.parse(W.data, W.offset);\n    } else n.kerningPairs = {};\n    if (c) {\n        var _ = I(s, c);\n        n.tables.gdef = bo.parse(_.data, _.offset);\n    }\n    if (d) {\n        var V = I(s, d);\n        n.tables.gpos = Fo.parse(V.data, V.offset), n.position.init();\n    }\n    if (x) {\n        var H = I(s, x);\n        n.tables.gsub = Kt.parse(H.data, H.offset);\n    }\n    if (h) {\n        var X = I(s, h);\n        n.tables.fvar = ho.parse(X.data, X.offset, n.names);\n    }\n    if (R) {\n        var A = I(s, R);\n        n.tables.meta = Jt.parse(A.data, A.offset), n.metas = n.tables.meta;\n    }\n    return n;\n}\n_c158 = Dr;\nfunction Bo(e, r, t) {\n    t = t !== null && t !== void 0 ? t : {};\n    var a = \"object\" > \"u\", n = a && !t.isUrl ? wo : Do;\n    return new Promise(function(s, i) {\n        n(e, function(u, o) {\n            if (u) {\n                if (r) return r(u);\n                i(u);\n            }\n            var l;\n            try {\n                l = Dr(o, t);\n            } catch (f) {\n                if (r) return r(f, null);\n                i(f);\n            }\n            if (r) return r(null, l);\n            s(l);\n        });\n    });\n}\n_c159 = Bo;\nfunction Io(e, r) {\n    var t = Ne(), a = t.readFileSync(e);\n    return Dr($t(a), r);\n}\n_c160 = Io;\nvar Mo = Object.freeze({\n    __proto__: null,\n    Font: w,\n    Glyph: Q,\n    Path: P,\n    BoundingBox: pe,\n    _parse: k,\n    parse: Dr,\n    load: Bo,\n    loadSync: Io\n}), Ho = Mo;\n\nvar _c, _c1, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10, _c11, _c12, _c13, _c14, _c15, _c16, _c17, _c18, _c19, _c20, _c21, _c22, _c23, _c24, _c25, _c26, _c27, _c28, _c29, _c30, _c31, _c32, _c33, _c34, _c35, _c36, _c37, _c38, _c39, _c40, _c41, _c42, _c43, _c44, _c45, _c46, _c47, _c48, _c49, _c50, _c51, _c52, _c53, _c54, _c55, _c56, _c57, _c58, _c59, _c60, _c61, _c62, _c63, _c64, _c65, _c66, _c67, _c68, _c69, _c70, _c71, _c72, _c73, _c74, _c75, _c76, _c77, _c78, _c79, _c80, _c81, _c82, _c83, _c84, _c85, _c86, _c87, _c88, _c89, _c90, _c91, _c92, _c93, _c94, _c95, _c96, _c97, _c98, _c99, _c100, _c101, _c102, _c103, _c104, _c105, _c106, _c107, _c108, _c109, _c110, _c111, _c112, _c113, _c114, _c115, _c116, _c117, _c118, _c119, _c120, _c121, _c122, _c123, _c124, _c125, _c126, _c127, _c128, _c129, _c130, _c131, _c132, _c133, _c134, _c135, _c136, _c137, _c138, _c139, _c140, _c141, _c142, _c143, _c144, _c145, _c146, _c147, _c148, _c149, _c150, _c151, _c152, _c153, _c154, _c155, _c156, _c157, _c158, _c159, _c160;\n$RefreshReg$(_c, \"Ne$va\");\n$RefreshReg$(_c1, \"Ne\");\n$RefreshReg$(_c2, \"Le\");\n$RefreshReg$(_c3, \"Ft\");\n$RefreshReg$(_c4, \"Mr\");\n$RefreshReg$(_c5, \"Sa\");\n$RefreshReg$(_c6, \"Te\");\n$RefreshReg$(_c7, \"P\");\n$RefreshReg$(_c8, \"Ut\");\n$RefreshReg$(_c9, \"Pr\");\n$RefreshReg$(_c10, \"Fa\");\n$RefreshReg$(_c11, \"Ua\");\n$RefreshReg$(_c12, \"Ca\");\n$RefreshReg$(_c13, \"Re\");\n$RefreshReg$(_c14, \"Ye\");\n$RefreshReg$(_c15, \"Ze\");\n$RefreshReg$(_c16, \"Qe\");\n$RefreshReg$(_c17, \"Ke\");\n$RefreshReg$(_c18, \"Hr\");\n$RefreshReg$(_c19, \"Je\");\n$RefreshReg$(_c20, \"Ea\");\n$RefreshReg$(_c21, \"Fr\");\n$RefreshReg$(_c22, \"Ct\");\n$RefreshReg$(_c23, \"Oa\");\n$RefreshReg$(_c24, \"La\");\n$RefreshReg$(_c25, \"Ra\");\n$RefreshReg$(_c26, \"Aa\");\n$RefreshReg$(_c27, \"Ba\");\n$RefreshReg$(_c28, \"Ia\");\n$RefreshReg$(_c29, \"Ma\");\n$RefreshReg$(_c30, \"Pa\");\n$RefreshReg$(_c31, \"Ga\");\n$RefreshReg$(_c32, \"Ot\");\n$RefreshReg$(_c33, \"Lt\");\n$RefreshReg$(_c34, \"Ur\");\n$RefreshReg$(_c35, \"Wa\");\n$RefreshReg$(_c36, \"Va\");\n$RefreshReg$(_c37, \"Q\");\n$RefreshReg$(_c38, \"Cr\");\n$RefreshReg$(_c39, \"Xa\");\n$RefreshReg$(_c40, \"Ya\");\n$RefreshReg$(_c41, \"Za\");\n$RefreshReg$(_c42, \"Rt\");\n$RefreshReg$(_c43, \"Qa\");\n$RefreshReg$(_c44, \"Ka\");\n$RefreshReg$(_c45, \"Ja\");\n$RefreshReg$(_c46, \"Oe\");\n$RefreshReg$(_c47, \"Dt\");\n$RefreshReg$(_c48, \"It\");\n$RefreshReg$(_c49, \"Wr\");\n$RefreshReg$(_c50, \"Mt\");\n$RefreshReg$(_c51, \"Pt\");\n$RefreshReg$(_c52, \"Vr\");\n$RefreshReg$(_c53, \"Sn\");\n$RefreshReg$(_c54, \"Tn\");\n$RefreshReg$(_c55, \"Fn\");\n$RefreshReg$(_c56, \"Un\");\n$RefreshReg$(_c57, \"Cn\");\n$RefreshReg$(_c58, \"En\");\n$RefreshReg$(_c59, \"Ln\");\n$RefreshReg$(_c60, \"Yt\");\n$RefreshReg$(_c61, \"Dn\");\n$RefreshReg$(_c62, \"Xr\");\n$RefreshReg$(_c63, \"An\");\n$RefreshReg$(_c64, \"Yr\");\n$RefreshReg$(_c65, \"Bn\");\n$RefreshReg$(_c66, \"In\");\n$RefreshReg$(_c67, \"Mn\");\n$RefreshReg$(_c68, \"Pn\");\n$RefreshReg$(_c69, \"Gn\");\n$RefreshReg$(_c70, \"Nn\");\n$RefreshReg$(_c71, \"Hn\");\n$RefreshReg$(_c72, \"Wn\");\n$RefreshReg$(_c73, \"Zr\");\n$RefreshReg$(_c74, \"Er\");\n$RefreshReg$(_c75, \"Qr\");\n$RefreshReg$(_c76, \"Kr\");\n$RefreshReg$(_c77, \"Vn\");\n$RefreshReg$(_c78, \"Jr\");\n$RefreshReg$(_c79, \"Ae\");\n$RefreshReg$(_c80, \"Be\");\n$RefreshReg$(_c81, \"K\");\n$RefreshReg$(_c82, \"Yn\");\n$RefreshReg$(_c83, \"Or\");\n$RefreshReg$(_c84, \"Zn\");\n$RefreshReg$(_c85, \"Qn\");\n$RefreshReg$(_c86, \"Ee\");\n$RefreshReg$(_c87, \"Kn\");\n$RefreshReg$(_c88, \"Jn\");\n$RefreshReg$(_c89, \"Ie\");\n$RefreshReg$(_c90, \"Me\");\n$RefreshReg$(_c91, \"Ss\");\n$RefreshReg$(_c92, \"Ts\");\n$RefreshReg$(_c93, \"Fs\");\n$RefreshReg$(_c94, \"Us\");\n$RefreshReg$(_c95, \"Cs\");\n$RefreshReg$(_c96, \"Es\");\n$RefreshReg$(_c97, \"Os\");\n$RefreshReg$(_c98, \"Ls\");\n$RefreshReg$(_c99, \"Rs\");\n$RefreshReg$(_c100, \"Ds\");\n$RefreshReg$(_c101, \"As\");\n$RefreshReg$(_c102, \"Bs\");\n$RefreshReg$(_c103, \"Is\");\n$RefreshReg$(_c104, \"Ms\");\n$RefreshReg$(_c105, \"Ps\");\n$RefreshReg$(_c106, \"Gs\");\n$RefreshReg$(_c107, \"Ns\");\n$RefreshReg$(_c108, \"Hs\");\n$RefreshReg$(_c109, \"Ws\");\n$RefreshReg$(_c110, \"Vs\");\n$RefreshReg$(_c111, \"Xs\");\n$RefreshReg$(_c112, \"Ys\");\n$RefreshReg$(_c113, \"Zs\");\n$RefreshReg$(_c114, \"Qs\");\n$RefreshReg$(_c115, \"Ks\");\n$RefreshReg$(_c116, \"Js\");\n$RefreshReg$(_c117, \"Ve\");\n$RefreshReg$(_c118, \"Si\");\n$RefreshReg$(_c119, \"Ti\");\n$RefreshReg$(_c120, \"Fi\");\n$RefreshReg$(_c121, \"Ui\");\n$RefreshReg$(_c122, \"Ci\");\n$RefreshReg$(_c123, \"Ei\");\n$RefreshReg$(_c124, \"Oi\");\n$RefreshReg$(_c125, \"T\");\n$RefreshReg$(_c126, \"Ce\");\n$RefreshReg$(_c127, \"Lr\");\n$RefreshReg$(_c128, \"Li\");\n$RefreshReg$(_c129, \"Ri\");\n$RefreshReg$(_c130, \"B\");\n$RefreshReg$(_c131, \"Xe\");\n$RefreshReg$(_c132, \"J\");\n$RefreshReg$(_c133, \"Pe\");\n$RefreshReg$(_c134, \"Di\");\n$RefreshReg$(_c135, \"Ai\");\n$RefreshReg$(_c136, \"Bi\");\n$RefreshReg$(_c137, \"Ii\");\n$RefreshReg$(_c138, \"Mi\");\n$RefreshReg$(_c139, \"Pi\");\n$RefreshReg$(_c140, \"Gi\");\n$RefreshReg$(_c141, \"Hi\");\n$RefreshReg$(_c142, \"Vi\");\n$RefreshReg$(_c143, \"Xi\");\n$RefreshReg$(_c144, \"Rr\");\n$RefreshReg$(_c145, \"Yi\");\n$RefreshReg$(_c146, \"Zi\");\n$RefreshReg$(_c147, \"Qi\");\n$RefreshReg$(_c148, \"Ki\");\n$RefreshReg$(_c149, \"Ji\");\n$RefreshReg$(_c150, \"So\");\n$RefreshReg$(_c151, \"Uo\");\n$RefreshReg$(_c152, \"Co\");\n$RefreshReg$(_c153, \"Eo\");\n$RefreshReg$(_c154, \"Lo\");\n$RefreshReg$(_c155, \"Do\");\n$RefreshReg$(_c156, \"Ao\");\n$RefreshReg$(_c157, \"I\");\n$RefreshReg$(_c158, \"Dr\");\n$RefreshReg$(_c159, \"Bo\");\n$RefreshReg$(_c160, \"Io\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@splinetool/runtime/build/opentype.js\n"));

/***/ })

}]);