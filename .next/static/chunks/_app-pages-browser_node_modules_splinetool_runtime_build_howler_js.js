"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["_app-pages-browser_node_modules_splinetool_runtime_build_howler_js"],{

/***/ "(app-pages-browser)/./node_modules/@splinetool/runtime/build/howler.js":
/*!**********************************************************!*\
  !*** ./node_modules/@splinetool/runtime/build/howler.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/*! howler.js v2.2.3 | (c) 2013-2020, James Simpson of GoldFire Studios | MIT License | howlerjs.com */ !function() {\n    \"use strict\";\n    var e = function() {\n        this.init();\n    };\n    e.prototype = {\n        init: function() {\n            var e = this || n;\n            return e._counter = 1e3, e._html5AudioPool = [], e.html5PoolSize = 10, e._codecs = {}, e._howls = [], e._muted = !1, e._volume = 1, e._canPlayEvent = \"canplaythrough\", e._navigator =  true && window.navigator ? window.navigator : null, e.masterGain = null, e.noAudio = !1, e.usingWebAudio = !0, e.autoSuspend = !0, e.ctx = null, e.autoUnlock = !0, e._setup(), e;\n        },\n        volume: function(e) {\n            var o = this || n;\n            if (e = parseFloat(e), o.ctx || _(), void 0 !== e && e >= 0 && e <= 1) {\n                if (o._volume = e, o._muted) return o;\n                o.usingWebAudio && o.masterGain.gain.setValueAtTime(e, n.ctx.currentTime);\n                for(var t = 0; t < o._howls.length; t++)if (!o._howls[t]._webAudio) for(var r = o._howls[t]._getSoundIds(), a = 0; a < r.length; a++){\n                    var u = o._howls[t]._soundById(r[a]);\n                    u && u._node && (u._node.volume = u._volume * e);\n                }\n                return o;\n            }\n            return o._volume;\n        },\n        mute: function(e) {\n            var o = this || n;\n            o.ctx || _(), o._muted = e, o.usingWebAudio && o.masterGain.gain.setValueAtTime(e ? 0 : o._volume, n.ctx.currentTime);\n            for(var t = 0; t < o._howls.length; t++)if (!o._howls[t]._webAudio) for(var r = o._howls[t]._getSoundIds(), a = 0; a < r.length; a++){\n                var u = o._howls[t]._soundById(r[a]);\n                u && u._node && (u._node.muted = !!e || u._muted);\n            }\n            return o;\n        },\n        stop: function() {\n            for(var e = this || n, o = 0; o < e._howls.length; o++)e._howls[o].stop();\n            return e;\n        },\n        unload: function() {\n            for(var e = this || n, o = e._howls.length - 1; o >= 0; o--)e._howls[o].unload();\n            return e.usingWebAudio && e.ctx && void 0 !== e.ctx.close && (e.ctx.close(), e.ctx = null, _()), e;\n        },\n        codecs: function(e) {\n            return (this || n)._codecs[e.replace(/^x-/, \"\")];\n        },\n        _setup: function() {\n            var e = this || n;\n            if (e.state = e.ctx ? e.ctx.state || \"suspended\" : \"suspended\", e._autoSuspend(), !e.usingWebAudio) if (\"undefined\" != typeof Audio) try {\n                var o = new Audio;\n                void 0 === o.oncanplaythrough && (e._canPlayEvent = \"canplay\");\n            } catch (n) {\n                e.noAudio = !0;\n            }\n            else e.noAudio = !0;\n            try {\n                var o = new Audio;\n                o.muted && (e.noAudio = !0);\n            } catch (e) {}\n            return e.noAudio || e._setupCodecs(), e;\n        },\n        _setupCodecs: function() {\n            var e = this || n, o = null;\n            try {\n                o = \"undefined\" != typeof Audio ? new Audio : null;\n            } catch (n) {\n                return e;\n            }\n            if (!o || \"function\" != typeof o.canPlayType) return e;\n            var t = o.canPlayType(\"audio/mpeg;\").replace(/^no$/, \"\"), r = e._navigator ? e._navigator.userAgent : \"\", a = r.match(/OPR\\/([0-6].)/g), u = a && parseInt(a[0].split(\"/\")[1], 10) < 33, d = -1 !== r.indexOf(\"Safari\") && -1 === r.indexOf(\"Chrome\"), i = r.match(/Version\\/(.*?) /), _ = d && i && parseInt(i[1], 10) < 15;\n            return e._codecs = {\n                mp3: !(u || !t && !o.canPlayType(\"audio/mp3;\").replace(/^no$/, \"\")),\n                mpeg: !!t,\n                opus: !!o.canPlayType('audio/ogg; codecs=\"opus\"').replace(/^no$/, \"\"),\n                ogg: !!o.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/^no$/, \"\"),\n                oga: !!o.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/^no$/, \"\"),\n                wav: !!(o.canPlayType('audio/wav; codecs=\"1\"') || o.canPlayType(\"audio/wav\")).replace(/^no$/, \"\"),\n                aac: !!o.canPlayType(\"audio/aac;\").replace(/^no$/, \"\"),\n                caf: !!o.canPlayType(\"audio/x-caf;\").replace(/^no$/, \"\"),\n                m4a: !!(o.canPlayType(\"audio/x-m4a;\") || o.canPlayType(\"audio/m4a;\") || o.canPlayType(\"audio/aac;\")).replace(/^no$/, \"\"),\n                m4b: !!(o.canPlayType(\"audio/x-m4b;\") || o.canPlayType(\"audio/m4b;\") || o.canPlayType(\"audio/aac;\")).replace(/^no$/, \"\"),\n                mp4: !!(o.canPlayType(\"audio/x-mp4;\") || o.canPlayType(\"audio/mp4;\") || o.canPlayType(\"audio/aac;\")).replace(/^no$/, \"\"),\n                weba: !(_ || !o.canPlayType('audio/webm; codecs=\"vorbis\"').replace(/^no$/, \"\")),\n                webm: !(_ || !o.canPlayType('audio/webm; codecs=\"vorbis\"').replace(/^no$/, \"\")),\n                dolby: !!o.canPlayType('audio/mp4; codecs=\"ec-3\"').replace(/^no$/, \"\"),\n                flac: !!(o.canPlayType(\"audio/x-flac;\") || o.canPlayType(\"audio/flac;\")).replace(/^no$/, \"\")\n            }, e;\n        },\n        _unlockAudio: function() {\n            var e = this || n;\n            if (!e._audioUnlocked && e.ctx) {\n                e._audioUnlocked = !1, e.autoUnlock = !1, e._mobileUnloaded || 44100 === e.ctx.sampleRate || (e._mobileUnloaded = !0, e.unload()), e._scratchBuffer = e.ctx.createBuffer(1, 1, 22050);\n                var o = function(n) {\n                    for(; e._html5AudioPool.length < e.html5PoolSize;)try {\n                        var t = new Audio;\n                        t._unlocked = !0, e._releaseHtml5Audio(t);\n                    } catch (n) {\n                        e.noAudio = !0;\n                        break;\n                    }\n                    for(var r = 0; r < e._howls.length; r++)if (!e._howls[r]._webAudio) for(var a = e._howls[r]._getSoundIds(), u = 0; u < a.length; u++){\n                        var d = e._howls[r]._soundById(a[u]);\n                        d && d._node && !d._node._unlocked && (d._node._unlocked = !0, d._node.load());\n                    }\n                    e._autoResume();\n                    var i = e.ctx.createBufferSource();\n                    i.buffer = e._scratchBuffer, i.connect(e.ctx.destination), void 0 === i.start ? i.noteOn(0) : i.start(0), \"function\" == typeof e.ctx.resume && e.ctx.resume(), i.onended = function() {\n                        i.disconnect(0), e._audioUnlocked = !0, document.removeEventListener(\"touchstart\", o, !0), document.removeEventListener(\"touchend\", o, !0), document.removeEventListener(\"click\", o, !0), document.removeEventListener(\"keydown\", o, !0);\n                        for(var n = 0; n < e._howls.length; n++)e._howls[n]._emit(\"unlock\");\n                    };\n                };\n                return document.addEventListener(\"touchstart\", o, !0), document.addEventListener(\"touchend\", o, !0), document.addEventListener(\"click\", o, !0), document.addEventListener(\"keydown\", o, !0), e;\n            }\n        },\n        _obtainHtml5Audio: function() {\n            var e = this || n;\n            if (e._html5AudioPool.length) return e._html5AudioPool.pop();\n            var o = (new Audio).play();\n            return o && \"undefined\" != typeof Promise && (o instanceof Promise || \"function\" == typeof o.then) && o.catch(function() {\n                console.warn(\"HTML5 Audio pool exhausted, returning potentially locked audio object.\");\n            }), new Audio;\n        },\n        _releaseHtml5Audio: function(e) {\n            var o = this || n;\n            return e._unlocked && o._html5AudioPool.push(e), o;\n        },\n        _autoSuspend: function() {\n            var e = this;\n            if (e.autoSuspend && e.ctx && void 0 !== e.ctx.suspend && n.usingWebAudio) {\n                for(var o = 0; o < e._howls.length; o++)if (e._howls[o]._webAudio) {\n                    for(var t = 0; t < e._howls[o]._sounds.length; t++)if (!e._howls[o]._sounds[t]._paused) return e;\n                }\n                return e._suspendTimer && clearTimeout(e._suspendTimer), e._suspendTimer = setTimeout(function() {\n                    if (e.autoSuspend) {\n                        e._suspendTimer = null, e.state = \"suspending\";\n                        var n = function() {\n                            e.state = \"suspended\", e._resumeAfterSuspend && (delete e._resumeAfterSuspend, e._autoResume());\n                        };\n                        e.ctx.suspend().then(n, n);\n                    }\n                }, 3e4), e;\n            }\n        },\n        _autoResume: function() {\n            var e = this;\n            if (e.ctx && void 0 !== e.ctx.resume && n.usingWebAudio) return \"running\" === e.state && \"interrupted\" !== e.ctx.state && e._suspendTimer ? (clearTimeout(e._suspendTimer), e._suspendTimer = null) : \"suspended\" === e.state || \"running\" === e.state && \"interrupted\" === e.ctx.state ? (e.ctx.resume().then(function() {\n                e.state = \"running\";\n                for(var n = 0; n < e._howls.length; n++)e._howls[n]._emit(\"resume\");\n            }), e._suspendTimer && (clearTimeout(e._suspendTimer), e._suspendTimer = null)) : \"suspending\" === e.state && (e._resumeAfterSuspend = !0), e;\n        }\n    };\n    var n = new e, o = function(e) {\n        var n = this;\n        if (!e.src || 0 === e.src.length) return void console.error(\"An array of source files must be passed with any new Howl.\");\n        n.init(e);\n    };\n    o.prototype = {\n        init: function(e) {\n            var o = this;\n            return n.ctx || _(), o._autoplay = e.autoplay || !1, o._format = \"string\" != typeof e.format ? e.format : [\n                e.format\n            ], o._html5 = e.html5 || !1, o._muted = e.mute || !1, o._loop = e.loop || !1, o._pool = e.pool || 5, o._preload = \"boolean\" != typeof e.preload && \"metadata\" !== e.preload || e.preload, o._rate = e.rate || 1, o._sprite = e.sprite || {}, o._src = \"string\" != typeof e.src ? e.src : [\n                e.src\n            ], o._volume = void 0 !== e.volume ? e.volume : 1, o._xhr = {\n                method: e.xhr && e.xhr.method ? e.xhr.method : \"GET\",\n                headers: e.xhr && e.xhr.headers ? e.xhr.headers : null,\n                withCredentials: !(!e.xhr || !e.xhr.withCredentials) && e.xhr.withCredentials\n            }, o._duration = 0, o._state = \"unloaded\", o._sounds = [], o._endTimers = {}, o._queue = [], o._playLock = !1, o._onend = e.onend ? [\n                {\n                    fn: e.onend\n                }\n            ] : [], o._onfade = e.onfade ? [\n                {\n                    fn: e.onfade\n                }\n            ] : [], o._onload = e.onload ? [\n                {\n                    fn: e.onload\n                }\n            ] : [], o._onloaderror = e.onloaderror ? [\n                {\n                    fn: e.onloaderror\n                }\n            ] : [], o._onplayerror = e.onplayerror ? [\n                {\n                    fn: e.onplayerror\n                }\n            ] : [], o._onpause = e.onpause ? [\n                {\n                    fn: e.onpause\n                }\n            ] : [], o._onplay = e.onplay ? [\n                {\n                    fn: e.onplay\n                }\n            ] : [], o._onstop = e.onstop ? [\n                {\n                    fn: e.onstop\n                }\n            ] : [], o._onmute = e.onmute ? [\n                {\n                    fn: e.onmute\n                }\n            ] : [], o._onvolume = e.onvolume ? [\n                {\n                    fn: e.onvolume\n                }\n            ] : [], o._onrate = e.onrate ? [\n                {\n                    fn: e.onrate\n                }\n            ] : [], o._onseek = e.onseek ? [\n                {\n                    fn: e.onseek\n                }\n            ] : [], o._onunlock = e.onunlock ? [\n                {\n                    fn: e.onunlock\n                }\n            ] : [], o._onresume = [], o._webAudio = n.usingWebAudio && !o._html5, void 0 !== n.ctx && n.ctx && n.autoUnlock && n._unlockAudio(), n._howls.push(o), o._autoplay && o._queue.push({\n                event: \"play\",\n                action: function() {\n                    o.play();\n                }\n            }), o._preload && \"none\" !== o._preload && o.load(), o;\n        },\n        load: function() {\n            var e = this, o = null;\n            if (n.noAudio) return void e._emit(\"loaderror\", null, \"No audio support.\");\n            \"string\" == typeof e._src && (e._src = [\n                e._src\n            ]);\n            for(var r = 0; r < e._src.length; r++){\n                var u, d;\n                if (e._format && e._format[r]) u = e._format[r];\n                else {\n                    if (\"string\" != typeof (d = e._src[r])) {\n                        e._emit(\"loaderror\", null, \"Non-string found in selected audio sources - ignoring.\");\n                        continue;\n                    }\n                    u = /^data:audio\\/([^;,]+);/i.exec(d), u || (u = /\\.([^.]+)$/.exec(d.split(\"?\", 1)[0])), u && (u = u[1].toLowerCase());\n                }\n                if (u || console.warn('No file extension was found. Consider using the \"format\" property or specify an extension.'), u && n.codecs(u)) {\n                    o = e._src[r];\n                    break;\n                }\n            }\n            return o ? (e._src = o, e._state = \"loading\", \"https:\" === window.location.protocol && \"http:\" === o.slice(0, 5) && (e._html5 = !0, e._webAudio = !1), new t(e), e._webAudio && a(e), e) : void e._emit(\"loaderror\", null, \"No codec support for selected audio sources.\");\n        },\n        play: function(e, o) {\n            var t = this, r = null;\n            if (\"number\" == typeof e) r = e, e = null;\n            else {\n                if (\"string\" == typeof e && \"loaded\" === t._state && !t._sprite[e]) return null;\n                if (void 0 === e && (e = \"__default\", !t._playLock)) {\n                    for(var a = 0, u = 0; u < t._sounds.length; u++)t._sounds[u]._paused && !t._sounds[u]._ended && (a++, r = t._sounds[u]._id);\n                    1 === a ? e = null : r = null;\n                }\n            }\n            var d = r ? t._soundById(r) : t._inactiveSound();\n            if (!d) return null;\n            if (r && !e && (e = d._sprite || \"__default\"), \"loaded\" !== t._state) {\n                d._sprite = e, d._ended = !1;\n                var i = d._id;\n                return t._queue.push({\n                    event: \"play\",\n                    action: function() {\n                        t.play(i);\n                    }\n                }), i;\n            }\n            if (r && !d._paused) return o || t._loadQueue(\"play\"), d._id;\n            t._webAudio && n._autoResume();\n            var _ = Math.max(0, d._seek > 0 ? d._seek : t._sprite[e][0] / 1e3), s = Math.max(0, (t._sprite[e][0] + t._sprite[e][1]) / 1e3 - _), l = 1e3 * s / Math.abs(d._rate), c = t._sprite[e][0] / 1e3, f = (t._sprite[e][0] + t._sprite[e][1]) / 1e3;\n            d._sprite = e, d._ended = !1;\n            var p = function() {\n                d._paused = !1, d._seek = _, d._start = c, d._stop = f, d._loop = !(!d._loop && !t._sprite[e][2]);\n            };\n            if (_ >= f) return void t._ended(d);\n            var m = d._node;\n            if (t._webAudio) {\n                var v = function() {\n                    t._playLock = !1, p(), t._refreshBuffer(d);\n                    var e = d._muted || t._muted ? 0 : d._volume;\n                    m.gain.setValueAtTime(e, n.ctx.currentTime), d._playStart = n.ctx.currentTime, void 0 === m.bufferSource.start ? d._loop ? m.bufferSource.noteGrainOn(0, _, 86400) : m.bufferSource.noteGrainOn(0, _, s) : d._loop ? m.bufferSource.start(0, _, 86400) : m.bufferSource.start(0, _, s), l !== 1 / 0 && (t._endTimers[d._id] = setTimeout(t._ended.bind(t, d), l)), o || setTimeout(function() {\n                        t._emit(\"play\", d._id), t._loadQueue();\n                    }, 0);\n                };\n                \"running\" === n.state && \"interrupted\" !== n.ctx.state ? v() : (t._playLock = !0, t.once(\"resume\", v), t._clearTimer(d._id));\n            } else {\n                var h = function() {\n                    m.currentTime = _, m.muted = d._muted || t._muted || n._muted || m.muted, m.volume = d._volume * n.volume(), m.playbackRate = d._rate;\n                    try {\n                        var r = m.play();\n                        if (r && \"undefined\" != typeof Promise && (r instanceof Promise || \"function\" == typeof r.then) ? (t._playLock = !0, p(), r.then(function() {\n                            t._playLock = !1, m._unlocked = !0, o ? t._loadQueue() : t._emit(\"play\", d._id);\n                        }).catch(function() {\n                            t._playLock = !1, t._emit(\"playerror\", d._id, \"Playback was unable to start. This is most commonly an issue on mobile devices and Chrome where playback was not within a user interaction.\"), d._ended = !0, d._paused = !0;\n                        })) : o || (t._playLock = !1, p(), t._emit(\"play\", d._id)), m.playbackRate = d._rate, m.paused) return void t._emit(\"playerror\", d._id, \"Playback was unable to start. This is most commonly an issue on mobile devices and Chrome where playback was not within a user interaction.\");\n                        \"__default\" !== e || d._loop ? t._endTimers[d._id] = setTimeout(t._ended.bind(t, d), l) : (t._endTimers[d._id] = function() {\n                            t._ended(d), m.removeEventListener(\"ended\", t._endTimers[d._id], !1);\n                        }, m.addEventListener(\"ended\", t._endTimers[d._id], !1));\n                    } catch (e) {\n                        t._emit(\"playerror\", d._id, e);\n                    }\n                };\n                \"data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA\" === m.src && (m.src = t._src, m.load());\n                var y = window && window.ejecta || !m.readyState && n._navigator.isCocoonJS;\n                if (m.readyState >= 3 || y) h();\n                else {\n                    t._playLock = !0, t._state = \"loading\";\n                    var g = function() {\n                        t._state = \"loaded\", h(), m.removeEventListener(n._canPlayEvent, g, !1);\n                    };\n                    m.addEventListener(n._canPlayEvent, g, !1), t._clearTimer(d._id);\n                }\n            }\n            return d._id;\n        },\n        pause: function(e) {\n            var n = this;\n            if (\"loaded\" !== n._state || n._playLock) return n._queue.push({\n                event: \"pause\",\n                action: function() {\n                    n.pause(e);\n                }\n            }), n;\n            for(var o = n._getSoundIds(e), t = 0; t < o.length; t++){\n                n._clearTimer(o[t]);\n                var r = n._soundById(o[t]);\n                if (r && !r._paused && (r._seek = n.seek(o[t]), r._rateSeek = 0, r._paused = !0, n._stopFade(o[t]), r._node)) if (n._webAudio) {\n                    if (!r._node.bufferSource) continue;\n                    void 0 === r._node.bufferSource.stop ? r._node.bufferSource.noteOff(0) : r._node.bufferSource.stop(0), n._cleanBuffer(r._node);\n                } else isNaN(r._node.duration) && r._node.duration !== 1 / 0 || r._node.pause();\n                arguments[1] || n._emit(\"pause\", r ? r._id : null);\n            }\n            return n;\n        },\n        stop: function(e, n) {\n            var o = this;\n            if (\"loaded\" !== o._state || o._playLock) return o._queue.push({\n                event: \"stop\",\n                action: function() {\n                    o.stop(e);\n                }\n            }), o;\n            for(var t = o._getSoundIds(e), r = 0; r < t.length; r++){\n                o._clearTimer(t[r]);\n                var a = o._soundById(t[r]);\n                a && (a._seek = a._start || 0, a._rateSeek = 0, a._paused = !0, a._ended = !0, o._stopFade(t[r]), a._node && (o._webAudio ? a._node.bufferSource && (void 0 === a._node.bufferSource.stop ? a._node.bufferSource.noteOff(0) : a._node.bufferSource.stop(0), o._cleanBuffer(a._node)) : isNaN(a._node.duration) && a._node.duration !== 1 / 0 || (a._node.currentTime = a._start || 0, a._node.pause(), a._node.duration === 1 / 0 && o._clearSound(a._node))), n || o._emit(\"stop\", a._id));\n            }\n            return o;\n        },\n        mute: function(e, o) {\n            var t = this;\n            if (\"loaded\" !== t._state || t._playLock) return t._queue.push({\n                event: \"mute\",\n                action: function() {\n                    t.mute(e, o);\n                }\n            }), t;\n            if (void 0 === o) {\n                if (\"boolean\" != typeof e) return t._muted;\n                t._muted = e;\n            }\n            for(var r = t._getSoundIds(o), a = 0; a < r.length; a++){\n                var u = t._soundById(r[a]);\n                u && (u._muted = e, u._interval && t._stopFade(u._id), t._webAudio && u._node ? u._node.gain.setValueAtTime(e ? 0 : u._volume, n.ctx.currentTime) : u._node && (u._node.muted = !!n._muted || e), t._emit(\"mute\", u._id));\n            }\n            return t;\n        },\n        volume: function() {\n            var e, o, t = this, r = arguments;\n            if (0 === r.length) return t._volume;\n            if (1 === r.length || 2 === r.length && void 0 === r[1]) {\n                t._getSoundIds().indexOf(r[0]) >= 0 ? o = parseInt(r[0], 10) : e = parseFloat(r[0]);\n            } else r.length >= 2 && (e = parseFloat(r[0]), o = parseInt(r[1], 10));\n            var a;\n            if (!(void 0 !== e && e >= 0 && e <= 1)) return a = o ? t._soundById(o) : t._sounds[0], a ? a._volume : 0;\n            if (\"loaded\" !== t._state || t._playLock) return t._queue.push({\n                event: \"volume\",\n                action: function() {\n                    t.volume.apply(t, r);\n                }\n            }), t;\n            void 0 === o && (t._volume = e), o = t._getSoundIds(o);\n            for(var u = 0; u < o.length; u++)(a = t._soundById(o[u])) && (a._volume = e, r[2] || t._stopFade(o[u]), t._webAudio && a._node && !a._muted ? a._node.gain.setValueAtTime(e, n.ctx.currentTime) : a._node && !a._muted && (a._node.volume = e * n.volume()), t._emit(\"volume\", a._id));\n            return t;\n        },\n        fade: function(e, o, t, r) {\n            var a = this;\n            if (\"loaded\" !== a._state || a._playLock) return a._queue.push({\n                event: \"fade\",\n                action: function() {\n                    a.fade(e, o, t, r);\n                }\n            }), a;\n            e = Math.min(Math.max(0, parseFloat(e)), 1), o = Math.min(Math.max(0, parseFloat(o)), 1), t = parseFloat(t), a.volume(e, r);\n            for(var u = a._getSoundIds(r), d = 0; d < u.length; d++){\n                var i = a._soundById(u[d]);\n                if (i) {\n                    if (r || a._stopFade(u[d]), a._webAudio && !i._muted) {\n                        var _ = n.ctx.currentTime, s = _ + t / 1e3;\n                        i._volume = e, i._node.gain.setValueAtTime(e, _), i._node.gain.linearRampToValueAtTime(o, s);\n                    }\n                    a._startFadeInterval(i, e, o, t, u[d], void 0 === r);\n                }\n            }\n            return a;\n        },\n        _startFadeInterval: function(e, n, o, t, r, a) {\n            var u = this, d = n, i = o - n, _ = Math.abs(i / .01), s = Math.max(4, _ > 0 ? t / _ : t), l = Date.now();\n            e._fadeTo = o, e._interval = setInterval(function() {\n                var r = (Date.now() - l) / t;\n                l = Date.now(), d += i * r, d = Math.round(100 * d) / 100, d = i < 0 ? Math.max(o, d) : Math.min(o, d), u._webAudio ? e._volume = d : u.volume(d, e._id, !0), a && (u._volume = d), (o < n && d <= o || o > n && d >= o) && (clearInterval(e._interval), e._interval = null, e._fadeTo = null, u.volume(o, e._id), u._emit(\"fade\", e._id));\n            }, s);\n        },\n        _stopFade: function(e) {\n            var o = this, t = o._soundById(e);\n            return t && t._interval && (o._webAudio && t._node.gain.cancelScheduledValues(n.ctx.currentTime), clearInterval(t._interval), t._interval = null, o.volume(t._fadeTo, e), t._fadeTo = null, o._emit(\"fade\", e)), o;\n        },\n        loop: function() {\n            var e, n, o, t = this, r = arguments;\n            if (0 === r.length) return t._loop;\n            if (1 === r.length) {\n                if (\"boolean\" != typeof r[0]) return !!(o = t._soundById(parseInt(r[0], 10))) && o._loop;\n                e = r[0], t._loop = e;\n            } else 2 === r.length && (e = r[0], n = parseInt(r[1], 10));\n            for(var a = t._getSoundIds(n), u = 0; u < a.length; u++)(o = t._soundById(a[u])) && (o._loop = e, t._webAudio && o._node && o._node.bufferSource && (o._node.bufferSource.loop = e, e && (o._node.bufferSource.loopStart = o._start || 0, o._node.bufferSource.loopEnd = o._stop, t.playing(a[u]) && (t.pause(a[u], !0), t.play(a[u], !0)))));\n            return t;\n        },\n        rate: function() {\n            var e, o, t = this, r = arguments;\n            if (0 === r.length) o = t._sounds[0]._id;\n            else if (1 === r.length) {\n                var a = t._getSoundIds(), u = a.indexOf(r[0]);\n                u >= 0 ? o = parseInt(r[0], 10) : e = parseFloat(r[0]);\n            } else 2 === r.length && (e = parseFloat(r[0]), o = parseInt(r[1], 10));\n            var d;\n            if (\"number\" != typeof e) return d = t._soundById(o), d ? d._rate : t._rate;\n            if (\"loaded\" !== t._state || t._playLock) return t._queue.push({\n                event: \"rate\",\n                action: function() {\n                    t.rate.apply(t, r);\n                }\n            }), t;\n            void 0 === o && (t._rate = e), o = t._getSoundIds(o);\n            for(var i = 0; i < o.length; i++)if (d = t._soundById(o[i])) {\n                t.playing(o[i]) && (d._rateSeek = t.seek(o[i]), d._playStart = t._webAudio ? n.ctx.currentTime : d._playStart), d._rate = e, t._webAudio && d._node && d._node.bufferSource ? d._node.bufferSource.playbackRate.setValueAtTime(e, n.ctx.currentTime) : d._node && (d._node.playbackRate = e);\n                var _ = t.seek(o[i]), s = (t._sprite[d._sprite][0] + t._sprite[d._sprite][1]) / 1e3 - _, l = 1e3 * s / Math.abs(d._rate);\n                !t._endTimers[o[i]] && d._paused || (t._clearTimer(o[i]), t._endTimers[o[i]] = setTimeout(t._ended.bind(t, d), l)), t._emit(\"rate\", d._id);\n            }\n            return t;\n        },\n        seek: function() {\n            var e, o, t = this, r = arguments;\n            if (0 === r.length) t._sounds.length && (o = t._sounds[0]._id);\n            else if (1 === r.length) {\n                var a = t._getSoundIds(), u = a.indexOf(r[0]);\n                u >= 0 ? o = parseInt(r[0], 10) : t._sounds.length && (o = t._sounds[0]._id, e = parseFloat(r[0]));\n            } else 2 === r.length && (e = parseFloat(r[0]), o = parseInt(r[1], 10));\n            if (void 0 === o) return 0;\n            if (\"number\" == typeof e && (\"loaded\" !== t._state || t._playLock)) return t._queue.push({\n                event: \"seek\",\n                action: function() {\n                    t.seek.apply(t, r);\n                }\n            }), t;\n            var d = t._soundById(o);\n            if (d) {\n                if (!(\"number\" == typeof e && e >= 0)) {\n                    if (t._webAudio) {\n                        var i = t.playing(o) ? n.ctx.currentTime - d._playStart : 0, _ = d._rateSeek ? d._rateSeek - d._seek : 0;\n                        return d._seek + (_ + i * Math.abs(d._rate));\n                    }\n                    return d._node.currentTime;\n                }\n                var s = t.playing(o);\n                s && t.pause(o, !0), d._seek = e, d._ended = !1, t._clearTimer(o), t._webAudio || !d._node || isNaN(d._node.duration) || (d._node.currentTime = e);\n                var l = function() {\n                    s && t.play(o, !0), t._emit(\"seek\", o);\n                };\n                if (s && !t._webAudio) {\n                    var c = function() {\n                        t._playLock ? setTimeout(c, 0) : l();\n                    };\n                    setTimeout(c, 0);\n                } else l();\n            }\n            return t;\n        },\n        playing: function(e) {\n            var n = this;\n            if (\"number\" == typeof e) {\n                var o = n._soundById(e);\n                return !!o && !o._paused;\n            }\n            for(var t = 0; t < n._sounds.length; t++)if (!n._sounds[t]._paused) return !0;\n            return !1;\n        },\n        duration: function(e) {\n            var n = this, o = n._duration, t = n._soundById(e);\n            return t && (o = n._sprite[t._sprite][1] / 1e3), o;\n        },\n        state: function() {\n            return this._state;\n        },\n        unload: function() {\n            for(var e = this, o = e._sounds, t = 0; t < o.length; t++)o[t]._paused || e.stop(o[t]._id), e._webAudio || (e._clearSound(o[t]._node), o[t]._node.removeEventListener(\"error\", o[t]._errorFn, !1), o[t]._node.removeEventListener(n._canPlayEvent, o[t]._loadFn, !1), o[t]._node.removeEventListener(\"ended\", o[t]._endFn, !1), n._releaseHtml5Audio(o[t]._node)), delete o[t]._node, e._clearTimer(o[t]._id);\n            var a = n._howls.indexOf(e);\n            a >= 0 && n._howls.splice(a, 1);\n            var u = !0;\n            for(t = 0; t < n._howls.length; t++)if (n._howls[t]._src === e._src || e._src.indexOf(n._howls[t]._src) >= 0) {\n                u = !1;\n                break;\n            }\n            return r && u && delete r[e._src], n.noAudio = !1, e._state = \"unloaded\", e._sounds = [], e = null, null;\n        },\n        on: function(e, n, o, t) {\n            var r = this, a = r[\"_on\" + e];\n            return \"function\" == typeof n && a.push(t ? {\n                id: o,\n                fn: n,\n                once: t\n            } : {\n                id: o,\n                fn: n\n            }), r;\n        },\n        off: function(e, n, o) {\n            var t = this, r = t[\"_on\" + e], a = 0;\n            if (\"number\" == typeof n && (o = n, n = null), n || o) for(a = 0; a < r.length; a++){\n                var u = o === r[a].id;\n                if (n === r[a].fn && u || !n && u) {\n                    r.splice(a, 1);\n                    break;\n                }\n            }\n            else if (e) t[\"_on\" + e] = [];\n            else {\n                var d = Object.keys(t);\n                for(a = 0; a < d.length; a++)0 === d[a].indexOf(\"_on\") && Array.isArray(t[d[a]]) && (t[d[a]] = []);\n            }\n            return t;\n        },\n        once: function(e, n, o) {\n            var t = this;\n            return t.on(e, n, o, 1), t;\n        },\n        _emit: function(e, n, o) {\n            for(var t = this, r = t[\"_on\" + e], a = r.length - 1; a >= 0; a--)r[a].id && r[a].id !== n && \"load\" !== e || (setTimeout((function(e) {\n                e.call(this, n, o);\n            }).bind(t, r[a].fn), 0), r[a].once && t.off(e, r[a].fn, r[a].id));\n            return t._loadQueue(e), t;\n        },\n        _loadQueue: function(e) {\n            var n = this;\n            if (n._queue.length > 0) {\n                var o = n._queue[0];\n                o.event === e && (n._queue.shift(), n._loadQueue()), e || o.action();\n            }\n            return n;\n        },\n        _ended: function(e) {\n            var o = this, t = e._sprite;\n            if (!o._webAudio && e._node && !e._node.paused && !e._node.ended && e._node.currentTime < e._stop) return setTimeout(o._ended.bind(o, e), 100), o;\n            var r = !(!e._loop && !o._sprite[t][2]);\n            if (o._emit(\"end\", e._id), !o._webAudio && r && o.stop(e._id, !0).play(e._id), o._webAudio && r) {\n                o._emit(\"play\", e._id), e._seek = e._start || 0, e._rateSeek = 0, e._playStart = n.ctx.currentTime;\n                var a = 1e3 * (e._stop - e._start) / Math.abs(e._rate);\n                o._endTimers[e._id] = setTimeout(o._ended.bind(o, e), a);\n            }\n            return o._webAudio && !r && (e._paused = !0, e._ended = !0, e._seek = e._start || 0, e._rateSeek = 0, o._clearTimer(e._id), o._cleanBuffer(e._node), n._autoSuspend()), o._webAudio || r || o.stop(e._id, !0), o;\n        },\n        _clearTimer: function(e) {\n            var n = this;\n            if (n._endTimers[e]) {\n                if (\"function\" != typeof n._endTimers[e]) clearTimeout(n._endTimers[e]);\n                else {\n                    var o = n._soundById(e);\n                    o && o._node && o._node.removeEventListener(\"ended\", n._endTimers[e], !1);\n                }\n                delete n._endTimers[e];\n            }\n            return n;\n        },\n        _soundById: function(e) {\n            for(var n = this, o = 0; o < n._sounds.length; o++)if (e === n._sounds[o]._id) return n._sounds[o];\n            return null;\n        },\n        _inactiveSound: function() {\n            var e = this;\n            e._drain();\n            for(var n = 0; n < e._sounds.length; n++)if (e._sounds[n]._ended) return e._sounds[n].reset();\n            return new t(e);\n        },\n        _drain: function() {\n            var e = this, n = e._pool, o = 0, t = 0;\n            if (!(e._sounds.length < n)) {\n                for(t = 0; t < e._sounds.length; t++)e._sounds[t]._ended && o++;\n                for(t = e._sounds.length - 1; t >= 0; t--){\n                    if (o <= n) return;\n                    e._sounds[t]._ended && (e._webAudio && e._sounds[t]._node && e._sounds[t]._node.disconnect(0), e._sounds.splice(t, 1), o--);\n                }\n            }\n        },\n        _getSoundIds: function(e) {\n            var n = this;\n            if (void 0 === e) {\n                for(var o = [], t = 0; t < n._sounds.length; t++)o.push(n._sounds[t]._id);\n                return o;\n            }\n            return [\n                e\n            ];\n        },\n        _refreshBuffer: function(e) {\n            var o = this;\n            return e._node.bufferSource = n.ctx.createBufferSource(), e._node.bufferSource.buffer = r[o._src], e._panner ? e._node.bufferSource.connect(e._panner) : e._node.bufferSource.connect(e._node), e._node.bufferSource.loop = e._loop, e._loop && (e._node.bufferSource.loopStart = e._start || 0, e._node.bufferSource.loopEnd = e._stop || 0), e._node.bufferSource.playbackRate.setValueAtTime(e._rate, n.ctx.currentTime), o;\n        },\n        _cleanBuffer: function(e) {\n            var o = this, t = n._navigator && n._navigator.vendor.indexOf(\"Apple\") >= 0;\n            if (n._scratchBuffer && e.bufferSource && (e.bufferSource.onended = null, e.bufferSource.disconnect(0), t)) try {\n                e.bufferSource.buffer = n._scratchBuffer;\n            } catch (e) {}\n            return e.bufferSource = null, o;\n        },\n        _clearSound: function(e) {\n            /MSIE |Trident\\//.test(n._navigator && n._navigator.userAgent) || (e.src = \"data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA\");\n        }\n    };\n    var t = function(e) {\n        this._parent = e, this.init();\n    };\n    t.prototype = {\n        init: function() {\n            var e = this, o = e._parent;\n            return e._muted = o._muted, e._loop = o._loop, e._volume = o._volume, e._rate = o._rate, e._seek = 0, e._paused = !0, e._ended = !0, e._sprite = \"__default\", e._id = ++n._counter, o._sounds.push(e), e.create(), e;\n        },\n        create: function() {\n            var e = this, o = e._parent, t = n._muted || e._muted || e._parent._muted ? 0 : e._volume;\n            return o._webAudio ? (e._node = void 0 === n.ctx.createGain ? n.ctx.createGainNode() : n.ctx.createGain(), e._node.gain.setValueAtTime(t, n.ctx.currentTime), e._node.paused = !0, e._node.connect(n.masterGain)) : n.noAudio || (e._node = n._obtainHtml5Audio(), e._errorFn = e._errorListener.bind(e), e._node.addEventListener(\"error\", e._errorFn, !1), e._loadFn = e._loadListener.bind(e), e._node.addEventListener(n._canPlayEvent, e._loadFn, !1), e._endFn = e._endListener.bind(e), e._node.addEventListener(\"ended\", e._endFn, !1), e._node.src = o._src, e._node.preload = !0 === o._preload ? \"auto\" : o._preload, e._node.volume = t * n.volume(), e._node.load()), e;\n        },\n        reset: function() {\n            var e = this, o = e._parent;\n            return e._muted = o._muted, e._loop = o._loop, e._volume = o._volume, e._rate = o._rate, e._seek = 0, e._rateSeek = 0, e._paused = !0, e._ended = !0, e._sprite = \"__default\", e._id = ++n._counter, e;\n        },\n        _errorListener: function() {\n            var e = this;\n            e._parent._emit(\"loaderror\", e._id, e._node.error ? e._node.error.code : 0), e._node.removeEventListener(\"error\", e._errorFn, !1);\n        },\n        _loadListener: function() {\n            var e = this, o = e._parent;\n            o._duration = Math.ceil(10 * e._node.duration) / 10, 0 === Object.keys(o._sprite).length && (o._sprite = {\n                __default: [\n                    0,\n                    1e3 * o._duration\n                ]\n            }), \"loaded\" !== o._state && (o._state = \"loaded\", o._emit(\"load\"), o._loadQueue()), e._node.removeEventListener(n._canPlayEvent, e._loadFn, !1);\n        },\n        _endListener: function() {\n            var e = this, n = e._parent;\n            n._duration === 1 / 0 && (n._duration = Math.ceil(10 * e._node.duration) / 10, n._sprite.__default[1] === 1 / 0 && (n._sprite.__default[1] = 1e3 * n._duration), n._ended(e)), e._node.removeEventListener(\"ended\", e._endFn, !1);\n        }\n    };\n    var r = {}, a = function(e) {\n        var n = e._src;\n        if (r[n]) return e._duration = r[n].duration, void i(e);\n        if (/^data:[^;]+;base64,/.test(n)) {\n            for(var o = atob(n.split(\",\")[1]), t = new Uint8Array(o.length), a = 0; a < o.length; ++a)t[a] = o.charCodeAt(a);\n            d(t.buffer, e);\n        } else {\n            var _ = new XMLHttpRequest;\n            _.open(e._xhr.method, n, !0), _.withCredentials = e._xhr.withCredentials, _.responseType = \"arraybuffer\", e._xhr.headers && Object.keys(e._xhr.headers).forEach(function(n) {\n                _.setRequestHeader(n, e._xhr.headers[n]);\n            }), _.onload = function() {\n                var n = (_.status + \"\")[0];\n                if (\"0\" !== n && \"2\" !== n && \"3\" !== n) return void e._emit(\"loaderror\", null, \"Failed loading audio file with status: \" + _.status + \".\");\n                d(_.response, e);\n            }, _.onerror = function() {\n                e._webAudio && (e._html5 = !0, e._webAudio = !1, e._sounds = [], delete r[n], e.load());\n            }, u(_);\n        }\n    }, u = function(e) {\n        try {\n            e.send();\n        } catch (n) {\n            e.onerror();\n        }\n    }, d = function(e, o) {\n        var t = function() {\n            o._emit(\"loaderror\", null, \"Decoding audio data failed.\");\n        }, a = function(e) {\n            e && o._sounds.length > 0 ? (r[o._src] = e, i(o, e)) : t();\n        };\n        \"undefined\" != typeof Promise && 1 === n.ctx.decodeAudioData.length ? n.ctx.decodeAudioData(e).then(a).catch(t) : n.ctx.decodeAudioData(e, a, t);\n    }, i = function(e, n) {\n        n && !e._duration && (e._duration = n.duration), 0 === Object.keys(e._sprite).length && (e._sprite = {\n            __default: [\n                0,\n                1e3 * e._duration\n            ]\n        }), \"loaded\" !== e._state && (e._state = \"loaded\", e._emit(\"load\"), e._loadQueue());\n    }, _ = function() {\n        if (n.usingWebAudio) {\n            try {\n                \"undefined\" != typeof AudioContext ? n.ctx = new AudioContext : \"undefined\" != typeof webkitAudioContext ? n.ctx = new webkitAudioContext : n.usingWebAudio = !1;\n            } catch (e) {\n                n.usingWebAudio = !1;\n            }\n            n.ctx || (n.usingWebAudio = !1);\n            var e = /iP(hone|od|ad)/.test(n._navigator && n._navigator.platform), o = n._navigator && n._navigator.appVersion.match(/OS (\\d+)_(\\d+)_?(\\d+)?/), t = o ? parseInt(o[1], 10) : null;\n            if (e && t && t < 9) {\n                var r = /safari/.test(n._navigator && n._navigator.userAgent.toLowerCase());\n                n._navigator && !r && (n.usingWebAudio = !1);\n            }\n            n.usingWebAudio && (n.masterGain = void 0 === n.ctx.createGain ? n.ctx.createGainNode() : n.ctx.createGain(), n.masterGain.gain.setValueAtTime(n._muted ? 0 : n._volume, n.ctx.currentTime), n.masterGain.connect(n.ctx.destination)), n._setup();\n        }\n    };\n    \"function\" == typeof define && define.amd && define([], function() {\n        return {\n            Howler: n,\n            Howl: o\n        };\n    }), \"undefined\" != typeof exports && (exports.Howler = n, exports.Howl = o), \"undefined\" != typeof global ? (global.HowlerGlobal = e, global.Howler = n, global.Howl = o, global.Sound = t) :  true && (window.HowlerGlobal = e, window.Howler = n, window.Howl = o, window.Sound = t);\n}();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@splinetool/runtime/build/howler.js\n"));

/***/ })

}]);