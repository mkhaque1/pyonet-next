"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["_app-pages-browser_node_modules_splinetool_runtime_build_gaussian-splat-compression_js"],{

/***/ "(app-pages-browser)/./node_modules/@splinetool/runtime/build/gaussian-splat-compression.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@splinetool/runtime/build/gaussian-splat-compression.js ***!
  \******************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CompressedGaussianSplats: function() { return /* binding */ X; },\n/* harmony export */   GSplineBuffer: function() { return /* binding */ ar; },\n/* harmony export */   GaussianPLYData: function() { return /* binding */ U; }\n/* harmony export */ });\nvar Re = Object.create;\nvar fr = Object.defineProperty;\nvar Be = Object.getOwnPropertyDescriptor;\nvar Ue = Object.getOwnPropertyNames;\nvar Ye = Object.getPrototypeOf, Ge = Object.prototype.hasOwnProperty;\nvar Qe = (r, e, n)=>e in r ? fr(r, e, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: n\n    }) : r[e] = n;\n_c = Qe;\nvar K = (r, e)=>()=>(e || r((e = {\n            exports: {}\n        }).exports, e), e.exports), ur = (r, e)=>{\n    for(var n in e)fr(r, n, {\n        get: e[n],\n        enumerable: !0\n    });\n}, $e = (r, e, n, a)=>{\n    if (e && typeof e == \"object\" || typeof e == \"function\") for (let t of Ue(e))!Ge.call(r, t) && t !== n && fr(r, t, {\n        get: ()=>e[t],\n        enumerable: !(a = Be(e, t)) || a.enumerable\n    });\n    return r;\n};\nvar Q = (r, e, n)=>(n = r != null ? Re(Ye(r)) : {}, $e(e || !r || !r.__esModule ? fr(n, \"default\", {\n        value: r,\n        enumerable: !0\n    }) : n, r));\n_c1 = Q;\nvar $ = (r, e, n)=>(Qe(r, typeof e != \"symbol\" ? e + \"\" : e, n), n);\nvar Lr = K(_c2 = (gt, Cr)=>{\n    \"use strict\";\n    function He(r) {\n        for(var e = new Array(r), n = 0; n < r; ++n)e[n] = n;\n        return e;\n    }\n    Cr.exports = He;\n});\n_c3 = Lr;\nvar Tr = K(_c4 = (Mt, Er)=>{\n    Er.exports = function(r) {\n        return r != null && (Dr(r) || We(r) || !!r._isBuffer);\n    };\n    function Dr(r) {\n        return !!r.constructor && typeof r.constructor.isBuffer == \"function\" && r.constructor.isBuffer(r);\n    }\n    function We(r) {\n        return typeof r.readFloatLE == \"function\" && typeof r.slice == \"function\" && Dr(r.slice(0, 0));\n    }\n});\n_c5 = Tr;\nvar tr = K((_t, Pr)=>{\n    var Ze = Lr(), Xe = Tr(), Ke = typeof Float64Array < \"u\";\n    function Je(r, e) {\n        return r[0] - e[0];\n    }\n    function rn() {\n        var r = this.stride, e = new Array(r.length), n;\n        for(n = 0; n < e.length; ++n)e[n] = [\n            Math.abs(r[n]),\n            n\n        ];\n        e.sort(Je);\n        var a = new Array(e.length);\n        for(n = 0; n < a.length; ++n)a[n] = e[n][1];\n        return a;\n    }\n    function en(r, e) {\n        var n = [\n            \"View\",\n            e,\n            \"d\",\n            r\n        ].join(\"\");\n        e < 0 && (n = \"View_Nil\" + r);\n        var a = r === \"generic\";\n        if (e === -1) {\n            var t = \"function \" + n + \"(a){this.data=a;};var proto=\" + n + \".prototype;proto.dtype='\" + r + \"';proto.index=function(){return -1};proto.size=0;proto.dimension=-1;proto.shape=proto.stride=proto.order=[];proto.lo=proto.hi=proto.transpose=proto.step=function(){return new \" + n + \"(this.data);};proto.get=proto.set=function(){};proto.pick=function(){return null};return function construct_\" + n + \"(a){return new \" + n + \"(a);}\", d = new Function(t);\n            return d();\n        } else if (e === 0) {\n            var t = \"function \" + n + \"(a,d) {this.data = a;this.offset = d};var proto=\" + n + \".prototype;proto.dtype='\" + r + \"';proto.index=function(){return this.offset};proto.dimension=0;proto.size=1;proto.shape=proto.stride=proto.order=[];proto.lo=proto.hi=proto.transpose=proto.step=function \" + n + \"_copy() {return new \" + n + \"(this.data,this.offset)};proto.pick=function \" + n + \"_pick(){return TrivialArray(this.data);};proto.valueOf=proto.get=function \" + n + \"_get(){return \" + (a ? \"this.data.get(this.offset)\" : \"this.data[this.offset]\") + \"};proto.set=function \" + n + \"_set(v){return \" + (a ? \"this.data.set(this.offset,v)\" : \"this.data[this.offset]=v\") + \"};return function construct_\" + n + \"(a,b,c,d){return new \" + n + \"(a,d)}\", d = new Function(\"TrivialArray\", t);\n            return d(yr[r][0]);\n        }\n        var t = [\n            \"'use strict'\"\n        ], s = Ze(e), i = s.map(function(y) {\n            return \"i\" + y;\n        }), h = \"this.offset+\" + s.map(function(y) {\n            return \"this.stride[\" + y + \"]*i\" + y;\n        }).join(\"+\"), o = s.map(function(y) {\n            return \"b\" + y;\n        }).join(\",\"), c = s.map(function(y) {\n            return \"c\" + y;\n        }).join(\",\");\n        t.push(\"function \" + n + \"(a,\" + o + \",\" + c + \",d){this.data=a\", \"this.shape=[\" + o + \"]\", \"this.stride=[\" + c + \"]\", \"this.offset=d|0}\", \"var proto=\" + n + \".prototype\", \"proto.dtype='\" + r + \"'\", \"proto.dimension=\" + e), t.push(\"Object.defineProperty(proto,'size',{get:function \" + n + \"_size(){return \" + s.map(function(y) {\n            return \"this.shape[\" + y + \"]\";\n        }).join(\"*\"), \"}})\"), e === 1 ? t.push(\"proto.order=[0]\") : (t.push(\"Object.defineProperty(proto,'order',{get:\"), e < 4 ? (t.push(\"function \" + n + \"_order(){\"), e === 2 ? t.push(\"return (Math.abs(this.stride[0])>Math.abs(this.stride[1]))?[1,0]:[0,1]}})\") : e === 3 && t.push(\"var s0=Math.abs(this.stride[0]),s1=Math.abs(this.stride[1]),s2=Math.abs(this.stride[2]);if(s0>s1){if(s1>s2){return [2,1,0];}else if(s0>s2){return [1,2,0];}else{return [1,0,2];}}else if(s0>s2){return [2,0,1];}else if(s2>s1){return [0,1,2];}else{return [0,2,1];}}})\")) : t.push(\"ORDER})\")), t.push(\"proto.set=function \" + n + \"_set(\" + i.join(\",\") + \",v){\"), a ? t.push(\"return this.data.set(\" + h + \",v)}\") : t.push(\"return this.data[\" + h + \"]=v}\"), t.push(\"proto.get=function \" + n + \"_get(\" + i.join(\",\") + \"){\"), a ? t.push(\"return this.data.get(\" + h + \")}\") : t.push(\"return this.data[\" + h + \"]}\"), t.push(\"proto.index=function \" + n + \"_index(\", i.join(), \"){return \" + h + \"}\"), t.push(\"proto.hi=function \" + n + \"_hi(\" + i.join(\",\") + \"){return new \" + n + \"(this.data,\" + s.map(function(y) {\n            return [\n                \"(typeof i\",\n                y,\n                \"!=='number'||i\",\n                y,\n                \"<0)?this.shape[\",\n                y,\n                \"]:i\",\n                y,\n                \"|0\"\n            ].join(\"\");\n        }).join(\",\") + \",\" + s.map(function(y) {\n            return \"this.stride[\" + y + \"]\";\n        }).join(\",\") + \",this.offset)}\");\n        var l = s.map(function(y) {\n            return \"a\" + y + \"=this.shape[\" + y + \"]\";\n        }), f = s.map(function(y) {\n            return \"c\" + y + \"=this.stride[\" + y + \"]\";\n        });\n        t.push(\"proto.lo=function \" + n + \"_lo(\" + i.join(\",\") + \"){var b=this.offset,d=0,\" + l.join(\",\") + \",\" + f.join(\",\"));\n        for(var p = 0; p < e; ++p)t.push(\"if(typeof i\" + p + \"==='number'&&i\" + p + \">=0){d=i\" + p + \"|0;b+=c\" + p + \"*d;a\" + p + \"-=d}\");\n        t.push(\"return new \" + n + \"(this.data,\" + s.map(function(y) {\n            return \"a\" + y;\n        }).join(\",\") + \",\" + s.map(function(y) {\n            return \"c\" + y;\n        }).join(\",\") + \",b)}\"), t.push(\"proto.step=function \" + n + \"_step(\" + i.join(\",\") + \"){var \" + s.map(function(y) {\n            return \"a\" + y + \"=this.shape[\" + y + \"]\";\n        }).join(\",\") + \",\" + s.map(function(y) {\n            return \"b\" + y + \"=this.stride[\" + y + \"]\";\n        }).join(\",\") + \",c=this.offset,d=0,ceil=Math.ceil\");\n        for(var p = 0; p < e; ++p)t.push(\"if(typeof i\" + p + \"==='number'){d=i\" + p + \"|0;if(d<0){c+=b\" + p + \"*(a\" + p + \"-1);a\" + p + \"=ceil(-a\" + p + \"/d)}else{a\" + p + \"=ceil(a\" + p + \"/d)}b\" + p + \"*=d}\");\n        t.push(\"return new \" + n + \"(this.data,\" + s.map(function(y) {\n            return \"a\" + y;\n        }).join(\",\") + \",\" + s.map(function(y) {\n            return \"b\" + y;\n        }).join(\",\") + \",c)}\");\n        for(var v = new Array(e), m = new Array(e), p = 0; p < e; ++p)v[p] = \"a[i\" + p + \"]\", m[p] = \"b[i\" + p + \"]\";\n        t.push(\"proto.transpose=function \" + n + \"_transpose(\" + i + \"){\" + i.map(function(y, u) {\n            return y + \"=(\" + y + \"===undefined?\" + u + \":\" + y + \"|0)\";\n        }).join(\";\"), \"var a=this.shape,b=this.stride;return new \" + n + \"(this.data,\" + v.join(\",\") + \",\" + m.join(\",\") + \",this.offset)}\"), t.push(\"proto.pick=function \" + n + \"_pick(\" + i + \"){var a=[],b=[],c=this.offset\");\n        for(var p = 0; p < e; ++p)t.push(\"if(typeof i\" + p + \"==='number'&&i\" + p + \">=0){c=(c+this.stride[\" + p + \"]*i\" + p + \")|0}else{a.push(this.shape[\" + p + \"]);b.push(this.stride[\" + p + \"])}\");\n        t.push(\"var ctor=CTOR_LIST[a.length+1];return ctor(this.data,a,b,c)}\"), t.push(\"return function construct_\" + n + \"(data,shape,stride,offset){return new \" + n + \"(data,\" + s.map(function(y) {\n            return \"shape[\" + y + \"]\";\n        }).join(\",\") + \",\" + s.map(function(y) {\n            return \"stride[\" + y + \"]\";\n        }).join(\",\") + \",offset)}\");\n        var d = new Function(\"CTOR_LIST\", \"ORDER\", t.join(\"\\n\"));\n        return d(yr[r], rn);\n    }\n    function nn(r) {\n        if (Xe(r)) return \"buffer\";\n        if (Ke) switch(Object.prototype.toString.call(r)){\n            case \"[object Float64Array]\":\n                return \"float64\";\n            case \"[object Float32Array]\":\n                return \"float32\";\n            case \"[object Int8Array]\":\n                return \"int8\";\n            case \"[object Int16Array]\":\n                return \"int16\";\n            case \"[object Int32Array]\":\n                return \"int32\";\n            case \"[object Uint8Array]\":\n                return \"uint8\";\n            case \"[object Uint16Array]\":\n                return \"uint16\";\n            case \"[object Uint32Array]\":\n                return \"uint32\";\n            case \"[object Uint8ClampedArray]\":\n                return \"uint8_clamped\";\n            case \"[object BigInt64Array]\":\n                return \"bigint64\";\n            case \"[object BigUint64Array]\":\n                return \"biguint64\";\n        }\n        return Array.isArray(r) ? \"array\" : \"generic\";\n    }\n    var yr = {\n        float32: [],\n        float64: [],\n        int8: [],\n        int16: [],\n        int32: [],\n        uint8: [],\n        uint16: [],\n        uint32: [],\n        array: [],\n        uint8_clamped: [],\n        bigint64: [],\n        biguint64: [],\n        buffer: [],\n        generic: []\n    };\n    function an(r, e, n, a) {\n        if (r === void 0) {\n            var c = yr.array[0];\n            return c([]);\n        } else typeof r == \"number\" && (r = [\n            r\n        ]);\n        e === void 0 && (e = [\n            r.length\n        ]);\n        var t = e.length;\n        if (n === void 0) {\n            n = new Array(t);\n            for(var s = t - 1, i = 1; s >= 0; --s)n[s] = i, i *= e[s];\n        }\n        if (a === void 0) {\n            a = 0;\n            for(var s = 0; s < t; ++s)n[s] < 0 && (a -= (e[s] - 1) * n[s]);\n        }\n        for(var h = nn(r), o = yr[h]; o.length <= t + 1;)o.push(en(h, o.length - 1));\n        var c = o[t + 1];\n        return c(r, e, n, a);\n    }\n    Pr.exports = an;\n});\nvar Or = K(_c6 = (bt, Vr)=>{\n    \"use strict\";\n    function tn(r, e) {\n        for(var n = 1, a = r.length, t = r[0], s = r[0], i = 1; i < a; ++i)if (s = t, t = r[i], e(t, s)) {\n            if (i === n) {\n                n++;\n                continue;\n            }\n            r[n++] = t;\n        }\n        return r.length = n, r;\n    }\n    function sn(r) {\n        for(var e = 1, n = r.length, a = r[0], t = r[0], s = 1; s < n; ++s, t = a)if (t = a, a = r[s], a !== t) {\n            if (s === e) {\n                e++;\n                continue;\n            }\n            r[e++] = a;\n        }\n        return r.length = e, r;\n    }\n    function on(r, e, n) {\n        return r.length === 0 ? r : e ? (n || r.sort(e), tn(r, e)) : (n || r.sort(), sn(r));\n    }\n    Vr.exports = on;\n});\n_c7 = Or;\nvar Br = K(_c8 = (At, Rr)=>{\n    \"use strict\";\n    var hn = Or();\n    function jr(r, e, n) {\n        var a = r.length, t = e.arrayArgs.length, s = e.indexArgs.length > 0, i = [], h = [], o = 0, c = 0, l, f;\n        for(l = 0; l < a; ++l)h.push([\n            \"i\",\n            l,\n            \"=0\"\n        ].join(\"\"));\n        for(f = 0; f < t; ++f)for(l = 0; l < a; ++l)c = o, o = r[l], l === 0 ? h.push([\n            \"d\",\n            f,\n            \"s\",\n            l,\n            \"=t\",\n            f,\n            \"p\",\n            o\n        ].join(\"\")) : h.push([\n            \"d\",\n            f,\n            \"s\",\n            l,\n            \"=(t\",\n            f,\n            \"p\",\n            o,\n            \"-s\",\n            c,\n            \"*t\",\n            f,\n            \"p\",\n            c,\n            \")\"\n        ].join(\"\"));\n        for(h.length > 0 && i.push(\"var \" + h.join(\",\")), l = a - 1; l >= 0; --l)o = r[l], i.push([\n            \"for(i\",\n            l,\n            \"=0;i\",\n            l,\n            \"<s\",\n            o,\n            \";++i\",\n            l,\n            \"){\"\n        ].join(\"\"));\n        for(i.push(n), l = 0; l < a; ++l){\n            for(c = o, o = r[l], f = 0; f < t; ++f)i.push([\n                \"p\",\n                f,\n                \"+=d\",\n                f,\n                \"s\",\n                l\n            ].join(\"\"));\n            s && (l > 0 && i.push([\n                \"index[\",\n                c,\n                \"]-=s\",\n                c\n            ].join(\"\")), i.push([\n                \"++index[\",\n                o,\n                \"]\"\n            ].join(\"\"))), i.push(\"}\");\n        }\n        return i.join(\"\\n\");\n    }\n    function cn(r, e, n, a) {\n        for(var t = e.length, s = n.arrayArgs.length, i = n.blockSize, h = n.indexArgs.length > 0, o = [], c = 0; c < s; ++c)o.push([\n            \"var offset\",\n            c,\n            \"=p\",\n            c\n        ].join(\"\"));\n        for(var c = r; c < t; ++c)o.push([\n            \"for(var j\" + c + \"=SS[\",\n            e[c],\n            \"]|0;j\",\n            c,\n            \">0;){\"\n        ].join(\"\")), o.push([\n            \"if(j\",\n            c,\n            \"<\",\n            i,\n            \"){\"\n        ].join(\"\")), o.push([\n            \"s\",\n            e[c],\n            \"=j\",\n            c\n        ].join(\"\")), o.push([\n            \"j\",\n            c,\n            \"=0\"\n        ].join(\"\")), o.push([\n            \"}else{s\",\n            e[c],\n            \"=\",\n            i\n        ].join(\"\")), o.push([\n            \"j\",\n            c,\n            \"-=\",\n            i,\n            \"}\"\n        ].join(\"\")), h && o.push([\n            \"index[\",\n            e[c],\n            \"]=j\",\n            c\n        ].join(\"\"));\n        for(var c = 0; c < s; ++c){\n            for(var l = [\n                \"offset\" + c\n            ], f = r; f < t; ++f)l.push([\n                \"j\",\n                f,\n                \"*t\",\n                c,\n                \"p\",\n                e[f]\n            ].join(\"\"));\n            o.push([\n                \"p\",\n                c,\n                \"=(\",\n                l.join(\"+\"),\n                \")\"\n            ].join(\"\"));\n        }\n        o.push(jr(e, n, a));\n        for(var c = r; c < t; ++c)o.push(\"}\");\n        return o.join(\"\\n\");\n    }\n    function ln(r) {\n        for(var e = 0, n = r[0].length; e < n;){\n            for(var a = 1; a < r.length; ++a)if (r[a][e] !== r[0][e]) return e;\n            ++e;\n        }\n        return e;\n    }\n    function xr(r, e, n) {\n        for(var a = r.body, t = [], s = [], i = 0; i < r.args.length; ++i){\n            var h = r.args[i];\n            if (!(h.count <= 0)) {\n                var o = new RegExp(h.name, \"g\"), c = \"\", l = e.arrayArgs.indexOf(i);\n                switch(e.argTypes[i]){\n                    case \"offset\":\n                        var f = e.offsetArgIndex.indexOf(i), p = e.offsetArgs[f];\n                        l = p.array, c = \"+q\" + f;\n                    case \"array\":\n                        c = \"p\" + l + c;\n                        var v = \"l\" + i, m = \"a\" + l;\n                        if (e.arrayBlockIndices[l] === 0) h.count === 1 ? n[l] === \"generic\" ? h.lvalue ? (t.push([\n                            \"var \",\n                            v,\n                            \"=\",\n                            m,\n                            \".get(\",\n                            c,\n                            \")\"\n                        ].join(\"\")), a = a.replace(o, v), s.push([\n                            m,\n                            \".set(\",\n                            c,\n                            \",\",\n                            v,\n                            \")\"\n                        ].join(\"\"))) : a = a.replace(o, [\n                            m,\n                            \".get(\",\n                            c,\n                            \")\"\n                        ].join(\"\")) : a = a.replace(o, [\n                            m,\n                            \"[\",\n                            c,\n                            \"]\"\n                        ].join(\"\")) : n[l] === \"generic\" ? (t.push([\n                            \"var \",\n                            v,\n                            \"=\",\n                            m,\n                            \".get(\",\n                            c,\n                            \")\"\n                        ].join(\"\")), a = a.replace(o, v), h.lvalue && s.push([\n                            m,\n                            \".set(\",\n                            c,\n                            \",\",\n                            v,\n                            \")\"\n                        ].join(\"\"))) : (t.push([\n                            \"var \",\n                            v,\n                            \"=\",\n                            m,\n                            \"[\",\n                            c,\n                            \"]\"\n                        ].join(\"\")), a = a.replace(o, v), h.lvalue && s.push([\n                            m,\n                            \"[\",\n                            c,\n                            \"]=\",\n                            v\n                        ].join(\"\")));\n                        else {\n                            for(var d = [\n                                h.name\n                            ], y = [\n                                c\n                            ], u = 0; u < Math.abs(e.arrayBlockIndices[l]); u++)d.push(\"\\\\s*\\\\[([^\\\\]]+)\\\\]\"), y.push(\"$\" + (u + 1) + \"*t\" + l + \"b\" + u);\n                            if (o = new RegExp(d.join(\"\"), \"g\"), c = y.join(\"+\"), n[l] === \"generic\") throw new Error(\"cwise: Generic arrays not supported in combination with blocks!\");\n                            a = a.replace(o, [\n                                m,\n                                \"[\",\n                                c,\n                                \"]\"\n                            ].join(\"\"));\n                        }\n                        break;\n                    case \"scalar\":\n                        a = a.replace(o, \"Y\" + e.scalarArgs.indexOf(i));\n                        break;\n                    case \"index\":\n                        a = a.replace(o, \"index\");\n                        break;\n                    case \"shape\":\n                        a = a.replace(o, \"shape\");\n                        break;\n                }\n            }\n        }\n        return [\n            t.join(\"\\n\"),\n            a,\n            s.join(\"\\n\")\n        ].join(\"\\n\").trim();\n    }\n    function pn(r) {\n        for(var e = new Array(r.length), n = !0, a = 0; a < r.length; ++a){\n            var t = r[a], s = t.match(/\\d+/);\n            s ? s = s[0] : s = \"\", t.charAt(0) === 0 ? e[a] = \"u\" + t.charAt(1) + s : e[a] = t.charAt(0) + s, a > 0 && (n = n && e[a] === e[a - 1]);\n        }\n        return n ? e[0] : e.join(\"\");\n    }\n    function fn(r, e) {\n        for(var n = e[1].length - Math.abs(r.arrayBlockIndices[0]) | 0, a = new Array(r.arrayArgs.length), t = new Array(r.arrayArgs.length), s = 0; s < r.arrayArgs.length; ++s)t[s] = e[2 * s], a[s] = e[2 * s + 1];\n        for(var i = [], h = [], o = [], c = [], l = [], s = 0; s < r.arrayArgs.length; ++s){\n            r.arrayBlockIndices[s] < 0 ? (o.push(0), c.push(n), i.push(n), h.push(n + r.arrayBlockIndices[s])) : (o.push(r.arrayBlockIndices[s]), c.push(r.arrayBlockIndices[s] + n), i.push(0), h.push(r.arrayBlockIndices[s]));\n            for(var f = [], p = 0; p < a[s].length; p++)o[s] <= a[s][p] && a[s][p] < c[s] && f.push(a[s][p] - o[s]);\n            l.push(f);\n        }\n        for(var v = [\n            \"SS\"\n        ], m = [\n            \"'use strict'\"\n        ], d = [], p = 0; p < n; ++p)d.push([\n            \"s\",\n            p,\n            \"=SS[\",\n            p,\n            \"]\"\n        ].join(\"\"));\n        for(var s = 0; s < r.arrayArgs.length; ++s){\n            v.push(\"a\" + s), v.push(\"t\" + s), v.push(\"p\" + s);\n            for(var p = 0; p < n; ++p)d.push([\n                \"t\",\n                s,\n                \"p\",\n                p,\n                \"=t\",\n                s,\n                \"[\",\n                o[s] + p,\n                \"]\"\n            ].join(\"\"));\n            for(var p = 0; p < Math.abs(r.arrayBlockIndices[s]); ++p)d.push([\n                \"t\",\n                s,\n                \"b\",\n                p,\n                \"=t\",\n                s,\n                \"[\",\n                i[s] + p,\n                \"]\"\n            ].join(\"\"));\n        }\n        for(var s = 0; s < r.scalarArgs.length; ++s)v.push(\"Y\" + s);\n        if (r.shapeArgs.length > 0 && d.push(\"shape=SS.slice(0)\"), r.indexArgs.length > 0) {\n            for(var y = new Array(n), s = 0; s < n; ++s)y[s] = \"0\";\n            d.push([\n                \"index=[\",\n                y.join(\",\"),\n                \"]\"\n            ].join(\"\"));\n        }\n        for(var s = 0; s < r.offsetArgs.length; ++s){\n            for(var u = r.offsetArgs[s], x = [], p = 0; p < u.offset.length; ++p)u.offset[p] !== 0 && (u.offset[p] === 1 ? x.push([\n                \"t\",\n                u.array,\n                \"p\",\n                p\n            ].join(\"\")) : x.push([\n                u.offset[p],\n                \"*t\",\n                u.array,\n                \"p\",\n                p\n            ].join(\"\")));\n            x.length === 0 ? d.push(\"q\" + s + \"=0\") : d.push([\n                \"q\",\n                s,\n                \"=\",\n                x.join(\"+\")\n            ].join(\"\"));\n        }\n        var M = hn([].concat(r.pre.thisVars).concat(r.body.thisVars).concat(r.post.thisVars));\n        d = d.concat(M), d.length > 0 && m.push(\"var \" + d.join(\",\"));\n        for(var s = 0; s < r.arrayArgs.length; ++s)m.push(\"p\" + s + \"|=0\");\n        r.pre.body.length > 3 && m.push(xr(r.pre, r, t));\n        var b = xr(r.body, r, t), _ = ln(l);\n        _ < n ? m.push(cn(_, l[0], r, b)) : m.push(jr(l[0], r, b)), r.post.body.length > 3 && m.push(xr(r.post, r, t)), r.debug && console.log(\"-----Generated cwise routine for \", e, \":\\n\" + m.join(\"\\n\") + \"\\n----------\");\n        var g = [\n            r.funcName || \"unnamed\",\n            \"_cwise_loop_\",\n            a[0].join(\"s\"),\n            \"m\",\n            _,\n            pn(t)\n        ].join(\"\"), N = new Function([\n            \"function \",\n            g,\n            \"(\",\n            v.join(\",\"),\n            \"){\",\n            m.join(\"\\n\"),\n            \"} return \",\n            g\n        ].join(\"\"));\n        return N();\n    }\n    Rr.exports = fn;\n});\n_c9 = Br;\nvar Yr = K(_c10 = (wt, Ur)=>{\n    \"use strict\";\n    var yn = Br();\n    function dn(r) {\n        var e = [\n            \"'use strict'\",\n            \"var CACHED={}\"\n        ], n = [], a = r.funcName + \"_cwise_thunk\";\n        e.push([\n            \"return function \",\n            a,\n            \"(\",\n            r.shimArgs.join(\",\"),\n            \"){\"\n        ].join(\"\"));\n        for(var t = [], s = [], i = [\n            [\n                \"array\",\n                r.arrayArgs[0],\n                \".shape.slice(\",\n                Math.max(0, r.arrayBlockIndices[0]),\n                r.arrayBlockIndices[0] < 0 ? \",\" + r.arrayBlockIndices[0] + \")\" : \")\"\n            ].join(\"\")\n        ], h = [], o = [], c = 0; c < r.arrayArgs.length; ++c){\n            var l = r.arrayArgs[c];\n            n.push([\n                \"t\",\n                l,\n                \"=array\",\n                l,\n                \".dtype,\",\n                \"r\",\n                l,\n                \"=array\",\n                l,\n                \".order\"\n            ].join(\"\")), t.push(\"t\" + l), t.push(\"r\" + l), s.push(\"t\" + l), s.push(\"r\" + l + \".join()\"), i.push(\"array\" + l + \".data\"), i.push(\"array\" + l + \".stride\"), i.push(\"array\" + l + \".offset|0\"), c > 0 && (h.push(\"array\" + r.arrayArgs[0] + \".shape.length===array\" + l + \".shape.length+\" + (Math.abs(r.arrayBlockIndices[0]) - Math.abs(r.arrayBlockIndices[c]))), o.push(\"array\" + r.arrayArgs[0] + \".shape[shapeIndex+\" + Math.max(0, r.arrayBlockIndices[0]) + \"]===array\" + l + \".shape[shapeIndex+\" + Math.max(0, r.arrayBlockIndices[c]) + \"]\"));\n        }\n        r.arrayArgs.length > 1 && (e.push(\"if (!(\" + h.join(\" && \") + \")) throw new Error('cwise: Arrays do not all have the same dimensionality!')\"), e.push(\"for(var shapeIndex=array\" + r.arrayArgs[0] + \".shape.length-\" + Math.abs(r.arrayBlockIndices[0]) + \"; shapeIndex-->0;) {\"), e.push(\"if (!(\" + o.join(\" && \") + \")) throw new Error('cwise: Arrays do not all have the same shape!')\"), e.push(\"}\"));\n        for(var c = 0; c < r.scalarArgs.length; ++c)i.push(\"scalar\" + r.scalarArgs[c]);\n        n.push([\n            \"type=[\",\n            s.join(\",\"),\n            \"].join()\"\n        ].join(\"\")), n.push(\"proc=CACHED[type]\"), e.push(\"var \" + n.join(\",\")), e.push([\n            \"if(!proc){\",\n            \"CACHED[type]=proc=compile([\",\n            t.join(\",\"),\n            \"])}\",\n            \"return proc(\",\n            i.join(\",\"),\n            \")}\"\n        ].join(\"\")), r.debug && console.log(\"-----Generated thunk:\\n\" + e.join(\"\\n\") + \"\\n----------\");\n        var f = new Function(\"compile\", e.join(\"\\n\"));\n        return f(yn.bind(void 0, r));\n    }\n    Ur.exports = dn;\n});\n_c11 = Yr;\nvar Qr = K(_c12 = (kt, Gr)=>{\n    \"use strict\";\n    var vn = Yr();\n    function mn() {\n        this.argTypes = [], this.shimArgs = [], this.arrayArgs = [], this.arrayBlockIndices = [], this.scalarArgs = [], this.offsetArgs = [], this.offsetArgIndex = [], this.indexArgs = [], this.shapeArgs = [], this.funcName = \"\", this.pre = null, this.body = null, this.post = null, this.debug = !1;\n    }\n    function un(r) {\n        var e = new mn;\n        e.pre = r.pre, e.body = r.body, e.post = r.post;\n        var n = r.args.slice(0);\n        e.argTypes = n;\n        for(var a = 0; a < n.length; ++a){\n            var t = n[a];\n            if (t === \"array\" || typeof t == \"object\" && t.blockIndices) {\n                if (e.argTypes[a] = \"array\", e.arrayArgs.push(a), e.arrayBlockIndices.push(t.blockIndices ? t.blockIndices : 0), e.shimArgs.push(\"array\" + a), a < e.pre.args.length && e.pre.args[a].count > 0) throw new Error(\"cwise: pre() block may not reference array args\");\n                if (a < e.post.args.length && e.post.args[a].count > 0) throw new Error(\"cwise: post() block may not reference array args\");\n            } else if (t === \"scalar\") e.scalarArgs.push(a), e.shimArgs.push(\"scalar\" + a);\n            else if (t === \"index\") {\n                if (e.indexArgs.push(a), a < e.pre.args.length && e.pre.args[a].count > 0) throw new Error(\"cwise: pre() block may not reference array index\");\n                if (a < e.body.args.length && e.body.args[a].lvalue) throw new Error(\"cwise: body() block may not write to array index\");\n                if (a < e.post.args.length && e.post.args[a].count > 0) throw new Error(\"cwise: post() block may not reference array index\");\n            } else if (t === \"shape\") {\n                if (e.shapeArgs.push(a), a < e.pre.args.length && e.pre.args[a].lvalue) throw new Error(\"cwise: pre() block may not write to array shape\");\n                if (a < e.body.args.length && e.body.args[a].lvalue) throw new Error(\"cwise: body() block may not write to array shape\");\n                if (a < e.post.args.length && e.post.args[a].lvalue) throw new Error(\"cwise: post() block may not write to array shape\");\n            } else if (typeof t == \"object\" && t.offset) e.argTypes[a] = \"offset\", e.offsetArgs.push({\n                array: t.array,\n                offset: t.offset\n            }), e.offsetArgIndex.push(a);\n            else throw new Error(\"cwise: Unknown argument type \" + n[a]);\n        }\n        if (e.arrayArgs.length <= 0) throw new Error(\"cwise: No array arguments specified\");\n        if (e.pre.args.length > n.length) throw new Error(\"cwise: Too many arguments in pre() block\");\n        if (e.body.args.length > n.length) throw new Error(\"cwise: Too many arguments in body() block\");\n        if (e.post.args.length > n.length) throw new Error(\"cwise: Too many arguments in post() block\");\n        return e.debug = !!r.printCode || !!r.debug, e.funcName = r.funcName || \"cwise\", e.blockSize = r.blockSize || 64, vn(e);\n    }\n    Gr.exports = un;\n});\n_c13 = Qr;\nvar sr = K((I)=>{\n    \"use strict\";\n    var B = Qr(), dr = {\n        body: \"\",\n        args: [],\n        thisVars: [],\n        localVars: []\n    };\n    function gr(r) {\n        if (!r) return dr;\n        for(var e = 0; e < r.args.length; ++e){\n            var n = r.args[e];\n            e === 0 ? r.args[e] = {\n                name: n,\n                lvalue: !0,\n                rvalue: !!r.rvalue,\n                count: r.count || 1\n            } : r.args[e] = {\n                name: n,\n                lvalue: !1,\n                rvalue: !0,\n                count: 1\n            };\n        }\n        return r.thisVars || (r.thisVars = []), r.localVars || (r.localVars = []), r;\n    }\n    function xn(r) {\n        return B({\n            args: r.args,\n            pre: gr(r.pre),\n            body: gr(r.body),\n            post: gr(r.proc),\n            funcName: r.funcName\n        });\n    }\n    function O(r) {\n        for(var e = [], n = 0; n < r.args.length; ++n)e.push(\"a\" + n);\n        var a = new Function(\"P\", [\n            \"return function \",\n            r.funcName,\n            \"_ndarrayops(\",\n            e.join(\",\"),\n            \") {P(\",\n            e.join(\",\"),\n            \");return a0}\"\n        ].join(\"\"));\n        return a(xn(r));\n    }\n    var $r = {\n        add: \"+\",\n        sub: \"-\",\n        mul: \"*\",\n        div: \"/\",\n        mod: \"%\",\n        band: \"&\",\n        bor: \"|\",\n        bxor: \"^\",\n        lshift: \"<<\",\n        rshift: \">>\",\n        rrshift: \">>>\"\n    };\n    (function() {\n        for(var r in $r){\n            var e = $r[r];\n            I[r] = O({\n                args: [\n                    \"array\",\n                    \"array\",\n                    \"array\"\n                ],\n                body: {\n                    args: [\n                        \"a\",\n                        \"b\",\n                        \"c\"\n                    ],\n                    body: \"a=b\" + e + \"c\"\n                },\n                funcName: r\n            }), I[r + \"eq\"] = O({\n                args: [\n                    \"array\",\n                    \"array\"\n                ],\n                body: {\n                    args: [\n                        \"a\",\n                        \"b\"\n                    ],\n                    body: \"a\" + e + \"=b\"\n                },\n                rvalue: !0,\n                funcName: r + \"eq\"\n            }), I[r + \"s\"] = O({\n                args: [\n                    \"array\",\n                    \"array\",\n                    \"scalar\"\n                ],\n                body: {\n                    args: [\n                        \"a\",\n                        \"b\",\n                        \"s\"\n                    ],\n                    body: \"a=b\" + e + \"s\"\n                },\n                funcName: r + \"s\"\n            }), I[r + \"seq\"] = O({\n                args: [\n                    \"array\",\n                    \"scalar\"\n                ],\n                body: {\n                    args: [\n                        \"a\",\n                        \"s\"\n                    ],\n                    body: \"a\" + e + \"=s\"\n                },\n                rvalue: !0,\n                funcName: r + \"seq\"\n            });\n        }\n    })();\n    var Hr = {\n        not: \"!\",\n        bnot: \"~\",\n        neg: \"-\",\n        recip: \"1.0/\"\n    };\n    (function() {\n        for(var r in Hr){\n            var e = Hr[r];\n            I[r] = O({\n                args: [\n                    \"array\",\n                    \"array\"\n                ],\n                body: {\n                    args: [\n                        \"a\",\n                        \"b\"\n                    ],\n                    body: \"a=\" + e + \"b\"\n                },\n                funcName: r\n            }), I[r + \"eq\"] = O({\n                args: [\n                    \"array\"\n                ],\n                body: {\n                    args: [\n                        \"a\"\n                    ],\n                    body: \"a=\" + e + \"a\"\n                },\n                rvalue: !0,\n                count: 2,\n                funcName: r + \"eq\"\n            });\n        }\n    })();\n    var Wr = {\n        and: \"&&\",\n        or: \"||\",\n        eq: \"===\",\n        neq: \"!==\",\n        lt: \"<\",\n        gt: \">\",\n        leq: \"<=\",\n        geq: \">=\"\n    };\n    (function() {\n        for(var r in Wr){\n            var e = Wr[r];\n            I[r] = O({\n                args: [\n                    \"array\",\n                    \"array\",\n                    \"array\"\n                ],\n                body: {\n                    args: [\n                        \"a\",\n                        \"b\",\n                        \"c\"\n                    ],\n                    body: \"a=b\" + e + \"c\"\n                },\n                funcName: r\n            }), I[r + \"s\"] = O({\n                args: [\n                    \"array\",\n                    \"array\",\n                    \"scalar\"\n                ],\n                body: {\n                    args: [\n                        \"a\",\n                        \"b\",\n                        \"s\"\n                    ],\n                    body: \"a=b\" + e + \"s\"\n                },\n                funcName: r + \"s\"\n            }), I[r + \"eq\"] = O({\n                args: [\n                    \"array\",\n                    \"array\"\n                ],\n                body: {\n                    args: [\n                        \"a\",\n                        \"b\"\n                    ],\n                    body: \"a=a\" + e + \"b\"\n                },\n                rvalue: !0,\n                count: 2,\n                funcName: r + \"eq\"\n            }), I[r + \"seq\"] = O({\n                args: [\n                    \"array\",\n                    \"scalar\"\n                ],\n                body: {\n                    args: [\n                        \"a\",\n                        \"s\"\n                    ],\n                    body: \"a=a\" + e + \"s\"\n                },\n                rvalue: !0,\n                count: 2,\n                funcName: r + \"seq\"\n            });\n        }\n    })();\n    var Zr = [\n        \"abs\",\n        \"acos\",\n        \"asin\",\n        \"atan\",\n        \"ceil\",\n        \"cos\",\n        \"exp\",\n        \"floor\",\n        \"log\",\n        \"round\",\n        \"sin\",\n        \"sqrt\",\n        \"tan\"\n    ];\n    (function() {\n        for(var r = 0; r < Zr.length; ++r){\n            var e = Zr[r];\n            I[e] = O({\n                args: [\n                    \"array\",\n                    \"array\"\n                ],\n                pre: {\n                    args: [],\n                    body: \"this_f=Math.\" + e,\n                    thisVars: [\n                        \"this_f\"\n                    ]\n                },\n                body: {\n                    args: [\n                        \"a\",\n                        \"b\"\n                    ],\n                    body: \"a=this_f(b)\",\n                    thisVars: [\n                        \"this_f\"\n                    ]\n                },\n                funcName: e\n            }), I[e + \"eq\"] = O({\n                args: [\n                    \"array\"\n                ],\n                pre: {\n                    args: [],\n                    body: \"this_f=Math.\" + e,\n                    thisVars: [\n                        \"this_f\"\n                    ]\n                },\n                body: {\n                    args: [\n                        \"a\"\n                    ],\n                    body: \"a=this_f(a)\",\n                    thisVars: [\n                        \"this_f\"\n                    ]\n                },\n                rvalue: !0,\n                count: 2,\n                funcName: e + \"eq\"\n            });\n        }\n    })();\n    var Xr = [\n        \"max\",\n        \"min\",\n        \"atan2\",\n        \"pow\"\n    ];\n    (function() {\n        for(var r = 0; r < Xr.length; ++r){\n            var e = Xr[r];\n            I[e] = O({\n                args: [\n                    \"array\",\n                    \"array\",\n                    \"array\"\n                ],\n                pre: {\n                    args: [],\n                    body: \"this_f=Math.\" + e,\n                    thisVars: [\n                        \"this_f\"\n                    ]\n                },\n                body: {\n                    args: [\n                        \"a\",\n                        \"b\",\n                        \"c\"\n                    ],\n                    body: \"a=this_f(b,c)\",\n                    thisVars: [\n                        \"this_f\"\n                    ]\n                },\n                funcName: e\n            }), I[e + \"s\"] = O({\n                args: [\n                    \"array\",\n                    \"array\",\n                    \"scalar\"\n                ],\n                pre: {\n                    args: [],\n                    body: \"this_f=Math.\" + e,\n                    thisVars: [\n                        \"this_f\"\n                    ]\n                },\n                body: {\n                    args: [\n                        \"a\",\n                        \"b\",\n                        \"c\"\n                    ],\n                    body: \"a=this_f(b,c)\",\n                    thisVars: [\n                        \"this_f\"\n                    ]\n                },\n                funcName: e + \"s\"\n            }), I[e + \"eq\"] = O({\n                args: [\n                    \"array\",\n                    \"array\"\n                ],\n                pre: {\n                    args: [],\n                    body: \"this_f=Math.\" + e,\n                    thisVars: [\n                        \"this_f\"\n                    ]\n                },\n                body: {\n                    args: [\n                        \"a\",\n                        \"b\"\n                    ],\n                    body: \"a=this_f(a,b)\",\n                    thisVars: [\n                        \"this_f\"\n                    ]\n                },\n                rvalue: !0,\n                count: 2,\n                funcName: e + \"eq\"\n            }), I[e + \"seq\"] = O({\n                args: [\n                    \"array\",\n                    \"scalar\"\n                ],\n                pre: {\n                    args: [],\n                    body: \"this_f=Math.\" + e,\n                    thisVars: [\n                        \"this_f\"\n                    ]\n                },\n                body: {\n                    args: [\n                        \"a\",\n                        \"b\"\n                    ],\n                    body: \"a=this_f(a,b)\",\n                    thisVars: [\n                        \"this_f\"\n                    ]\n                },\n                rvalue: !0,\n                count: 2,\n                funcName: e + \"seq\"\n            });\n        }\n    })();\n    var Kr = [\n        \"atan2\",\n        \"pow\"\n    ];\n    (function() {\n        for(var r = 0; r < Kr.length; ++r){\n            var e = Kr[r];\n            I[e + \"op\"] = O({\n                args: [\n                    \"array\",\n                    \"array\",\n                    \"array\"\n                ],\n                pre: {\n                    args: [],\n                    body: \"this_f=Math.\" + e,\n                    thisVars: [\n                        \"this_f\"\n                    ]\n                },\n                body: {\n                    args: [\n                        \"a\",\n                        \"b\",\n                        \"c\"\n                    ],\n                    body: \"a=this_f(c,b)\",\n                    thisVars: [\n                        \"this_f\"\n                    ]\n                },\n                funcName: e + \"op\"\n            }), I[e + \"ops\"] = O({\n                args: [\n                    \"array\",\n                    \"array\",\n                    \"scalar\"\n                ],\n                pre: {\n                    args: [],\n                    body: \"this_f=Math.\" + e,\n                    thisVars: [\n                        \"this_f\"\n                    ]\n                },\n                body: {\n                    args: [\n                        \"a\",\n                        \"b\",\n                        \"c\"\n                    ],\n                    body: \"a=this_f(c,b)\",\n                    thisVars: [\n                        \"this_f\"\n                    ]\n                },\n                funcName: e + \"ops\"\n            }), I[e + \"opeq\"] = O({\n                args: [\n                    \"array\",\n                    \"array\"\n                ],\n                pre: {\n                    args: [],\n                    body: \"this_f=Math.\" + e,\n                    thisVars: [\n                        \"this_f\"\n                    ]\n                },\n                body: {\n                    args: [\n                        \"a\",\n                        \"b\"\n                    ],\n                    body: \"a=this_f(b,a)\",\n                    thisVars: [\n                        \"this_f\"\n                    ]\n                },\n                rvalue: !0,\n                count: 2,\n                funcName: e + \"opeq\"\n            }), I[e + \"opseq\"] = O({\n                args: [\n                    \"array\",\n                    \"scalar\"\n                ],\n                pre: {\n                    args: [],\n                    body: \"this_f=Math.\" + e,\n                    thisVars: [\n                        \"this_f\"\n                    ]\n                },\n                body: {\n                    args: [\n                        \"a\",\n                        \"b\"\n                    ],\n                    body: \"a=this_f(b,a)\",\n                    thisVars: [\n                        \"this_f\"\n                    ]\n                },\n                rvalue: !0,\n                count: 2,\n                funcName: e + \"opseq\"\n            });\n        }\n    })();\n    I.any = B({\n        args: [\n            \"array\"\n        ],\n        pre: dr,\n        body: {\n            args: [\n                {\n                    name: \"a\",\n                    lvalue: !1,\n                    rvalue: !0,\n                    count: 1\n                }\n            ],\n            body: \"if(a){return true}\",\n            localVars: [],\n            thisVars: []\n        },\n        post: {\n            args: [],\n            localVars: [],\n            thisVars: [],\n            body: \"return false\"\n        },\n        funcName: \"any\"\n    });\n    I.all = B({\n        args: [\n            \"array\"\n        ],\n        pre: dr,\n        body: {\n            args: [\n                {\n                    name: \"x\",\n                    lvalue: !1,\n                    rvalue: !0,\n                    count: 1\n                }\n            ],\n            body: \"if(!x){return false}\",\n            localVars: [],\n            thisVars: []\n        },\n        post: {\n            args: [],\n            localVars: [],\n            thisVars: [],\n            body: \"return true\"\n        },\n        funcName: \"all\"\n    });\n    I.sum = B({\n        args: [\n            \"array\"\n        ],\n        pre: {\n            args: [],\n            localVars: [],\n            thisVars: [\n                \"this_s\"\n            ],\n            body: \"this_s=0\"\n        },\n        body: {\n            args: [\n                {\n                    name: \"a\",\n                    lvalue: !1,\n                    rvalue: !0,\n                    count: 1\n                }\n            ],\n            body: \"this_s+=a\",\n            localVars: [],\n            thisVars: [\n                \"this_s\"\n            ]\n        },\n        post: {\n            args: [],\n            localVars: [],\n            thisVars: [\n                \"this_s\"\n            ],\n            body: \"return this_s\"\n        },\n        funcName: \"sum\"\n    });\n    I.prod = B({\n        args: [\n            \"array\"\n        ],\n        pre: {\n            args: [],\n            localVars: [],\n            thisVars: [\n                \"this_s\"\n            ],\n            body: \"this_s=1\"\n        },\n        body: {\n            args: [\n                {\n                    name: \"a\",\n                    lvalue: !1,\n                    rvalue: !0,\n                    count: 1\n                }\n            ],\n            body: \"this_s*=a\",\n            localVars: [],\n            thisVars: [\n                \"this_s\"\n            ]\n        },\n        post: {\n            args: [],\n            localVars: [],\n            thisVars: [\n                \"this_s\"\n            ],\n            body: \"return this_s\"\n        },\n        funcName: \"prod\"\n    });\n    I.norm2squared = B({\n        args: [\n            \"array\"\n        ],\n        pre: {\n            args: [],\n            localVars: [],\n            thisVars: [\n                \"this_s\"\n            ],\n            body: \"this_s=0\"\n        },\n        body: {\n            args: [\n                {\n                    name: \"a\",\n                    lvalue: !1,\n                    rvalue: !0,\n                    count: 2\n                }\n            ],\n            body: \"this_s+=a*a\",\n            localVars: [],\n            thisVars: [\n                \"this_s\"\n            ]\n        },\n        post: {\n            args: [],\n            localVars: [],\n            thisVars: [\n                \"this_s\"\n            ],\n            body: \"return this_s\"\n        },\n        funcName: \"norm2squared\"\n    });\n    I.norm2 = B({\n        args: [\n            \"array\"\n        ],\n        pre: {\n            args: [],\n            localVars: [],\n            thisVars: [\n                \"this_s\"\n            ],\n            body: \"this_s=0\"\n        },\n        body: {\n            args: [\n                {\n                    name: \"a\",\n                    lvalue: !1,\n                    rvalue: !0,\n                    count: 2\n                }\n            ],\n            body: \"this_s+=a*a\",\n            localVars: [],\n            thisVars: [\n                \"this_s\"\n            ]\n        },\n        post: {\n            args: [],\n            localVars: [],\n            thisVars: [\n                \"this_s\"\n            ],\n            body: \"return Math.sqrt(this_s)\"\n        },\n        funcName: \"norm2\"\n    });\n    I.norminf = B({\n        args: [\n            \"array\"\n        ],\n        pre: {\n            args: [],\n            localVars: [],\n            thisVars: [\n                \"this_s\"\n            ],\n            body: \"this_s=0\"\n        },\n        body: {\n            args: [\n                {\n                    name: \"a\",\n                    lvalue: !1,\n                    rvalue: !0,\n                    count: 4\n                }\n            ],\n            body: \"if(-a>this_s){this_s=-a}else if(a>this_s){this_s=a}\",\n            localVars: [],\n            thisVars: [\n                \"this_s\"\n            ]\n        },\n        post: {\n            args: [],\n            localVars: [],\n            thisVars: [\n                \"this_s\"\n            ],\n            body: \"return this_s\"\n        },\n        funcName: \"norminf\"\n    });\n    I.norm1 = B({\n        args: [\n            \"array\"\n        ],\n        pre: {\n            args: [],\n            localVars: [],\n            thisVars: [\n                \"this_s\"\n            ],\n            body: \"this_s=0\"\n        },\n        body: {\n            args: [\n                {\n                    name: \"a\",\n                    lvalue: !1,\n                    rvalue: !0,\n                    count: 3\n                }\n            ],\n            body: \"this_s+=a<0?-a:a\",\n            localVars: [],\n            thisVars: [\n                \"this_s\"\n            ]\n        },\n        post: {\n            args: [],\n            localVars: [],\n            thisVars: [\n                \"this_s\"\n            ],\n            body: \"return this_s\"\n        },\n        funcName: \"norm1\"\n    });\n    I.sup = B({\n        args: [\n            \"array\"\n        ],\n        pre: {\n            body: \"this_h=-Infinity\",\n            args: [],\n            thisVars: [\n                \"this_h\"\n            ],\n            localVars: []\n        },\n        body: {\n            body: \"if(_inline_1_arg0_>this_h)this_h=_inline_1_arg0_\",\n            args: [\n                {\n                    name: \"_inline_1_arg0_\",\n                    lvalue: !1,\n                    rvalue: !0,\n                    count: 2\n                }\n            ],\n            thisVars: [\n                \"this_h\"\n            ],\n            localVars: []\n        },\n        post: {\n            body: \"return this_h\",\n            args: [],\n            thisVars: [\n                \"this_h\"\n            ],\n            localVars: []\n        }\n    });\n    I.inf = B({\n        args: [\n            \"array\"\n        ],\n        pre: {\n            body: \"this_h=Infinity\",\n            args: [],\n            thisVars: [\n                \"this_h\"\n            ],\n            localVars: []\n        },\n        body: {\n            body: \"if(_inline_1_arg0_<this_h)this_h=_inline_1_arg0_\",\n            args: [\n                {\n                    name: \"_inline_1_arg0_\",\n                    lvalue: !1,\n                    rvalue: !0,\n                    count: 2\n                }\n            ],\n            thisVars: [\n                \"this_h\"\n            ],\n            localVars: []\n        },\n        post: {\n            body: \"return this_h\",\n            args: [],\n            thisVars: [\n                \"this_h\"\n            ],\n            localVars: []\n        }\n    });\n    I.argmin = B({\n        args: [\n            \"index\",\n            \"array\",\n            \"shape\"\n        ],\n        pre: {\n            body: \"{this_v=Infinity;this_i=_inline_0_arg2_.slice(0)}\",\n            args: [\n                {\n                    name: \"_inline_0_arg0_\",\n                    lvalue: !1,\n                    rvalue: !1,\n                    count: 0\n                },\n                {\n                    name: \"_inline_0_arg1_\",\n                    lvalue: !1,\n                    rvalue: !1,\n                    count: 0\n                },\n                {\n                    name: \"_inline_0_arg2_\",\n                    lvalue: !1,\n                    rvalue: !0,\n                    count: 1\n                }\n            ],\n            thisVars: [\n                \"this_i\",\n                \"this_v\"\n            ],\n            localVars: []\n        },\n        body: {\n            body: \"{if(_inline_1_arg1_<this_v){this_v=_inline_1_arg1_;for(var _inline_1_k=0;_inline_1_k<_inline_1_arg0_.length;++_inline_1_k){this_i[_inline_1_k]=_inline_1_arg0_[_inline_1_k]}}}\",\n            args: [\n                {\n                    name: \"_inline_1_arg0_\",\n                    lvalue: !1,\n                    rvalue: !0,\n                    count: 2\n                },\n                {\n                    name: \"_inline_1_arg1_\",\n                    lvalue: !1,\n                    rvalue: !0,\n                    count: 2\n                }\n            ],\n            thisVars: [\n                \"this_i\",\n                \"this_v\"\n            ],\n            localVars: [\n                \"_inline_1_k\"\n            ]\n        },\n        post: {\n            body: \"{return this_i}\",\n            args: [],\n            thisVars: [\n                \"this_i\"\n            ],\n            localVars: []\n        }\n    });\n    I.argmax = B({\n        args: [\n            \"index\",\n            \"array\",\n            \"shape\"\n        ],\n        pre: {\n            body: \"{this_v=-Infinity;this_i=_inline_0_arg2_.slice(0)}\",\n            args: [\n                {\n                    name: \"_inline_0_arg0_\",\n                    lvalue: !1,\n                    rvalue: !1,\n                    count: 0\n                },\n                {\n                    name: \"_inline_0_arg1_\",\n                    lvalue: !1,\n                    rvalue: !1,\n                    count: 0\n                },\n                {\n                    name: \"_inline_0_arg2_\",\n                    lvalue: !1,\n                    rvalue: !0,\n                    count: 1\n                }\n            ],\n            thisVars: [\n                \"this_i\",\n                \"this_v\"\n            ],\n            localVars: []\n        },\n        body: {\n            body: \"{if(_inline_1_arg1_>this_v){this_v=_inline_1_arg1_;for(var _inline_1_k=0;_inline_1_k<_inline_1_arg0_.length;++_inline_1_k){this_i[_inline_1_k]=_inline_1_arg0_[_inline_1_k]}}}\",\n            args: [\n                {\n                    name: \"_inline_1_arg0_\",\n                    lvalue: !1,\n                    rvalue: !0,\n                    count: 2\n                },\n                {\n                    name: \"_inline_1_arg1_\",\n                    lvalue: !1,\n                    rvalue: !0,\n                    count: 2\n                }\n            ],\n            thisVars: [\n                \"this_i\",\n                \"this_v\"\n            ],\n            localVars: [\n                \"_inline_1_k\"\n            ]\n        },\n        post: {\n            body: \"{return this_i}\",\n            args: [],\n            thisVars: [\n                \"this_i\"\n            ],\n            localVars: []\n        }\n    });\n    I.random = O({\n        args: [\n            \"array\"\n        ],\n        pre: {\n            args: [],\n            body: \"this_f=Math.random\",\n            thisVars: [\n                \"this_f\"\n            ]\n        },\n        body: {\n            args: [\n                \"a\"\n            ],\n            body: \"a=this_f()\",\n            thisVars: [\n                \"this_f\"\n            ]\n        },\n        funcName: \"random\"\n    });\n    I.assign = O({\n        args: [\n            \"array\",\n            \"array\"\n        ],\n        body: {\n            args: [\n                \"a\",\n                \"b\"\n            ],\n            body: \"a=b\"\n        },\n        funcName: \"assign\"\n    });\n    I.assigns = O({\n        args: [\n            \"array\",\n            \"scalar\"\n        ],\n        body: {\n            args: [\n                \"a\",\n                \"b\"\n            ],\n            body: \"a=b\"\n        },\n        funcName: \"assigns\"\n    });\n    I.equals = B({\n        args: [\n            \"array\",\n            \"array\"\n        ],\n        pre: dr,\n        body: {\n            args: [\n                {\n                    name: \"x\",\n                    lvalue: !1,\n                    rvalue: !0,\n                    count: 1\n                },\n                {\n                    name: \"y\",\n                    lvalue: !1,\n                    rvalue: !0,\n                    count: 1\n                }\n            ],\n            body: \"if(x!==y){return false}\",\n            localVars: [],\n            thisVars: []\n        },\n        post: {\n            args: [],\n            localVars: [],\n            thisVars: [],\n            body: \"return true\"\n        },\n        funcName: \"equals\"\n    });\n});\nvar G = Q(tr(), 1), H = Q(sr(), 1);\nvar j = Q(tr(), 1), A = Q(sr(), 1), J = class {\n    static createFromUnnormalized(e) {\n        let n = A.sup(e), a = A.inf(e), t = (0, j.default)(new Float32Array(e.size), e.shape), s = n - a;\n        return s < 1e-4 ? A.assigns(t, 0) : (A.subs(t, e, a), A.divs(t, t, s)), new J(t, a, n);\n    }\n    get data() {\n        return this._dataNormalized;\n    }\n    get minD() {\n        return this._minD;\n    }\n    get maxD() {\n        return this._maxD;\n    }\n    denormalize() {\n        let e = (0, j.default)(new Float32Array(this._dataNormalized.size), this._dataNormalized.shape);\n        return A.muls(e, this._dataNormalized, this._maxD - this._minD), A.adds(e, e, this._minD), e;\n    }\n    constructor(e, n, a){\n        this._dataNormalized = e, this._minD = n, this._maxD = a;\n    }\n}, D = class {\n    get quantized() {\n        return this._quantized;\n    }\n    static maxIntBits(e) {\n        return 2 ** e - 1;\n    }\n    static fromNormalized(e, n) {\n        let a = e.data, t;\n        if (n === \"norm8x\") {\n            let s = D.maxIntBits(8), i = (0, j.default)(new Float32Array(a.size), a.shape);\n            A.muls(i, a, s), A.roundeq(i), t = (0, j.default)(new Uint8Array(i.data), a.shape);\n        } else if (n === \"norm565\") {\n            let s = (0, j.default)(new Float32Array(a.size), a.shape);\n            A.assign(s, a), A.mulseq(s.pick(null, 0), D.maxIntBits(5)), A.mulseq(s.pick(null, 1), D.maxIntBits(6)), A.mulseq(s.pick(null, 2), D.maxIntBits(5)), A.roundeq(s);\n            let i = (0, j.default)(new Uint16Array(s.data), a.shape), h = (0, j.default)(new Uint16Array(a.shape[0]), [\n                a.shape[0]\n            ]), o = (0, j.default)(new Uint16Array(a.shape[0]), [\n                a.shape[0]\n            ]);\n            A.lshifts(h, i.pick(null, 0), 11), A.lshifts(o, i.pick(null, 1), 5), A.boreq(h, o), A.boreq(h, i.pick(null, 2)), t = h;\n        } else {\n            let s = (0, j.default)(new Float32Array(a.size), a.shape);\n            A.assign(s, a), A.mulseq(s.pick(null, 0), D.maxIntBits(11)), A.mulseq(s.pick(null, 1), D.maxIntBits(10)), A.mulseq(s.pick(null, 2), D.maxIntBits(11)), A.roundeq(s);\n            let i = (0, j.default)(new Uint32Array(s.data), a.shape), h = (0, j.default)(new Uint32Array(a.shape[0]), [\n                a.shape[0]\n            ]), o = (0, j.default)(new Uint32Array(a.shape[0]), [\n                a.shape[0]\n            ]);\n            A.lshifts(h, i.pick(null, 0), 21), A.lshifts(o, i.pick(null, 1), 11), A.boreq(h, o), A.boreq(h, i.pick(null, 2)), t = h;\n        }\n        return new D(t, n);\n    }\n    dequantize(e, n) {\n        let a = this._method, t, s = this._quantized;\n        if (a === \"norm8x\") {\n            let i = D.maxIntBits(8);\n            t = (0, j.default)(new Float32Array(s.size), s.shape), A.muls(t, s, 1 / i);\n        } else if (a === \"norm565\") {\n            let i = (0, j.default)(new Uint8Array(s.shape[0]), [\n                s.shape[0]\n            ]), h = (0, j.default)(new Uint8Array(s.shape[0]), [\n                s.shape[0]\n            ]), o = (0, j.default)(new Uint8Array(s.shape[0]), [\n                s.shape[0]\n            ]);\n            A.rrshifts(i, s, 11), A.rrshifts(h, s, 5), A.bandseq(h, D.maxIntBits(6)), A.bands(o, s, D.maxIntBits(5)), t = (0, j.default)(new Float32Array(s.shape[0] * 3), [\n                s.shape[0],\n                3\n            ]), A.muls(t.pick(null, 0), i, 1 / D.maxIntBits(5)), A.muls(t.pick(null, 1), h, 1 / D.maxIntBits(6)), A.muls(t.pick(null, 2), o, 1 / D.maxIntBits(5));\n        } else {\n            let i = (0, j.default)(new Uint16Array(s.shape[0]), [\n                s.shape[0]\n            ]), h = (0, j.default)(new Uint16Array(s.shape[0]), [\n                s.shape[0]\n            ]), o = (0, j.default)(new Uint16Array(s.shape[0]), [\n                s.shape[0]\n            ]);\n            A.rrshifts(i, s, 21), A.rrshifts(h, s, 11), A.bandseq(h, D.maxIntBits(10)), A.bands(o, s, D.maxIntBits(11)), t = (0, j.default)(new Float32Array(s.shape[0] * 3), [\n                s.shape[0],\n                3\n            ]), A.muls(t.pick(null, 0), i, 1 / D.maxIntBits(11)), A.muls(t.pick(null, 1), h, 1 / D.maxIntBits(10)), A.muls(t.pick(null, 2), o, 1 / D.maxIntBits(11));\n        }\n        return new J(t, e, n);\n    }\n    constructor(e, n){\n        this._quantized = e, this._method = n;\n    }\n};\nvar E = class {\n    get length() {\n        return this._quantized.shape[0];\n    }\n    get nchunks() {\n        return this._minMaxMatrix.shape[0];\n    }\n    get quantized() {\n        return this._quantized;\n    }\n    get method() {\n        return this._quantizationMethod;\n    }\n    get minmaxMatrix() {\n        return this._minMaxMatrix;\n    }\n    _createPrunedMinMax(e) {\n        let n = e.length, a = this.minmaxMatrix.shape[0] - n, t = (0, G.default)(new Float32Array(a * 2), [\n            a,\n            2\n        ]), s = 0, i = a, h = 0, o = this.minmaxMatrix.shape[0];\n        for(let c = 0; c < e.length; c++)o = e[c], i = o - h + s, i > s && H.assign(t.hi(i, 2).lo(s, 0), this.minmaxMatrix.hi(o, 2).lo(h, 0)), s = i, h = o + 1;\n        return s < a && H.assign(t.lo(s, 0), this.minmaxMatrix.lo(h, 0)), t;\n    }\n    _createPrunedQuantized(e) {\n        let n = e.length, a = this.quantized.shape[0] - n, t = this._quantizationMethod, s, i;\n        if (t === \"norm8x\") {\n            i = this._quantized.shape[1];\n            let f = i ? a * i : a;\n            s = (0, G.default)(new Uint8Array(f), i ? [\n                a,\n                i\n            ] : [\n                a,\n                1\n            ]);\n        } else t === \"norm565\" ? s = (0, G.default)(new Uint16Array(a), [\n            a\n        ]) : s = (0, G.default)(new Uint32Array(a), [\n            a\n        ]);\n        let h = 0, o = a, c = 0, l = s.shape[0];\n        for(let f = 0; f < e.length; f++)l = e[f], o = l - c + h, o > h && (i ? H.assign(s.hi(o, i).lo(h, 0), this._quantized.hi(l, i).lo(c, 0)) : H.assign(s.hi(o).lo(h), this._quantized.hi(l).lo(c))), h = o, c = l + 1;\n        return h < a && (i ? H.assign(s.lo(h, 0), this._quantized.lo(c, 0)) : H.assign(s.lo(h), this._quantized.lo(c))), s;\n    }\n    pruneFeature(e, n, a) {\n        let t = this._createPrunedQuantized(e), s = this._createPrunedMinMax(n);\n        return new E(t, s, this._chunkSize, this._quantizationMethod, a, !0);\n    }\n    static getRequiredNChunks(e, n) {\n        return Math.floor(e / n);\n    }\n    static fromArray(e, n, a) {\n        let t = e.shape[0], s = Math.floor(t / a), i = (0, G.default)(new Float32Array(s * 2), [\n            s,\n            2\n        ], [\n            2,\n            1\n        ]), h;\n        n === \"norm8x\" ? h = (0, G.default)(new Uint8Array(e.size), e.shape) : n === \"norm565\" ? h = (0, G.default)(new Uint16Array(e.shape[0]), [\n            e.shape[0]\n        ]) : h = (0, G.default)(new Uint32Array(e.shape[0]), [\n            e.shape[0]\n        ]);\n        for(let o = 0; o < s; o++){\n            let c = o * a, l = o + 1 < s ? (o + 1) * a : t, f;\n            e.shape.length > 1 ? f = J.createFromUnnormalized(e.hi(l, e.shape[1]).lo(c, 0)) : f = J.createFromUnnormalized(e.hi(l).lo(c)), i.set(o, 0, f.minD), i.set(o, 1, f.maxD), h.shape.length > 1 ? H.assign(h.hi(l, h.shape[1]).lo(c, 0), D.fromNormalized(f, n).quantized) : H.assign(h.hi(l).lo(c), D.fromNormalized(f, n).quantized);\n        }\n        return new E(h, i, a, n);\n    }\n    denormDequant() {\n        let e = this._minMaxMatrix.shape[0], n = this._quantized, a = n.shape[0], t = this._quantizationMethod, s = this._chunkSize, i;\n        if (this._isDynamicChunks) {\n            if (!this._variableChunkSize) throw new Error(\"variable chunk must exists if chunkSize isDynamic\");\n            i = this._variableChunkSize;\n        }\n        let h;\n        t === \"norm8x\" ? h = (0, G.default)(new Float32Array(n.size), n.shape) : h = (0, G.default)(new Float32Array(a * 3), [\n            a,\n            3\n        ]);\n        let o = 0, c = s;\n        for(let l = 0; l < e; l++){\n            let [f, p] = [\n                this._minMaxMatrix.get(l, 0),\n                this._minMaxMatrix.get(l, 1)\n            ];\n            this._isDynamicChunks && (c = i[l]);\n            let v = l + 1 < e ? o + c : a, m;\n            n.shape.length > 1 ? m = new D(n.hi(v, n.shape[1]).lo(o, 0), t) : m = new D(n.hi(v).lo(o), t), H.assign(h.hi(v, h.shape[1]).lo(o, 0), m.dequantize(f, p).denormalize()), o = v;\n        }\n        return h;\n    }\n    static async fetchArrayBuffer(e) {\n        return await (await fetch(e, {\n            mode: \"cors\"\n        })).arrayBuffer();\n    }\n    constructor(e, n, a, t, s, i = !1){\n        this._quantized = e, this._minMaxMatrix = n, this._chunkSize = a, this._quantizationMethod = t, this._variableChunkSize = s, this._isDynamicChunks = i;\n    }\n};\nvar Z = Q(tr(), 1), k = Q(sr(), 1);\nvar Jr = \"http://127.0.0.1:8000\";\nvar er = Q(tr(), 1), C = Q(sr(), 1);\nvar re = [\n    1,\n    10,\n    100,\n    1e3,\n    1e4,\n    1e5,\n    1e6,\n    1e7,\n    1e8,\n    1e9\n];\nfunction ee(r) {\n    return r < 1e5 ? r < 100 ? r < 10 ? 0 : 1 : r < 1e4 ? r < 1e3 ? 2 : 3 : 4 : r < 1e7 ? r < 1e6 ? 5 : 6 : r < 1e9 ? r < 1e8 ? 7 : 8 : 9;\n}\nfunction ne(r, e) {\n    if (r === e) return 0;\n    if (~~r === r && ~~e === e) {\n        if (r === 0 || e === 0) return r < e ? -1 : 1;\n        if (r < 0 || e < 0) {\n            if (e >= 0) return -1;\n            if (r >= 0) return 1;\n            r = -r, e = -e;\n        }\n        let t = ee(r), s = ee(e), i = 0;\n        return t < s ? (r *= re[s - t - 1], e /= 10, i = -1) : t > s && (e *= re[t - s - 1], r /= 10, i = 1), r === e ? i : r < e ? -1 : 1;\n    }\n    let n = String(r), a = String(e);\n    return n === a ? 0 : n < a ? -1 : 1;\n}\nfunction gn(r) {\n    let e = 0;\n    for(; r >= 32;)e |= r & 1, r >>= 1;\n    return r + e;\n}\nfunction ae(r, e, n, a) {\n    let t = e + 1;\n    if (t === n) return 1;\n    if (a(r[t++], r[e]) < 0) {\n        for(; t < n && a(r[t], r[t - 1]) < 0;)t++;\n        Mn(r, e, t);\n    } else for(; t < n && a(r[t], r[t - 1]) >= 0;)t++;\n    return t - e;\n}\nfunction Mn(r, e, n) {\n    for(n--; e < n;){\n        let a = r[e];\n        r[e++] = r[n], r[n--] = a;\n    }\n}\n_c14 = Mn;\nfunction te(r, e, n, a, t) {\n    for(a === e && a++; a < n; a++){\n        let s = r[a], i = e, h = a;\n        for(; i < h;){\n            let c = i + h >>> 1;\n            t(s, r[c]) < 0 ? h = c : i = c + 1;\n        }\n        let o = a - i;\n        switch(o){\n            case 3:\n                r[i + 3] = r[i + 2];\n            case 2:\n                r[i + 2] = r[i + 1];\n            case 1:\n                r[i + 1] = r[i];\n                break;\n            default:\n                for(; o > 0;)r[i + o] = r[i + o - 1], o--;\n        }\n        r[i] = s;\n    }\n}\nfunction Mr(r, e, n, a, t, s) {\n    let i = 0, h = 0, o = 1;\n    if (s(r, e[n + t]) > 0) {\n        for(h = a - t; o < h && s(r, e[n + t + o]) > 0;)i = o, o = (o << 1) + 1, o <= 0 && (o = h);\n        o > h && (o = h), i += t, o += t;\n    } else {\n        for(h = t + 1; o < h && s(r, e[n + t - o]) <= 0;)i = o, o = (o << 1) + 1, o <= 0 && (o = h);\n        o > h && (o = h);\n        let c = i;\n        i = t - o, o = t - c;\n    }\n    for(i++; i < o;){\n        let c = i + (o - i >>> 1);\n        s(r, e[n + c]) > 0 ? i = c + 1 : o = c;\n    }\n    return o;\n}\n_c15 = Mr;\nfunction _r(r, e, n, a, t, s) {\n    let i = 0, h = 0, o = 1;\n    if (s(r, e[n + t]) < 0) {\n        for(h = t + 1; o < h && s(r, e[n + t - o]) < 0;)i = o, o = (o << 1) + 1, o <= 0 && (o = h);\n        o > h && (o = h);\n        let c = i;\n        i = t - o, o = t - c;\n    } else {\n        for(h = a - t; o < h && s(r, e[n + t + o]) >= 0;)i = o, o = (o << 1) + 1, o <= 0 && (o = h);\n        o > h && (o = h), i += t, o += t;\n    }\n    for(i++; i < o;){\n        let c = i + (o - i >>> 1);\n        s(r, e[n + c]) < 0 ? o = c : i = c + 1;\n    }\n    return o;\n}\nvar br = class {\n    pushRun(e, n) {\n        this.runStart[this.stackSize] = e, this.runLength[this.stackSize] = n, this.stackSize += 1;\n    }\n    mergeRuns() {\n        for(; this.stackSize > 1;){\n            let e = this.stackSize - 2;\n            if (e >= 1 && this.runLength[e - 1] <= this.runLength[e] + this.runLength[e + 1] || e >= 2 && this.runLength[e - 2] <= this.runLength[e] + this.runLength[e - 1]) this.runLength[e - 1] < this.runLength[e + 1] && e--;\n            else if (this.runLength[e] > this.runLength[e + 1]) break;\n            this.mergeAt(e);\n        }\n    }\n    forceMergeRuns() {\n        for(; this.stackSize > 1;){\n            let e = this.stackSize - 2;\n            e > 0 && this.runLength[e - 1] < this.runLength[e + 1] && e--, this.mergeAt(e);\n        }\n    }\n    mergeAt(e) {\n        let n = this.compare, a = this.array, t = this.runStart[e], s = this.runLength[e], i = this.runStart[e + 1], h = this.runLength[e + 1];\n        this.runLength[e] = s + h, e === this.stackSize - 3 && (this.runStart[e + 1] = this.runStart[e + 2], this.runLength[e + 1] = this.runLength[e + 2]), this.stackSize--;\n        let o = _r(a[i], a, t, s, 0, n);\n        t += o, s -= o, s !== 0 && (h = Mr(a[t + s - 1], a, i, h, h - 1, n), h !== 0 && (s <= h ? this.mergeLow(t, s, i, h) : this.mergeHigh(t, s, i, h)));\n    }\n    mergeLow(e, n, a, t) {\n        let s = this.compare, i = this.array, h = this.tmp, o = 0;\n        for(o = 0; o < n; o++)h[o] = i[e + o];\n        let c = 0, l = a, f = e;\n        if (i[f++] = i[l++], --t === 0) {\n            for(o = 0; o < n; o++)i[f + o] = h[c + o];\n            return;\n        }\n        if (n === 1) {\n            for(o = 0; o < t; o++)i[f + o] = i[l + o];\n            i[f + t] = h[c];\n            return;\n        }\n        let p = this.minGallop;\n        for(;;){\n            let v = 0, m = 0, d = !1;\n            do if (s(i[l], h[c]) < 0) {\n                if (i[f++] = i[l++], m++, v = 0, --t === 0) {\n                    d = !0;\n                    break;\n                }\n            } else if (i[f++] = h[c++], v++, m = 0, --n === 1) {\n                d = !0;\n                break;\n            }\n            while ((v | m) < p);\n            if (d) break;\n            do {\n                if (v = _r(i[l], h, c, n, 0, s), v !== 0) {\n                    for(o = 0; o < v; o++)i[f + o] = h[c + o];\n                    if (f += v, c += v, n -= v, n <= 1) {\n                        d = !0;\n                        break;\n                    }\n                }\n                if (i[f++] = i[l++], --t === 0) {\n                    d = !0;\n                    break;\n                }\n                if (m = Mr(h[c], i, l, t, 0, s), m !== 0) {\n                    for(o = 0; o < m; o++)i[f + o] = i[l + o];\n                    if (f += m, l += m, t -= m, t === 0) {\n                        d = !0;\n                        break;\n                    }\n                }\n                if (i[f++] = h[c++], --n === 1) {\n                    d = !0;\n                    break;\n                }\n                p--;\n            }while (v >= 7 || m >= 7);\n            if (d) break;\n            p < 0 && (p = 0), p += 2;\n        }\n        if (this.minGallop = p, p < 1 && (this.minGallop = 1), n === 1) {\n            for(o = 0; o < t; o++)i[f + o] = i[l + o];\n            i[f + t] = h[c];\n        } else {\n            if (n === 0) throw new Error(\"mergeLow preconditions were not respected\");\n            for(o = 0; o < n; o++)i[f + o] = h[c + o];\n        }\n    }\n    mergeHigh(e, n, a, t) {\n        let s = this.compare, i = this.array, h = this.tmp, o = 0;\n        for(o = 0; o < t; o++)h[o] = i[a + o];\n        let c = e + n - 1, l = t - 1, f = a + t - 1, p = 0, v = 0;\n        if (i[f--] = i[c--], --n === 0) {\n            for(p = f - (t - 1), o = 0; o < t; o++)i[p + o] = h[o];\n            return;\n        }\n        if (t === 1) {\n            for(f -= n, c -= n, v = f + 1, p = c + 1, o = n - 1; o >= 0; o--)i[v + o] = i[p + o];\n            i[f] = h[l];\n            return;\n        }\n        let m = this.minGallop;\n        for(;;){\n            let d = 0, y = 0, u = !1;\n            do if (s(h[l], i[c]) < 0) {\n                if (i[f--] = i[c--], d++, y = 0, --n === 0) {\n                    u = !0;\n                    break;\n                }\n            } else if (i[f--] = h[l--], y++, d = 0, --t === 1) {\n                u = !0;\n                break;\n            }\n            while ((d | y) < m);\n            if (u) break;\n            do {\n                if (d = n - _r(h[l], i, e, n, n - 1, s), d !== 0) {\n                    for(f -= d, c -= d, n -= d, v = f + 1, p = c + 1, o = d - 1; o >= 0; o--)i[v + o] = i[p + o];\n                    if (n === 0) {\n                        u = !0;\n                        break;\n                    }\n                }\n                if (i[f--] = h[l--], --t === 1) {\n                    u = !0;\n                    break;\n                }\n                if (y = t - Mr(i[c], h, 0, t, t - 1, s), y !== 0) {\n                    for(f -= y, l -= y, t -= y, v = f + 1, p = l + 1, o = 0; o < y; o++)i[v + o] = h[p + o];\n                    if (t <= 1) {\n                        u = !0;\n                        break;\n                    }\n                }\n                if (i[f--] = i[c--], --n === 0) {\n                    u = !0;\n                    break;\n                }\n                m--;\n            }while (d >= 7 || y >= 7);\n            if (u) break;\n            m < 0 && (m = 0), m += 2;\n        }\n        if (this.minGallop = m, m < 1 && (this.minGallop = 1), t === 1) {\n            for(f -= n, c -= n, v = f + 1, p = c + 1, o = n - 1; o >= 0; o--)i[v + o] = i[p + o];\n            i[f] = h[l];\n        } else {\n            if (t === 0) throw new Error(\"mergeHigh preconditions were not respected\");\n            for(p = f - (t - 1), o = 0; o < t; o++)i[p + o] = h[o];\n        }\n    }\n    constructor(e, n){\n        $(this, \"array\", null);\n        $(this, \"compare\", null);\n        $(this, \"minGallop\", 7);\n        $(this, \"length\", 0);\n        $(this, \"tmpStorageLength\", 256);\n        $(this, \"stackLength\", 0);\n        $(this, \"runStart\", null);\n        $(this, \"runLength\", null);\n        $(this, \"stackSize\", 0);\n        this.array = e, this.compare = n, this.length = e.length, this.length < 2 * 256 && (this.tmpStorageLength = this.length >>> 1), this.tmp = new Array(this.tmpStorageLength), this.stackLength = this.length < 120 ? 5 : this.length < 1542 ? 10 : this.length < 119151 ? 19 : 40, this.runStart = new Array(this.stackLength), this.runLength = new Array(this.stackLength);\n    }\n};\nfunction se(r, e, n, a) {\n    if (!Array.isArray(r)) throw new TypeError(\"Can only sort arrays\");\n    e ? typeof e != \"function\" && (a = n, n = e, e = ne) : e = ne, n || (n = 0), a || (a = r.length);\n    let t = a - n;\n    if (t < 2) return;\n    let s = 0;\n    if (t < 32) {\n        s = ae(r, n, a, e), te(r, n, a, n + s, e);\n        return;\n    }\n    let i = new br(r, e), h = gn(t);\n    do {\n        if (s = ae(r, n, a, e), s < h) {\n            let o = t;\n            o > h && (o = h), te(r, n, n + o, n + s, e), s = o;\n        }\n        i.pushRun(n, s), i.mergeRuns(), t -= s, n += s;\n    }while (t !== 0);\n    i.forceMergeRuns();\n}\nfunction Ar(r) {\n    let e = (0, er.default)(new Int32Array(r.shape[0]), [\n        r.shape[0]\n    ]), n = (0, er.default)(new Int32Array(r.shape[0]), [\n        r.shape[0]\n    ]);\n    return C.bands(e, r, 1023), C.lshifts(n, e, 16), C.bxoreq(e, n), C.bandseq(e, 4278190335), C.lshifts(n, e, 8), C.bxoreq(e, n), C.bandseq(e, 50393103), C.lshifts(n, e, 4), C.bxoreq(e, n), C.bandseq(e, 51130563), C.lshifts(n, e, 2), C.bxoreq(e, n), C.bandseq(e, 153391689), e;\n}\n_c16 = Ar;\nfunction _n(r) {\n    let e = Ar(r.pick(null, 0)), n = Ar(r.pick(null, 1));\n    C.lshiftseq(n, 1);\n    let a = Ar(r.pick(null, 2));\n    return C.lshiftseq(a, 2), C.boreq(e, n), C.boreq(e, a), e;\n}\nfunction rr(r, e) {\n    if (r.shape[0] !== e.shape[0]) throw new Error(\"wrong length\");\n    let n = (0, er.default)(new Float32Array(r.size), r.shape, r.stride, r.offset);\n    for(let a = 0; a < e.shape[0]; a++){\n        let t = e.get(a);\n        if (r.shape.length > 1) for(let s = 0; s < r.shape[1]; s++)n.set(a, s, r.get(t, s));\n        else n.set(a, r.get(t));\n    }\n    return n;\n}\nfunction wr(r) {\n    let e = C.sup(r), n = C.inf(r), a = 1e3 / Math.min(1e3, e - n), t = (0, er.default)(new Float32Array(r.data), r.shape);\n    C.mulseq(t, a);\n    let s = (0, er.default)(new Int32Array(t.data), r.shape), i = _n(s), o = Array.from(i.data).map((f, p)=>[\n            f,\n            p\n        ]);\n    se(o, (f, p)=>f[0] - p[0]);\n    let c = o.map((param)=>{\n        let [f, p] = param;\n        return p;\n    });\n    return (0, er.default)(Uint32Array.from(c));\n}\nvar U = class {\n    getPlyBinary() {\n        let e = U._generateHeaderString(this.propertyDescs, this.format, this.nsplats), n = new TextEncoder().encode(e), a = Object.keys(this.propertyDescs).length, t = (0, Z.default)(new Float32Array(this.nsplats * a), [\n            this.nsplats,\n            a\n        ]);\n        if (k.assign(t.pick(null, this.propertyDescs.x.index), this.xyz.pick(null, 0)), k.assign(t.pick(null, this.propertyDescs.y.index), this.xyz.pick(null, 1)), k.assign(t.pick(null, this.propertyDescs.z.index), this.xyz.pick(null, 2)), k.assign(t.pick(null, this.propertyDescs.f_dc_0.index), this.colors.pick(null, 0)), k.assign(t.pick(null, this.propertyDescs.f_dc_1.index), this.colors.pick(null, 1)), k.assign(t.pick(null, this.propertyDescs.f_dc_2.index), this.colors.pick(null, 2)), k.assign(t.pick(null, this.propertyDescs.opacity.index), this.opacity.pick(null, 0)), k.assign(t.pick(null, this.propertyDescs.scale_0.index), this.scaling.pick(null, 0)), k.assign(t.pick(null, this.propertyDescs.scale_1.index), this.scaling.pick(null, 1)), k.assign(t.pick(null, this.propertyDescs.scale_2.index), this.scaling.pick(null, 2)), k.assign(t.pick(null, this.propertyDescs.rot_0.index), this.rotation.pick(null, 0)), k.assign(t.pick(null, this.propertyDescs.rot_1.index), this.rotation.pick(null, 1)), k.assign(t.pick(null, this.propertyDescs.rot_2.index), this.rotation.pick(null, 2)), k.assign(t.pick(null, this.propertyDescs.rot_3.index), this.rotation.pick(null, 3)), this.harmonics && this.harmonics.length > 0) for(let h = 0; h < this.harmonics.length; h++){\n            let o = h * 3;\n            k.assign(t.pick(null, this.propertyDescs[\"f_rest_\".concat(o)].index), this.harmonics[h].pick(null, 0)), k.assign(t.pick(null, this.propertyDescs[\"f_rest_\".concat(o + 1)].index), this.harmonics[h].pick(null, 1)), k.assign(t.pick(null, this.propertyDescs[\"f_rest_\".concat(o + 2)].index), this.harmonics[h].pick(null, 2));\n        }\n        let s = new Uint8Array(t.data.buffer), i = new Uint8Array(s.length + n.length);\n        return i.set(n), i.set(s, n.length), i.buffer;\n    }\n    save(e, n) {\n        let a = this.getPlyBinary(), t = new Blob([\n            a\n        ], {\n            type: \"application/octet-stream\"\n        }), s = new File([\n            t\n        ], e), i = new FormData;\n        i.append(\"file\", s), i.append(\"filename\", e), i.append(\"basedir\", n), fetch(\"\".concat(Jr, \"/push_file\"), {\n            method: \"POST\",\n            body: i\n        });\n    }\n    static async loadFile(e) {\n        return await (await fetch(e)).arrayBuffer();\n    }\n    mortonPositionSplatsSort() {\n        let e = wr(this.xyz), n = rr(this.xyz, e), a = rr(this.colors, e), t = rr(this.opacity, e), s = rr(this.scaling, e), i = rr(this.rotation, e), h = [];\n        for(let o = 0; o < this.harmonics.length; o++)h.push(rr(this.harmonics[o], e));\n        return new U(this.propertyDescs, this.format, this.nsplats, n, a, h, t, s, i, this.maxSHDegree);\n    }\n    static _generateHeaderString(e, n, a) {\n        let t = \"ply\\nformat \".concat(n.format, \" \").concat(n.version, \"\\nelement vertex \").concat(a), s = Object.keys(e).length, i = Array(s);\n        for(let h in e){\n            let o = e[h];\n            i[o.index] = {\n                name: h,\n                dtype: o.dtype\n            };\n        }\n        for(let h = 0; h < i.length; h++)t = \"\".concat(t, \"\\nproperty \").concat(i[h].dtype, \" \").concat(i[h].name);\n        return \"\".concat(t, \"\\nend_header\\n\");\n    }\n    static fromArrayBuffer(e) {\n        let n = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 3;\n        let { splatCount: a, vertexData: t, propertiesDesc: s, format: i } = U.decodeHeader(e), h = t.buffer.slice(t.byteOffset), o = Object.keys(s).length, c = (0, Z.default)(new Float32Array(h), [\n            a,\n            o\n        ]), l = 0, f = {}, p = {\n            double: 8,\n            int: 4,\n            uint: 4,\n            float: 4,\n            short: 2,\n            ushort: 2,\n            uchar: 1,\n            char: 1\n        };\n        for(let _ in s)if (s.hasOwnProperty(_)) {\n            let g = s[_].dtype;\n            f[_] = l, l += p[g];\n        }\n        let v = (0, Z.default)(new Float32Array(a * 3), [\n            a,\n            3\n        ]);\n        k.assign(v.pick(null, 0), c.pick(null, f.x / 4)), k.assign(v.pick(null, 1), c.pick(null, f.y / 4)), k.assign(v.pick(null, 2), c.pick(null, f.z / 4));\n        let m = (0, Z.default)(new Float32Array(a * 3), [\n            a,\n            3\n        ]);\n        k.assign(m.pick(null, 0), c.pick(null, f.scale_0 / 4)), k.assign(m.pick(null, 1), c.pick(null, f.scale_1 / 4)), k.assign(m.pick(null, 2), c.pick(null, f.scale_2 / 4));\n        let d = (0, Z.default)(new Float32Array(a * 3), [\n            a,\n            3\n        ]);\n        k.assign(d.pick(null, 0), c.pick(null, f.f_dc_0 / 4)), k.assign(d.pick(null, 1), c.pick(null, f.f_dc_1 / 4)), k.assign(d.pick(null, 2), c.pick(null, f.f_dc_2 / 4));\n        let y = (0, Z.default)(new Float32Array(a * 4), [\n            a,\n            4\n        ]);\n        k.assign(y.pick(null, 0), c.pick(null, f.rot_1 / 4)), k.assign(y.pick(null, 1), c.pick(null, f.rot_2 / 4)), k.assign(y.pick(null, 2), c.pick(null, f.rot_3 / 4)), k.assign(y.pick(null, 3), c.pick(null, f.rot_0 / 4));\n        for(let _ = 0; _ < a; _++){\n            let g = y.pick(_, null), N = Math.sqrt(g.get(0) ** 2 + g.get(1) ** 2 + g.get(2) ** 2 + g.get(3) ** 2);\n            k.divseq(g, N);\n        }\n        let u = (0, Z.default)(new Float32Array(a * 1), [\n            a,\n            1\n        ]);\n        k.assign(u.pick(null, 0), c.pick(null, f.opacity / 4)), k.negeq(u), k.expeq(u), k.addseq(u, 1), k.recipeq(u), k.mulseq(u, 255);\n        let M = (Math.min(Math.max(n, 0), 3) + 1) ** 2 - 1, b = [];\n        for(let _ = 0; _ < M; _++){\n            let g = (0, Z.default)(new Float32Array(a * 3), [\n                a,\n                3\n            ]), N = _ * 3;\n            k.assign(g.pick(null, 0), c.pick(null, f[\"f_rest_\".concat(N)] / 4)), k.assign(g.pick(null, 1), c.pick(null, f[\"f_rest_\".concat(N + 1)] / 4)), k.assign(g.pick(null, 2), c.pick(null, f[\"f_rest_\".concat(N + 2)] / 4)), b.push(g);\n        }\n        return new U(s, i, a, v, d, b, u, m, y, n);\n    }\n    static async fromPLYFile(e) {\n        let n = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 3;\n        let a = await U.loadFile(e);\n        return U.fromArrayBuffer(a, n);\n    }\n    static decodeHeader(e) {\n        let n = new TextDecoder, a = 0, t = \"\", s = 100;\n        for(;;){\n            if (a + s >= e.byteLength) throw new Error(\"End of file reached while searching for end of header\");\n            let m = new Uint8Array(e, a, s);\n            t += n.decode(m), a += s;\n            let d = a - s * 2, y = new Uint8Array(e, Math.max(0, d), d > 0 ? s * 2 : s);\n            if (n.decode(y).includes(\"end_header\")) break;\n        }\n        let i = t.split(\"\\n\"), h = 0, o = {}, c = {}, l = 0, f;\n        for(let m = 0; m < i.length; m++){\n            let d = i[m].trim();\n            if (d.startsWith(\"element vertex\")) {\n                let y = d.match(/\\d+/);\n                y && (h = parseInt(y[0]));\n            } else if (d.startsWith(\"property\")) {\n                let y = d.match(/(\\w+)\\s+(\\w+)\\s+(\\w+)/);\n                if (y) {\n                    let u = y[2], x = y[3];\n                    o[x] = l, c[x] = {\n                        dtype: u,\n                        index: l\n                    }, l++;\n                }\n            } else if (d.startsWith(\"format\")) {\n                let y = d.match(/(\\w+)\\s+(\\w+)\\s+(\\d+\\.?\\d*)/);\n                y && (f = {\n                    format: y[2],\n                    version: y[3]\n                });\n            } else if (d === \"end_header\") break;\n        }\n        let p = t.indexOf(\"end_header\") + 10 + 1, v = new DataView(e, p);\n        return {\n            splatCount: h,\n            vertexData: v,\n            headerOffset: a,\n            propertiesDesc: c,\n            format: f\n        };\n    }\n    constructor(e, n, a, t, s, i, h, o, c, l){\n        this.propertyDescs = e, this.format = n, this.nsplats = a, this.xyz = t, this.colors = s, this.harmonics = i, this.opacity = h, this.scaling = o, this.rotation = c, this.maxSHDegree = l;\n    }\n};\nvar X = class {\n    get isDynamicChunks() {\n        return this.variableChunkSize && this.variableChunkSize.length > 0;\n    }\n    get nchunks() {\n        return this.xyz.nchunks;\n    }\n    get nsplats() {\n        return this.xyz.length;\n    }\n    get chunkSize() {\n        return this.config.chunkSize;\n    }\n    static compressFromGaussianData(e, n) {\n        let a = E.fromArray(e.xyz, n.xyz, n.chunkSize), t = E.fromArray(e.scaling, n.scaling, n.chunkSize), s = E.fromArray(e.colors, n.color, n.chunkSize), i = E.fromArray(e.opacity, n.opacity, n.chunkSize), h = E.fromArray(e.rotation, n.quaternion, n.chunkSize), o = e.harmonics, c = [];\n        if (n.harmonics) for(let l = 0; l < o.length; l++){\n            let f = E.fromArray(o[l], n.harmonics, n.chunkSize);\n            c.push(f);\n        }\n        return new X(n, a, t, s, i, h, c);\n    }\n    _countIndexesInChunks(e) {\n        let n = [], a = this.nchunks, t = this.chunkSize, s = this.nsplats, i = E.getRequiredNChunks(s, t);\n        if (a === i) for(let h = 0; h < e.length; h++){\n            let o = e[h], c = Math.floor(o / this.chunkSize);\n            c in n ? n[c].push(o) : n[c] = [\n                o\n            ];\n        }\n        else {\n            let h = this.variableChunkSize, o = {}, c = 0;\n            for(let l = 0; l < a; l++)o[l] = c, c += h[l];\n            for(let l = 0; l < e.length; l++){\n                let f = e[l], p = Math.min(Math.floor(f / t), a - 1);\n                for(; f >= o[p] + h[p];)p++;\n                p in n ? n[p].push(f) : n[p] = [\n                    f\n                ];\n            }\n        }\n        return n;\n    }\n    pruneSplats(e) {\n        let n = this._countIndexesInChunks(e), a, t = [];\n        return n.length > 0 && (a = this.variableChunkSize ? [\n            ...this.variableChunkSize\n        ] : Array(this.nchunks).fill(this.chunkSize), n.forEach((s, i)=>{\n            a[i] -= s.length, a[i] <= 0 && t.push(i);\n        }), a = a.filter((s)=>s > 0)), new X(this.config, this.xyz.pruneFeature(e, t, a), this.scaling.pruneFeature(e, t, a), this.color.pruneFeature(e, t, a), this.opacity.pruneFeature(e, t, a), this.quaternion.pruneFeature(e, t, a), this.harmonics ? this.harmonics.map((s)=>s.pruneFeature(e, t, this.variableChunkSize)) : void 0, a);\n    }\n    static async loadConfig(e) {\n        return await (await fetch(e, {\n            method: \"GET\",\n            mode: \"cors\",\n            headers: {\n                Accept: \"application/json\"\n            }\n        })).json();\n    }\n    toGaussians() {\n        var _this_harmonics;\n        let e = {\n            format: \"binary_little_endian\",\n            version: \"1.0\"\n        }, n = {}, a = 0;\n        if (n.x = {\n            dtype: \"float\",\n            index: a\n        }, a++, n.y = {\n            dtype: \"float\",\n            index: a\n        }, a++, n.z = {\n            dtype: \"float\",\n            index: a\n        }, a++, n.f_dc_0 = {\n            dtype: \"float\",\n            index: a\n        }, a++, n.f_dc_1 = {\n            dtype: \"float\",\n            index: a\n        }, a++, n.f_dc_2 = {\n            dtype: \"float\",\n            index: a\n        }, a++, this.harmonics && this.harmonics.length > 0) for(let i = 0; i < this.harmonics.length; i++)n[\"f_rest_\".concat(i)] = {\n            dtype: \"float\",\n            index: a\n        }, a++, n[\"f_rest_\".concat(i + 1)] = {\n            dtype: \"float\",\n            index: a\n        }, a++, n[\"f_rest_\".concat(i + 2)] = {\n            dtype: \"float\",\n            index: a\n        }, a++;\n        n.opacity = {\n            dtype: \"float\",\n            index: a\n        }, a++, n.scale_0 = {\n            dtype: \"float\",\n            index: a\n        }, a++, n.scale_1 = {\n            dtype: \"float\",\n            index: a\n        }, a++, n.scale_2 = {\n            dtype: \"float\",\n            index: a\n        }, a++, n.rot_0 = {\n            dtype: \"float\",\n            index: a\n        }, a++, n.rot_1 = {\n            dtype: \"float\",\n            index: a\n        }, a++, n.rot_2 = {\n            dtype: \"float\",\n            index: a\n        }, a++, n.rot_3 = {\n            dtype: \"float\",\n            index: a\n        }, a++;\n        let t = (_this_harmonics = this.harmonics) === null || _this_harmonics === void 0 ? void 0 : _this_harmonics.map((i)=>i.denormDequant());\n        return new U(n, e, this.xyz.length, this.xyz.denormDequant(), this.color.denormDequant(), t || [], this.opacity.denormDequant(), this.scaling.denormDequant(), this.quaternion.denormDequant(), 3);\n    }\n    constructor(e, n, a, t, s, i, h, o){\n        this.config = e, this.xyz = n, this.scaling = a, this.color = t, this.opacity = s, this.harmonics = h, this.quaternion = i, this.variableChunkSize = o;\n    }\n};\nvar nr = Q(tr(), 1), R = Q(sr(), 1);\nvar S = 1e-6, P = typeof Float32Array < \"u\" ? Float32Array : Array, ir = Math.random;\nvar Wt = Math.PI / 180;\nMath.hypot || (Math.hypot = function() {\n    for(var r = 0, e = arguments.length; e--;)r += arguments[e] * arguments[e];\n    return Math.sqrt(r);\n});\nvar W = {};\nur(W, {\n    add: ()=>Yn,\n    adjoint: ()=>Sn,\n    clone: ()=>An,\n    copy: ()=>wn,\n    create: ()=>kr,\n    determinant: ()=>In,\n    equals: ()=>Hn,\n    exactEquals: ()=>$n,\n    frob: ()=>Un,\n    fromMat2d: ()=>Vn,\n    fromMat4: ()=>bn,\n    fromQuat: ()=>On,\n    fromRotation: ()=>Tn,\n    fromScaling: ()=>Pn,\n    fromTranslation: ()=>En,\n    fromValues: ()=>kn,\n    identity: ()=>qn,\n    invert: ()=>Fn,\n    mul: ()=>Wn,\n    multiply: ()=>ie,\n    multiplyScalar: ()=>Gn,\n    multiplyScalarAndAdd: ()=>Qn,\n    normalFromMat4: ()=>jn,\n    projection: ()=>Rn,\n    rotate: ()=>Ln,\n    scale: ()=>Dn,\n    set: ()=>zn,\n    str: ()=>Bn,\n    sub: ()=>Zn,\n    subtract: ()=>oe,\n    translate: ()=>Cn,\n    transpose: ()=>Nn\n});\nfunction kr() {\n    var r = new P(9);\n    return P != Float32Array && (r[1] = 0, r[2] = 0, r[3] = 0, r[5] = 0, r[6] = 0, r[7] = 0), r[0] = 1, r[4] = 1, r[8] = 1, r;\n}\nfunction bn(r, e) {\n    return r[0] = e[0], r[1] = e[1], r[2] = e[2], r[3] = e[4], r[4] = e[5], r[5] = e[6], r[6] = e[8], r[7] = e[9], r[8] = e[10], r;\n}\nfunction An(r) {\n    var e = new P(9);\n    return e[0] = r[0], e[1] = r[1], e[2] = r[2], e[3] = r[3], e[4] = r[4], e[5] = r[5], e[6] = r[6], e[7] = r[7], e[8] = r[8], e;\n}\n_c17 = An;\nfunction wn(r, e) {\n    return r[0] = e[0], r[1] = e[1], r[2] = e[2], r[3] = e[3], r[4] = e[4], r[5] = e[5], r[6] = e[6], r[7] = e[7], r[8] = e[8], r;\n}\nfunction kn(r, e, n, a, t, s, i, h, o) {\n    var c = new P(9);\n    return c[0] = r, c[1] = e, c[2] = n, c[3] = a, c[4] = t, c[5] = s, c[6] = i, c[7] = h, c[8] = o, c;\n}\nfunction zn(r, e, n, a, t, s, i, h, o, c) {\n    return r[0] = e, r[1] = n, r[2] = a, r[3] = t, r[4] = s, r[5] = i, r[6] = h, r[7] = o, r[8] = c, r;\n}\nfunction qn(r) {\n    return r[0] = 1, r[1] = 0, r[2] = 0, r[3] = 0, r[4] = 1, r[5] = 0, r[6] = 0, r[7] = 0, r[8] = 1, r;\n}\nfunction Nn(r, e) {\n    if (r === e) {\n        var n = e[1], a = e[2], t = e[5];\n        r[1] = e[3], r[2] = e[6], r[3] = n, r[5] = e[7], r[6] = a, r[7] = t;\n    } else r[0] = e[0], r[1] = e[3], r[2] = e[6], r[3] = e[1], r[4] = e[4], r[5] = e[7], r[6] = e[2], r[7] = e[5], r[8] = e[8];\n    return r;\n}\n_c18 = Nn;\nfunction Fn(r, e) {\n    var n = e[0], a = e[1], t = e[2], s = e[3], i = e[4], h = e[5], o = e[6], c = e[7], l = e[8], f = l * i - h * c, p = -l * s + h * o, v = c * s - i * o, m = n * f + a * p + t * v;\n    return m ? (m = 1 / m, r[0] = f * m, r[1] = (-l * a + t * c) * m, r[2] = (h * a - t * i) * m, r[3] = p * m, r[4] = (l * n - t * o) * m, r[5] = (-h * n + t * s) * m, r[6] = v * m, r[7] = (-c * n + a * o) * m, r[8] = (i * n - a * s) * m, r) : null;\n}\n_c19 = Fn;\nfunction Sn(r, e) {\n    var n = e[0], a = e[1], t = e[2], s = e[3], i = e[4], h = e[5], o = e[6], c = e[7], l = e[8];\n    return r[0] = i * l - h * c, r[1] = t * c - a * l, r[2] = a * h - t * i, r[3] = h * o - s * l, r[4] = n * l - t * o, r[5] = t * s - n * h, r[6] = s * c - i * o, r[7] = a * o - n * c, r[8] = n * i - a * s, r;\n}\n_c20 = Sn;\nfunction In(r) {\n    var e = r[0], n = r[1], a = r[2], t = r[3], s = r[4], i = r[5], h = r[6], o = r[7], c = r[8];\n    return e * (c * s - i * o) + n * (-c * t + i * h) + a * (o * t - s * h);\n}\n_c21 = In;\nfunction ie(r, e, n) {\n    var a = e[0], t = e[1], s = e[2], i = e[3], h = e[4], o = e[5], c = e[6], l = e[7], f = e[8], p = n[0], v = n[1], m = n[2], d = n[3], y = n[4], u = n[5], x = n[6], M = n[7], b = n[8];\n    return r[0] = p * a + v * i + m * c, r[1] = p * t + v * h + m * l, r[2] = p * s + v * o + m * f, r[3] = d * a + y * i + u * c, r[4] = d * t + y * h + u * l, r[5] = d * s + y * o + u * f, r[6] = x * a + M * i + b * c, r[7] = x * t + M * h + b * l, r[8] = x * s + M * o + b * f, r;\n}\nfunction Cn(r, e, n) {\n    var a = e[0], t = e[1], s = e[2], i = e[3], h = e[4], o = e[5], c = e[6], l = e[7], f = e[8], p = n[0], v = n[1];\n    return r[0] = a, r[1] = t, r[2] = s, r[3] = i, r[4] = h, r[5] = o, r[6] = p * a + v * i + c, r[7] = p * t + v * h + l, r[8] = p * s + v * o + f, r;\n}\n_c22 = Cn;\nfunction Ln(r, e, n) {\n    var a = e[0], t = e[1], s = e[2], i = e[3], h = e[4], o = e[5], c = e[6], l = e[7], f = e[8], p = Math.sin(n), v = Math.cos(n);\n    return r[0] = v * a + p * i, r[1] = v * t + p * h, r[2] = v * s + p * o, r[3] = v * i - p * a, r[4] = v * h - p * t, r[5] = v * o - p * s, r[6] = c, r[7] = l, r[8] = f, r;\n}\n_c23 = Ln;\nfunction Dn(r, e, n) {\n    var a = n[0], t = n[1];\n    return r[0] = a * e[0], r[1] = a * e[1], r[2] = a * e[2], r[3] = t * e[3], r[4] = t * e[4], r[5] = t * e[5], r[6] = e[6], r[7] = e[7], r[8] = e[8], r;\n}\n_c24 = Dn;\nfunction En(r, e) {\n    return r[0] = 1, r[1] = 0, r[2] = 0, r[3] = 0, r[4] = 1, r[5] = 0, r[6] = e[0], r[7] = e[1], r[8] = 1, r;\n}\n_c25 = En;\nfunction Tn(r, e) {\n    var n = Math.sin(e), a = Math.cos(e);\n    return r[0] = a, r[1] = n, r[2] = 0, r[3] = -n, r[4] = a, r[5] = 0, r[6] = 0, r[7] = 0, r[8] = 1, r;\n}\n_c26 = Tn;\nfunction Pn(r, e) {\n    return r[0] = e[0], r[1] = 0, r[2] = 0, r[3] = 0, r[4] = e[1], r[5] = 0, r[6] = 0, r[7] = 0, r[8] = 1, r;\n}\n_c27 = Pn;\nfunction Vn(r, e) {\n    return r[0] = e[0], r[1] = e[1], r[2] = 0, r[3] = e[2], r[4] = e[3], r[5] = 0, r[6] = e[4], r[7] = e[5], r[8] = 1, r;\n}\n_c28 = Vn;\nfunction On(r, e) {\n    var n = e[0], a = e[1], t = e[2], s = e[3], i = n + n, h = a + a, o = t + t, c = n * i, l = a * i, f = a * h, p = t * i, v = t * h, m = t * o, d = s * i, y = s * h, u = s * o;\n    return r[0] = 1 - f - m, r[3] = l - u, r[6] = p + y, r[1] = l + u, r[4] = 1 - c - m, r[7] = v - d, r[2] = p - y, r[5] = v + d, r[8] = 1 - c - f, r;\n}\n_c29 = On;\nfunction jn(r, e) {\n    var n = e[0], a = e[1], t = e[2], s = e[3], i = e[4], h = e[5], o = e[6], c = e[7], l = e[8], f = e[9], p = e[10], v = e[11], m = e[12], d = e[13], y = e[14], u = e[15], x = n * h - a * i, M = n * o - t * i, b = n * c - s * i, _ = a * o - t * h, g = a * c - s * h, N = t * c - s * o, q = l * d - f * m, w = l * y - p * m, F = l * u - v * m, L = f * y - p * d, T = f * u - v * d, V = p * u - v * y, z = x * V - M * T + b * L + _ * F - g * w + N * q;\n    return z ? (z = 1 / z, r[0] = (h * V - o * T + c * L) * z, r[1] = (o * F - i * V - c * w) * z, r[2] = (i * T - h * F + c * q) * z, r[3] = (t * T - a * V - s * L) * z, r[4] = (n * V - t * F + s * w) * z, r[5] = (a * F - n * T - s * q) * z, r[6] = (d * N - y * g + u * _) * z, r[7] = (y * b - m * N - u * M) * z, r[8] = (m * g - d * b + u * x) * z, r) : null;\n}\nfunction Rn(r, e, n) {\n    return r[0] = 2 / e, r[1] = 0, r[2] = 0, r[3] = 0, r[4] = -2 / n, r[5] = 0, r[6] = -1, r[7] = 1, r[8] = 1, r;\n}\n_c30 = Rn;\nfunction Bn(r) {\n    return \"mat3(\" + r[0] + \", \" + r[1] + \", \" + r[2] + \", \" + r[3] + \", \" + r[4] + \", \" + r[5] + \", \" + r[6] + \", \" + r[7] + \", \" + r[8] + \")\";\n}\n_c31 = Bn;\nfunction Un(r) {\n    return Math.hypot(r[0], r[1], r[2], r[3], r[4], r[5], r[6], r[7], r[8]);\n}\n_c32 = Un;\nfunction Yn(r, e, n) {\n    return r[0] = e[0] + n[0], r[1] = e[1] + n[1], r[2] = e[2] + n[2], r[3] = e[3] + n[3], r[4] = e[4] + n[4], r[5] = e[5] + n[5], r[6] = e[6] + n[6], r[7] = e[7] + n[7], r[8] = e[8] + n[8], r;\n}\n_c33 = Yn;\nfunction oe(r, e, n) {\n    return r[0] = e[0] - n[0], r[1] = e[1] - n[1], r[2] = e[2] - n[2], r[3] = e[3] - n[3], r[4] = e[4] - n[4], r[5] = e[5] - n[5], r[6] = e[6] - n[6], r[7] = e[7] - n[7], r[8] = e[8] - n[8], r;\n}\nfunction Gn(r, e, n) {\n    return r[0] = e[0] * n, r[1] = e[1] * n, r[2] = e[2] * n, r[3] = e[3] * n, r[4] = e[4] * n, r[5] = e[5] * n, r[6] = e[6] * n, r[7] = e[7] * n, r[8] = e[8] * n, r;\n}\n_c34 = Gn;\nfunction Qn(r, e, n, a) {\n    return r[0] = e[0] + n[0] * a, r[1] = e[1] + n[1] * a, r[2] = e[2] + n[2] * a, r[3] = e[3] + n[3] * a, r[4] = e[4] + n[4] * a, r[5] = e[5] + n[5] * a, r[6] = e[6] + n[6] * a, r[7] = e[7] + n[7] * a, r[8] = e[8] + n[8] * a, r;\n}\n_c35 = Qn;\nfunction $n(r, e) {\n    return r[0] === e[0] && r[1] === e[1] && r[2] === e[2] && r[3] === e[3] && r[4] === e[4] && r[5] === e[5] && r[6] === e[6] && r[7] === e[7] && r[8] === e[8];\n}\nfunction Hn(r, e) {\n    var n = r[0], a = r[1], t = r[2], s = r[3], i = r[4], h = r[5], o = r[6], c = r[7], l = r[8], f = e[0], p = e[1], v = e[2], m = e[3], d = e[4], y = e[5], u = e[6], x = e[7], M = e[8];\n    return Math.abs(n - f) <= S * Math.max(1, Math.abs(n), Math.abs(f)) && Math.abs(a - p) <= S * Math.max(1, Math.abs(a), Math.abs(p)) && Math.abs(t - v) <= S * Math.max(1, Math.abs(t), Math.abs(v)) && Math.abs(s - m) <= S * Math.max(1, Math.abs(s), Math.abs(m)) && Math.abs(i - d) <= S * Math.max(1, Math.abs(i), Math.abs(d)) && Math.abs(h - y) <= S * Math.max(1, Math.abs(h), Math.abs(y)) && Math.abs(o - u) <= S * Math.max(1, Math.abs(o), Math.abs(u)) && Math.abs(c - x) <= S * Math.max(1, Math.abs(c), Math.abs(x)) && Math.abs(l - M) <= S * Math.max(1, Math.abs(l), Math.abs(M));\n}\n_c36 = Hn;\nvar Wn = ie, Zn = oe;\nvar lr = {};\nur(lr, {\n    add: ()=>Da,\n    adjoint: ()=>ta,\n    clone: ()=>Kn,\n    copy: ()=>Jn,\n    create: ()=>Xn,\n    determinant: ()=>sa,\n    equals: ()=>Va,\n    exactEquals: ()=>Pa,\n    frob: ()=>La,\n    fromQuat: ()=>Aa,\n    fromQuat2: ()=>xa,\n    fromRotation: ()=>da,\n    fromRotationTranslation: ()=>le,\n    fromRotationTranslationScale: ()=>_a,\n    fromRotationTranslationScaleOrigin: ()=>ba,\n    fromScaling: ()=>ya,\n    fromTranslation: ()=>fa,\n    fromValues: ()=>ra,\n    fromXRotation: ()=>va,\n    fromYRotation: ()=>ma,\n    fromZRotation: ()=>ua,\n    frustum: ()=>wa,\n    getRotation: ()=>Ma,\n    getScaling: ()=>pe,\n    getTranslation: ()=>ga,\n    identity: ()=>he,\n    invert: ()=>aa,\n    lookAt: ()=>Sa,\n    mul: ()=>Oa,\n    multiply: ()=>ce,\n    multiplyScalar: ()=>Ea,\n    multiplyScalarAndAdd: ()=>Ta,\n    ortho: ()=>Na,\n    orthoNO: ()=>ye,\n    orthoZO: ()=>Fa,\n    perspective: ()=>ka,\n    perspectiveFromFieldOfView: ()=>qa,\n    perspectiveNO: ()=>fe,\n    perspectiveZO: ()=>za,\n    rotate: ()=>ha,\n    rotateX: ()=>ca,\n    rotateY: ()=>la,\n    rotateZ: ()=>pa,\n    scale: ()=>oa,\n    set: ()=>ea,\n    str: ()=>Ca,\n    sub: ()=>ja,\n    subtract: ()=>de,\n    targetTo: ()=>Ia,\n    translate: ()=>ia,\n    transpose: ()=>na\n});\nfunction Xn() {\n    var r = new P(16);\n    return P != Float32Array && (r[1] = 0, r[2] = 0, r[3] = 0, r[4] = 0, r[6] = 0, r[7] = 0, r[8] = 0, r[9] = 0, r[11] = 0, r[12] = 0, r[13] = 0, r[14] = 0), r[0] = 1, r[5] = 1, r[10] = 1, r[15] = 1, r;\n}\n_c37 = Xn;\nfunction Kn(r) {\n    var e = new P(16);\n    return e[0] = r[0], e[1] = r[1], e[2] = r[2], e[3] = r[3], e[4] = r[4], e[5] = r[5], e[6] = r[6], e[7] = r[7], e[8] = r[8], e[9] = r[9], e[10] = r[10], e[11] = r[11], e[12] = r[12], e[13] = r[13], e[14] = r[14], e[15] = r[15], e;\n}\n_c38 = Kn;\nfunction Jn(r, e) {\n    return r[0] = e[0], r[1] = e[1], r[2] = e[2], r[3] = e[3], r[4] = e[4], r[5] = e[5], r[6] = e[6], r[7] = e[7], r[8] = e[8], r[9] = e[9], r[10] = e[10], r[11] = e[11], r[12] = e[12], r[13] = e[13], r[14] = e[14], r[15] = e[15], r;\n}\n_c39 = Jn;\nfunction ra(r, e, n, a, t, s, i, h, o, c, l, f, p, v, m, d) {\n    var y = new P(16);\n    return y[0] = r, y[1] = e, y[2] = n, y[3] = a, y[4] = t, y[5] = s, y[6] = i, y[7] = h, y[8] = o, y[9] = c, y[10] = l, y[11] = f, y[12] = p, y[13] = v, y[14] = m, y[15] = d, y;\n}\nfunction ea(r, e, n, a, t, s, i, h, o, c, l, f, p, v, m, d, y) {\n    return r[0] = e, r[1] = n, r[2] = a, r[3] = t, r[4] = s, r[5] = i, r[6] = h, r[7] = o, r[8] = c, r[9] = l, r[10] = f, r[11] = p, r[12] = v, r[13] = m, r[14] = d, r[15] = y, r;\n}\nfunction he(r) {\n    return r[0] = 1, r[1] = 0, r[2] = 0, r[3] = 0, r[4] = 0, r[5] = 1, r[6] = 0, r[7] = 0, r[8] = 0, r[9] = 0, r[10] = 1, r[11] = 0, r[12] = 0, r[13] = 0, r[14] = 0, r[15] = 1, r;\n}\nfunction na(r, e) {\n    if (r === e) {\n        var n = e[1], a = e[2], t = e[3], s = e[6], i = e[7], h = e[11];\n        r[1] = e[4], r[2] = e[8], r[3] = e[12], r[4] = n, r[6] = e[9], r[7] = e[13], r[8] = a, r[9] = s, r[11] = e[14], r[12] = t, r[13] = i, r[14] = h;\n    } else r[0] = e[0], r[1] = e[4], r[2] = e[8], r[3] = e[12], r[4] = e[1], r[5] = e[5], r[6] = e[9], r[7] = e[13], r[8] = e[2], r[9] = e[6], r[10] = e[10], r[11] = e[14], r[12] = e[3], r[13] = e[7], r[14] = e[11], r[15] = e[15];\n    return r;\n}\nfunction aa(r, e) {\n    var n = e[0], a = e[1], t = e[2], s = e[3], i = e[4], h = e[5], o = e[6], c = e[7], l = e[8], f = e[9], p = e[10], v = e[11], m = e[12], d = e[13], y = e[14], u = e[15], x = n * h - a * i, M = n * o - t * i, b = n * c - s * i, _ = a * o - t * h, g = a * c - s * h, N = t * c - s * o, q = l * d - f * m, w = l * y - p * m, F = l * u - v * m, L = f * y - p * d, T = f * u - v * d, V = p * u - v * y, z = x * V - M * T + b * L + _ * F - g * w + N * q;\n    return z ? (z = 1 / z, r[0] = (h * V - o * T + c * L) * z, r[1] = (t * T - a * V - s * L) * z, r[2] = (d * N - y * g + u * _) * z, r[3] = (p * g - f * N - v * _) * z, r[4] = (o * F - i * V - c * w) * z, r[5] = (n * V - t * F + s * w) * z, r[6] = (y * b - m * N - u * M) * z, r[7] = (l * N - p * b + v * M) * z, r[8] = (i * T - h * F + c * q) * z, r[9] = (a * F - n * T - s * q) * z, r[10] = (m * g - d * b + u * x) * z, r[11] = (f * b - l * g - v * x) * z, r[12] = (h * w - i * L - o * q) * z, r[13] = (n * L - a * w + t * q) * z, r[14] = (d * M - m * _ - y * x) * z, r[15] = (l * _ - f * M + p * x) * z, r) : null;\n}\nfunction ta(r, e) {\n    var n = e[0], a = e[1], t = e[2], s = e[3], i = e[4], h = e[5], o = e[6], c = e[7], l = e[8], f = e[9], p = e[10], v = e[11], m = e[12], d = e[13], y = e[14], u = e[15];\n    return r[0] = h * (p * u - v * y) - f * (o * u - c * y) + d * (o * v - c * p), r[1] = -(a * (p * u - v * y) - f * (t * u - s * y) + d * (t * v - s * p)), r[2] = a * (o * u - c * y) - h * (t * u - s * y) + d * (t * c - s * o), r[3] = -(a * (o * v - c * p) - h * (t * v - s * p) + f * (t * c - s * o)), r[4] = -(i * (p * u - v * y) - l * (o * u - c * y) + m * (o * v - c * p)), r[5] = n * (p * u - v * y) - l * (t * u - s * y) + m * (t * v - s * p), r[6] = -(n * (o * u - c * y) - i * (t * u - s * y) + m * (t * c - s * o)), r[7] = n * (o * v - c * p) - i * (t * v - s * p) + l * (t * c - s * o), r[8] = i * (f * u - v * d) - l * (h * u - c * d) + m * (h * v - c * f), r[9] = -(n * (f * u - v * d) - l * (a * u - s * d) + m * (a * v - s * f)), r[10] = n * (h * u - c * d) - i * (a * u - s * d) + m * (a * c - s * h), r[11] = -(n * (h * v - c * f) - i * (a * v - s * f) + l * (a * c - s * h)), r[12] = -(i * (f * y - p * d) - l * (h * y - o * d) + m * (h * p - o * f)), r[13] = n * (f * y - p * d) - l * (a * y - t * d) + m * (a * p - t * f), r[14] = -(n * (h * y - o * d) - i * (a * y - t * d) + m * (a * o - t * h)), r[15] = n * (h * p - o * f) - i * (a * p - t * f) + l * (a * o - t * h), r;\n}\nfunction sa(r) {\n    var e = r[0], n = r[1], a = r[2], t = r[3], s = r[4], i = r[5], h = r[6], o = r[7], c = r[8], l = r[9], f = r[10], p = r[11], v = r[12], m = r[13], d = r[14], y = r[15], u = e * i - n * s, x = e * h - a * s, M = e * o - t * s, b = n * h - a * i, _ = n * o - t * i, g = a * o - t * h, N = c * m - l * v, q = c * d - f * v, w = c * y - p * v, F = l * d - f * m, L = l * y - p * m, T = f * y - p * d;\n    return u * T - x * L + M * F + b * w - _ * q + g * N;\n}\nfunction ce(r, e, n) {\n    var a = e[0], t = e[1], s = e[2], i = e[3], h = e[4], o = e[5], c = e[6], l = e[7], f = e[8], p = e[9], v = e[10], m = e[11], d = e[12], y = e[13], u = e[14], x = e[15], M = n[0], b = n[1], _ = n[2], g = n[3];\n    return r[0] = M * a + b * h + _ * f + g * d, r[1] = M * t + b * o + _ * p + g * y, r[2] = M * s + b * c + _ * v + g * u, r[3] = M * i + b * l + _ * m + g * x, M = n[4], b = n[5], _ = n[6], g = n[7], r[4] = M * a + b * h + _ * f + g * d, r[5] = M * t + b * o + _ * p + g * y, r[6] = M * s + b * c + _ * v + g * u, r[7] = M * i + b * l + _ * m + g * x, M = n[8], b = n[9], _ = n[10], g = n[11], r[8] = M * a + b * h + _ * f + g * d, r[9] = M * t + b * o + _ * p + g * y, r[10] = M * s + b * c + _ * v + g * u, r[11] = M * i + b * l + _ * m + g * x, M = n[12], b = n[13], _ = n[14], g = n[15], r[12] = M * a + b * h + _ * f + g * d, r[13] = M * t + b * o + _ * p + g * y, r[14] = M * s + b * c + _ * v + g * u, r[15] = M * i + b * l + _ * m + g * x, r;\n}\nfunction ia(r, e, n) {\n    var a = n[0], t = n[1], s = n[2], i, h, o, c, l, f, p, v, m, d, y, u;\n    return e === r ? (r[12] = e[0] * a + e[4] * t + e[8] * s + e[12], r[13] = e[1] * a + e[5] * t + e[9] * s + e[13], r[14] = e[2] * a + e[6] * t + e[10] * s + e[14], r[15] = e[3] * a + e[7] * t + e[11] * s + e[15]) : (i = e[0], h = e[1], o = e[2], c = e[3], l = e[4], f = e[5], p = e[6], v = e[7], m = e[8], d = e[9], y = e[10], u = e[11], r[0] = i, r[1] = h, r[2] = o, r[3] = c, r[4] = l, r[5] = f, r[6] = p, r[7] = v, r[8] = m, r[9] = d, r[10] = y, r[11] = u, r[12] = i * a + l * t + m * s + e[12], r[13] = h * a + f * t + d * s + e[13], r[14] = o * a + p * t + y * s + e[14], r[15] = c * a + v * t + u * s + e[15]), r;\n}\nfunction oa(r, e, n) {\n    var a = n[0], t = n[1], s = n[2];\n    return r[0] = e[0] * a, r[1] = e[1] * a, r[2] = e[2] * a, r[3] = e[3] * a, r[4] = e[4] * t, r[5] = e[5] * t, r[6] = e[6] * t, r[7] = e[7] * t, r[8] = e[8] * s, r[9] = e[9] * s, r[10] = e[10] * s, r[11] = e[11] * s, r[12] = e[12], r[13] = e[13], r[14] = e[14], r[15] = e[15], r;\n}\nfunction ha(r, e, n, a) {\n    var t = a[0], s = a[1], i = a[2], h = Math.hypot(t, s, i), o, c, l, f, p, v, m, d, y, u, x, M, b, _, g, N, q, w, F, L, T, V, z, Y;\n    return h < S ? null : (h = 1 / h, t *= h, s *= h, i *= h, o = Math.sin(n), c = Math.cos(n), l = 1 - c, f = e[0], p = e[1], v = e[2], m = e[3], d = e[4], y = e[5], u = e[6], x = e[7], M = e[8], b = e[9], _ = e[10], g = e[11], N = t * t * l + c, q = s * t * l + i * o, w = i * t * l - s * o, F = t * s * l - i * o, L = s * s * l + c, T = i * s * l + t * o, V = t * i * l + s * o, z = s * i * l - t * o, Y = i * i * l + c, r[0] = f * N + d * q + M * w, r[1] = p * N + y * q + b * w, r[2] = v * N + u * q + _ * w, r[3] = m * N + x * q + g * w, r[4] = f * F + d * L + M * T, r[5] = p * F + y * L + b * T, r[6] = v * F + u * L + _ * T, r[7] = m * F + x * L + g * T, r[8] = f * V + d * z + M * Y, r[9] = p * V + y * z + b * Y, r[10] = v * V + u * z + _ * Y, r[11] = m * V + x * z + g * Y, e !== r && (r[12] = e[12], r[13] = e[13], r[14] = e[14], r[15] = e[15]), r);\n}\nfunction ca(r, e, n) {\n    var a = Math.sin(n), t = Math.cos(n), s = e[4], i = e[5], h = e[6], o = e[7], c = e[8], l = e[9], f = e[10], p = e[11];\n    return e !== r && (r[0] = e[0], r[1] = e[1], r[2] = e[2], r[3] = e[3], r[12] = e[12], r[13] = e[13], r[14] = e[14], r[15] = e[15]), r[4] = s * t + c * a, r[5] = i * t + l * a, r[6] = h * t + f * a, r[7] = o * t + p * a, r[8] = c * t - s * a, r[9] = l * t - i * a, r[10] = f * t - h * a, r[11] = p * t - o * a, r;\n}\nfunction la(r, e, n) {\n    var a = Math.sin(n), t = Math.cos(n), s = e[0], i = e[1], h = e[2], o = e[3], c = e[8], l = e[9], f = e[10], p = e[11];\n    return e !== r && (r[4] = e[4], r[5] = e[5], r[6] = e[6], r[7] = e[7], r[12] = e[12], r[13] = e[13], r[14] = e[14], r[15] = e[15]), r[0] = s * t - c * a, r[1] = i * t - l * a, r[2] = h * t - f * a, r[3] = o * t - p * a, r[8] = s * a + c * t, r[9] = i * a + l * t, r[10] = h * a + f * t, r[11] = o * a + p * t, r;\n}\nfunction pa(r, e, n) {\n    var a = Math.sin(n), t = Math.cos(n), s = e[0], i = e[1], h = e[2], o = e[3], c = e[4], l = e[5], f = e[6], p = e[7];\n    return e !== r && (r[8] = e[8], r[9] = e[9], r[10] = e[10], r[11] = e[11], r[12] = e[12], r[13] = e[13], r[14] = e[14], r[15] = e[15]), r[0] = s * t + c * a, r[1] = i * t + l * a, r[2] = h * t + f * a, r[3] = o * t + p * a, r[4] = c * t - s * a, r[5] = l * t - i * a, r[6] = f * t - h * a, r[7] = p * t - o * a, r;\n}\nfunction fa(r, e) {\n    return r[0] = 1, r[1] = 0, r[2] = 0, r[3] = 0, r[4] = 0, r[5] = 1, r[6] = 0, r[7] = 0, r[8] = 0, r[9] = 0, r[10] = 1, r[11] = 0, r[12] = e[0], r[13] = e[1], r[14] = e[2], r[15] = 1, r;\n}\nfunction ya(r, e) {\n    return r[0] = e[0], r[1] = 0, r[2] = 0, r[3] = 0, r[4] = 0, r[5] = e[1], r[6] = 0, r[7] = 0, r[8] = 0, r[9] = 0, r[10] = e[2], r[11] = 0, r[12] = 0, r[13] = 0, r[14] = 0, r[15] = 1, r;\n}\nfunction da(r, e, n) {\n    var a = n[0], t = n[1], s = n[2], i = Math.hypot(a, t, s), h, o, c;\n    return i < S ? null : (i = 1 / i, a *= i, t *= i, s *= i, h = Math.sin(e), o = Math.cos(e), c = 1 - o, r[0] = a * a * c + o, r[1] = t * a * c + s * h, r[2] = s * a * c - t * h, r[3] = 0, r[4] = a * t * c - s * h, r[5] = t * t * c + o, r[6] = s * t * c + a * h, r[7] = 0, r[8] = a * s * c + t * h, r[9] = t * s * c - a * h, r[10] = s * s * c + o, r[11] = 0, r[12] = 0, r[13] = 0, r[14] = 0, r[15] = 1, r);\n}\nfunction va(r, e) {\n    var n = Math.sin(e), a = Math.cos(e);\n    return r[0] = 1, r[1] = 0, r[2] = 0, r[3] = 0, r[4] = 0, r[5] = a, r[6] = n, r[7] = 0, r[8] = 0, r[9] = -n, r[10] = a, r[11] = 0, r[12] = 0, r[13] = 0, r[14] = 0, r[15] = 1, r;\n}\nfunction ma(r, e) {\n    var n = Math.sin(e), a = Math.cos(e);\n    return r[0] = a, r[1] = 0, r[2] = -n, r[3] = 0, r[4] = 0, r[5] = 1, r[6] = 0, r[7] = 0, r[8] = n, r[9] = 0, r[10] = a, r[11] = 0, r[12] = 0, r[13] = 0, r[14] = 0, r[15] = 1, r;\n}\nfunction ua(r, e) {\n    var n = Math.sin(e), a = Math.cos(e);\n    return r[0] = a, r[1] = n, r[2] = 0, r[3] = 0, r[4] = -n, r[5] = a, r[6] = 0, r[7] = 0, r[8] = 0, r[9] = 0, r[10] = 1, r[11] = 0, r[12] = 0, r[13] = 0, r[14] = 0, r[15] = 1, r;\n}\nfunction le(r, e, n) {\n    var a = e[0], t = e[1], s = e[2], i = e[3], h = a + a, o = t + t, c = s + s, l = a * h, f = a * o, p = a * c, v = t * o, m = t * c, d = s * c, y = i * h, u = i * o, x = i * c;\n    return r[0] = 1 - (v + d), r[1] = f + x, r[2] = p - u, r[3] = 0, r[4] = f - x, r[5] = 1 - (l + d), r[6] = m + y, r[7] = 0, r[8] = p + u, r[9] = m - y, r[10] = 1 - (l + v), r[11] = 0, r[12] = n[0], r[13] = n[1], r[14] = n[2], r[15] = 1, r;\n}\nfunction xa(r, e) {\n    var n = new P(3), a = -e[0], t = -e[1], s = -e[2], i = e[3], h = e[4], o = e[5], c = e[6], l = e[7], f = a * a + t * t + s * s + i * i;\n    return f > 0 ? (n[0] = (h * i + l * a + o * s - c * t) * 2 / f, n[1] = (o * i + l * t + c * a - h * s) * 2 / f, n[2] = (c * i + l * s + h * t - o * a) * 2 / f) : (n[0] = (h * i + l * a + o * s - c * t) * 2, n[1] = (o * i + l * t + c * a - h * s) * 2, n[2] = (c * i + l * s + h * t - o * a) * 2), le(r, e, n), r;\n}\nfunction ga(r, e) {\n    return r[0] = e[12], r[1] = e[13], r[2] = e[14], r;\n}\nfunction pe(r, e) {\n    var n = e[0], a = e[1], t = e[2], s = e[4], i = e[5], h = e[6], o = e[8], c = e[9], l = e[10];\n    return r[0] = Math.hypot(n, a, t), r[1] = Math.hypot(s, i, h), r[2] = Math.hypot(o, c, l), r;\n}\nfunction Ma(r, e) {\n    var n = new P(3);\n    pe(n, e);\n    var a = 1 / n[0], t = 1 / n[1], s = 1 / n[2], i = e[0] * a, h = e[1] * t, o = e[2] * s, c = e[4] * a, l = e[5] * t, f = e[6] * s, p = e[8] * a, v = e[9] * t, m = e[10] * s, d = i + l + m, y = 0;\n    return d > 0 ? (y = Math.sqrt(d + 1) * 2, r[3] = .25 * y, r[0] = (f - v) / y, r[1] = (p - o) / y, r[2] = (h - c) / y) : i > l && i > m ? (y = Math.sqrt(1 + i - l - m) * 2, r[3] = (f - v) / y, r[0] = .25 * y, r[1] = (h + c) / y, r[2] = (p + o) / y) : l > m ? (y = Math.sqrt(1 + l - i - m) * 2, r[3] = (p - o) / y, r[0] = (h + c) / y, r[1] = .25 * y, r[2] = (f + v) / y) : (y = Math.sqrt(1 + m - i - l) * 2, r[3] = (h - c) / y, r[0] = (p + o) / y, r[1] = (f + v) / y, r[2] = .25 * y), r;\n}\n_c40 = Ma;\nfunction _a(r, e, n, a) {\n    var t = e[0], s = e[1], i = e[2], h = e[3], o = t + t, c = s + s, l = i + i, f = t * o, p = t * c, v = t * l, m = s * c, d = s * l, y = i * l, u = h * o, x = h * c, M = h * l, b = a[0], _ = a[1], g = a[2];\n    return r[0] = (1 - (m + y)) * b, r[1] = (p + M) * b, r[2] = (v - x) * b, r[3] = 0, r[4] = (p - M) * _, r[5] = (1 - (f + y)) * _, r[6] = (d + u) * _, r[7] = 0, r[8] = (v + x) * g, r[9] = (d - u) * g, r[10] = (1 - (f + m)) * g, r[11] = 0, r[12] = n[0], r[13] = n[1], r[14] = n[2], r[15] = 1, r;\n}\nfunction ba(r, e, n, a, t) {\n    var s = e[0], i = e[1], h = e[2], o = e[3], c = s + s, l = i + i, f = h + h, p = s * c, v = s * l, m = s * f, d = i * l, y = i * f, u = h * f, x = o * c, M = o * l, b = o * f, _ = a[0], g = a[1], N = a[2], q = t[0], w = t[1], F = t[2], L = (1 - (d + u)) * _, T = (v + b) * _, V = (m - M) * _, z = (v - b) * g, Y = (1 - (p + u)) * g, or = (y + x) * g, hr = (m + M) * N, Sr = (y - x) * N, Ir = (1 - (p + d)) * N;\n    return r[0] = L, r[1] = T, r[2] = V, r[3] = 0, r[4] = z, r[5] = Y, r[6] = or, r[7] = 0, r[8] = hr, r[9] = Sr, r[10] = Ir, r[11] = 0, r[12] = n[0] + q - (L * q + z * w + hr * F), r[13] = n[1] + w - (T * q + Y * w + Sr * F), r[14] = n[2] + F - (V * q + or * w + Ir * F), r[15] = 1, r;\n}\nfunction Aa(r, e) {\n    var n = e[0], a = e[1], t = e[2], s = e[3], i = n + n, h = a + a, o = t + t, c = n * i, l = a * i, f = a * h, p = t * i, v = t * h, m = t * o, d = s * i, y = s * h, u = s * o;\n    return r[0] = 1 - f - m, r[1] = l + u, r[2] = p - y, r[3] = 0, r[4] = l - u, r[5] = 1 - c - m, r[6] = v + d, r[7] = 0, r[8] = p + y, r[9] = v - d, r[10] = 1 - c - f, r[11] = 0, r[12] = 0, r[13] = 0, r[14] = 0, r[15] = 1, r;\n}\n_c41 = Aa;\nfunction wa(r, e, n, a, t, s, i) {\n    var h = 1 / (n - e), o = 1 / (t - a), c = 1 / (s - i);\n    return r[0] = s * 2 * h, r[1] = 0, r[2] = 0, r[3] = 0, r[4] = 0, r[5] = s * 2 * o, r[6] = 0, r[7] = 0, r[8] = (n + e) * h, r[9] = (t + a) * o, r[10] = (i + s) * c, r[11] = -1, r[12] = 0, r[13] = 0, r[14] = i * s * 2 * c, r[15] = 0, r;\n}\nfunction fe(r, e, n, a, t) {\n    var s = 1 / Math.tan(e / 2), i;\n    return r[0] = s / n, r[1] = 0, r[2] = 0, r[3] = 0, r[4] = 0, r[5] = s, r[6] = 0, r[7] = 0, r[8] = 0, r[9] = 0, r[11] = -1, r[12] = 0, r[13] = 0, r[15] = 0, t != null && t !== 1 / 0 ? (i = 1 / (a - t), r[10] = (t + a) * i, r[14] = 2 * t * a * i) : (r[10] = -1, r[14] = -2 * a), r;\n}\nvar ka = fe;\nfunction za(r, e, n, a, t) {\n    var s = 1 / Math.tan(e / 2), i;\n    return r[0] = s / n, r[1] = 0, r[2] = 0, r[3] = 0, r[4] = 0, r[5] = s, r[6] = 0, r[7] = 0, r[8] = 0, r[9] = 0, r[11] = -1, r[12] = 0, r[13] = 0, r[15] = 0, t != null && t !== 1 / 0 ? (i = 1 / (a - t), r[10] = t * i, r[14] = t * a * i) : (r[10] = -1, r[14] = -a), r;\n}\nfunction qa(r, e, n, a) {\n    var t = Math.tan(e.upDegrees * Math.PI / 180), s = Math.tan(e.downDegrees * Math.PI / 180), i = Math.tan(e.leftDegrees * Math.PI / 180), h = Math.tan(e.rightDegrees * Math.PI / 180), o = 2 / (i + h), c = 2 / (t + s);\n    return r[0] = o, r[1] = 0, r[2] = 0, r[3] = 0, r[4] = 0, r[5] = c, r[6] = 0, r[7] = 0, r[8] = -((i - h) * o * .5), r[9] = (t - s) * c * .5, r[10] = a / (n - a), r[11] = -1, r[12] = 0, r[13] = 0, r[14] = a * n / (n - a), r[15] = 0, r;\n}\nfunction ye(r, e, n, a, t, s, i) {\n    var h = 1 / (e - n), o = 1 / (a - t), c = 1 / (s - i);\n    return r[0] = -2 * h, r[1] = 0, r[2] = 0, r[3] = 0, r[4] = 0, r[5] = -2 * o, r[6] = 0, r[7] = 0, r[8] = 0, r[9] = 0, r[10] = 2 * c, r[11] = 0, r[12] = (e + n) * h, r[13] = (t + a) * o, r[14] = (i + s) * c, r[15] = 1, r;\n}\nvar Na = ye;\nfunction Fa(r, e, n, a, t, s, i) {\n    var h = 1 / (e - n), o = 1 / (a - t), c = 1 / (s - i);\n    return r[0] = -2 * h, r[1] = 0, r[2] = 0, r[3] = 0, r[4] = 0, r[5] = -2 * o, r[6] = 0, r[7] = 0, r[8] = 0, r[9] = 0, r[10] = c, r[11] = 0, r[12] = (e + n) * h, r[13] = (t + a) * o, r[14] = s * c, r[15] = 1, r;\n}\n_c42 = Fa;\nfunction Sa(r, e, n, a) {\n    var t, s, i, h, o, c, l, f, p, v, m = e[0], d = e[1], y = e[2], u = a[0], x = a[1], M = a[2], b = n[0], _ = n[1], g = n[2];\n    return Math.abs(m - b) < S && Math.abs(d - _) < S && Math.abs(y - g) < S ? he(r) : (l = m - b, f = d - _, p = y - g, v = 1 / Math.hypot(l, f, p), l *= v, f *= v, p *= v, t = x * p - M * f, s = M * l - u * p, i = u * f - x * l, v = Math.hypot(t, s, i), v ? (v = 1 / v, t *= v, s *= v, i *= v) : (t = 0, s = 0, i = 0), h = f * i - p * s, o = p * t - l * i, c = l * s - f * t, v = Math.hypot(h, o, c), v ? (v = 1 / v, h *= v, o *= v, c *= v) : (h = 0, o = 0, c = 0), r[0] = t, r[1] = h, r[2] = l, r[3] = 0, r[4] = s, r[5] = o, r[6] = f, r[7] = 0, r[8] = i, r[9] = c, r[10] = p, r[11] = 0, r[12] = -(t * m + s * d + i * y), r[13] = -(h * m + o * d + c * y), r[14] = -(l * m + f * d + p * y), r[15] = 1, r);\n}\n_c43 = Sa;\nfunction Ia(r, e, n, a) {\n    var t = e[0], s = e[1], i = e[2], h = a[0], o = a[1], c = a[2], l = t - n[0], f = s - n[1], p = i - n[2], v = l * l + f * f + p * p;\n    v > 0 && (v = 1 / Math.sqrt(v), l *= v, f *= v, p *= v);\n    var m = o * p - c * f, d = c * l - h * p, y = h * f - o * l;\n    return v = m * m + d * d + y * y, v > 0 && (v = 1 / Math.sqrt(v), m *= v, d *= v, y *= v), r[0] = m, r[1] = d, r[2] = y, r[3] = 0, r[4] = f * y - p * d, r[5] = p * m - l * y, r[6] = l * d - f * m, r[7] = 0, r[8] = l, r[9] = f, r[10] = p, r[11] = 0, r[12] = t, r[13] = s, r[14] = i, r[15] = 1, r;\n}\n_c44 = Ia;\nfunction Ca(r) {\n    return \"mat4(\" + r[0] + \", \" + r[1] + \", \" + r[2] + \", \" + r[3] + \", \" + r[4] + \", \" + r[5] + \", \" + r[6] + \", \" + r[7] + \", \" + r[8] + \", \" + r[9] + \", \" + r[10] + \", \" + r[11] + \", \" + r[12] + \", \" + r[13] + \", \" + r[14] + \", \" + r[15] + \")\";\n}\n_c45 = Ca;\nfunction La(r) {\n    return Math.hypot(r[0], r[1], r[2], r[3], r[4], r[5], r[6], r[7], r[8], r[9], r[10], r[11], r[12], r[13], r[14], r[15]);\n}\n_c46 = La;\nfunction Da(r, e, n) {\n    return r[0] = e[0] + n[0], r[1] = e[1] + n[1], r[2] = e[2] + n[2], r[3] = e[3] + n[3], r[4] = e[4] + n[4], r[5] = e[5] + n[5], r[6] = e[6] + n[6], r[7] = e[7] + n[7], r[8] = e[8] + n[8], r[9] = e[9] + n[9], r[10] = e[10] + n[10], r[11] = e[11] + n[11], r[12] = e[12] + n[12], r[13] = e[13] + n[13], r[14] = e[14] + n[14], r[15] = e[15] + n[15], r;\n}\n_c47 = Da;\nfunction de(r, e, n) {\n    return r[0] = e[0] - n[0], r[1] = e[1] - n[1], r[2] = e[2] - n[2], r[3] = e[3] - n[3], r[4] = e[4] - n[4], r[5] = e[5] - n[5], r[6] = e[6] - n[6], r[7] = e[7] - n[7], r[8] = e[8] - n[8], r[9] = e[9] - n[9], r[10] = e[10] - n[10], r[11] = e[11] - n[11], r[12] = e[12] - n[12], r[13] = e[13] - n[13], r[14] = e[14] - n[14], r[15] = e[15] - n[15], r;\n}\nfunction Ea(r, e, n) {\n    return r[0] = e[0] * n, r[1] = e[1] * n, r[2] = e[2] * n, r[3] = e[3] * n, r[4] = e[4] * n, r[5] = e[5] * n, r[6] = e[6] * n, r[7] = e[7] * n, r[8] = e[8] * n, r[9] = e[9] * n, r[10] = e[10] * n, r[11] = e[11] * n, r[12] = e[12] * n, r[13] = e[13] * n, r[14] = e[14] * n, r[15] = e[15] * n, r;\n}\n_c48 = Ea;\nfunction Ta(r, e, n, a) {\n    return r[0] = e[0] + n[0] * a, r[1] = e[1] + n[1] * a, r[2] = e[2] + n[2] * a, r[3] = e[3] + n[3] * a, r[4] = e[4] + n[4] * a, r[5] = e[5] + n[5] * a, r[6] = e[6] + n[6] * a, r[7] = e[7] + n[7] * a, r[8] = e[8] + n[8] * a, r[9] = e[9] + n[9] * a, r[10] = e[10] + n[10] * a, r[11] = e[11] + n[11] * a, r[12] = e[12] + n[12] * a, r[13] = e[13] + n[13] * a, r[14] = e[14] + n[14] * a, r[15] = e[15] + n[15] * a, r;\n}\n_c49 = Ta;\nfunction Pa(r, e) {\n    return r[0] === e[0] && r[1] === e[1] && r[2] === e[2] && r[3] === e[3] && r[4] === e[4] && r[5] === e[5] && r[6] === e[6] && r[7] === e[7] && r[8] === e[8] && r[9] === e[9] && r[10] === e[10] && r[11] === e[11] && r[12] === e[12] && r[13] === e[13] && r[14] === e[14] && r[15] === e[15];\n}\n_c50 = Pa;\nfunction Va(r, e) {\n    var n = r[0], a = r[1], t = r[2], s = r[3], i = r[4], h = r[5], o = r[6], c = r[7], l = r[8], f = r[9], p = r[10], v = r[11], m = r[12], d = r[13], y = r[14], u = r[15], x = e[0], M = e[1], b = e[2], _ = e[3], g = e[4], N = e[5], q = e[6], w = e[7], F = e[8], L = e[9], T = e[10], V = e[11], z = e[12], Y = e[13], or = e[14], hr = e[15];\n    return Math.abs(n - x) <= S * Math.max(1, Math.abs(n), Math.abs(x)) && Math.abs(a - M) <= S * Math.max(1, Math.abs(a), Math.abs(M)) && Math.abs(t - b) <= S * Math.max(1, Math.abs(t), Math.abs(b)) && Math.abs(s - _) <= S * Math.max(1, Math.abs(s), Math.abs(_)) && Math.abs(i - g) <= S * Math.max(1, Math.abs(i), Math.abs(g)) && Math.abs(h - N) <= S * Math.max(1, Math.abs(h), Math.abs(N)) && Math.abs(o - q) <= S * Math.max(1, Math.abs(o), Math.abs(q)) && Math.abs(c - w) <= S * Math.max(1, Math.abs(c), Math.abs(w)) && Math.abs(l - F) <= S * Math.max(1, Math.abs(l), Math.abs(F)) && Math.abs(f - L) <= S * Math.max(1, Math.abs(f), Math.abs(L)) && Math.abs(p - T) <= S * Math.max(1, Math.abs(p), Math.abs(T)) && Math.abs(v - V) <= S * Math.max(1, Math.abs(v), Math.abs(V)) && Math.abs(m - z) <= S * Math.max(1, Math.abs(m), Math.abs(z)) && Math.abs(d - Y) <= S * Math.max(1, Math.abs(d), Math.abs(Y)) && Math.abs(y - or) <= S * Math.max(1, Math.abs(y), Math.abs(or)) && Math.abs(u - hr) <= S * Math.max(1, Math.abs(u), Math.abs(hr));\n}\n_c51 = Va;\nvar Oa = ce, ja = de;\nvar pr = {};\nur(pr, {\n    add: ()=>ht,\n    calculateW: ()=>Xa,\n    clone: ()=>tt,\n    conjugate: ()=>et,\n    copy: ()=>it,\n    create: ()=>Nr,\n    dot: ()=>Pe,\n    equals: ()=>dt,\n    exactEquals: ()=>yt,\n    exp: ()=>Le,\n    fromEuler: ()=>nt,\n    fromMat3: ()=>Ee,\n    fromValues: ()=>st,\n    getAngle: ()=>$a,\n    getAxisAngle: ()=>Qa,\n    identity: ()=>Ga,\n    invert: ()=>rt,\n    len: ()=>pt,\n    length: ()=>Ve,\n    lerp: ()=>lt,\n    ln: ()=>De,\n    mul: ()=>ct,\n    multiply: ()=>Ce,\n    normalize: ()=>Fr,\n    pow: ()=>Ka,\n    random: ()=>Ja,\n    rotateX: ()=>Ha,\n    rotateY: ()=>Wa,\n    rotateZ: ()=>Za,\n    rotationTo: ()=>vt,\n    scale: ()=>Te,\n    set: ()=>ot,\n    setAxes: ()=>ut,\n    setAxisAngle: ()=>Ie,\n    slerp: ()=>mr,\n    sqlerp: ()=>mt,\n    sqrLen: ()=>ft,\n    squaredLength: ()=>Oe,\n    str: ()=>at\n});\nfunction zr() {\n    var r = new P(3);\n    return P != Float32Array && (r[0] = 0, r[1] = 0, r[2] = 0), r;\n}\nfunction Ra(r) {\n    var e = r[0], n = r[1], a = r[2];\n    return Math.hypot(e, n, a);\n}\n_c52 = Ra;\nfunction qr(r, e, n) {\n    var a = new P(3);\n    return a[0] = r, a[1] = e, a[2] = n, a;\n}\nfunction ve(r, e) {\n    var n = e[0], a = e[1], t = e[2], s = n * n + a * a + t * t;\n    return s > 0 && (s = 1 / Math.sqrt(s)), r[0] = e[0] * s, r[1] = e[1] * s, r[2] = e[2] * s, r;\n}\nfunction me(r, e) {\n    return r[0] * e[0] + r[1] * e[1] + r[2] * e[2];\n}\nfunction vr(r, e, n) {\n    var a = e[0], t = e[1], s = e[2], i = n[0], h = n[1], o = n[2];\n    return r[0] = t * o - s * h, r[1] = s * i - a * o, r[2] = a * h - t * i, r;\n}\nvar ue = Ra;\nvar Zt = function() {\n    var r = zr();\n    return function(e, n, a, t, s, i) {\n        var h, o;\n        for(n || (n = 3), a || (a = 0), t ? o = Math.min(t * n + a, e.length) : o = e.length, h = a; h < o; h += n)r[0] = e[h], r[1] = e[h + 1], r[2] = e[h + 2], s(r, r, i), e[h] = r[0], e[h + 1] = r[1], e[h + 2] = r[2];\n        return e;\n    };\n}();\nfunction Ua() {\n    var r = new P(4);\n    return P != Float32Array && (r[0] = 0, r[1] = 0, r[2] = 0, r[3] = 0), r;\n}\n_c53 = Ua;\nfunction xe(r) {\n    var e = new P(4);\n    return e[0] = r[0], e[1] = r[1], e[2] = r[2], e[3] = r[3], e;\n}\nfunction ge(r, e, n, a) {\n    var t = new P(4);\n    return t[0] = r, t[1] = e, t[2] = n, t[3] = a, t;\n}\nfunction Me(r, e) {\n    return r[0] = e[0], r[1] = e[1], r[2] = e[2], r[3] = e[3], r;\n}\n_c54 = Me;\nfunction _e(r, e, n, a, t) {\n    return r[0] = e, r[1] = n, r[2] = a, r[3] = t, r;\n}\nfunction be(r, e, n) {\n    return r[0] = e[0] + n[0], r[1] = e[1] + n[1], r[2] = e[2] + n[2], r[3] = e[3] + n[3], r;\n}\nfunction Ae(r, e, n) {\n    return r[0] = e[0] * n, r[1] = e[1] * n, r[2] = e[2] * n, r[3] = e[3] * n, r;\n}\n_c55 = Ae;\nfunction we(r) {\n    var e = r[0], n = r[1], a = r[2], t = r[3];\n    return Math.hypot(e, n, a, t);\n}\nfunction ke(r) {\n    var e = r[0], n = r[1], a = r[2], t = r[3];\n    return e * e + n * n + a * a + t * t;\n}\nfunction ze(r, e) {\n    var n = e[0], a = e[1], t = e[2], s = e[3], i = n * n + a * a + t * t + s * s;\n    return i > 0 && (i = 1 / Math.sqrt(i)), r[0] = n * i, r[1] = a * i, r[2] = t * i, r[3] = s * i, r;\n}\nfunction qe(r, e) {\n    return r[0] * e[0] + r[1] * e[1] + r[2] * e[2] + r[3] * e[3];\n}\nfunction Ne(r, e, n, a) {\n    var t = e[0], s = e[1], i = e[2], h = e[3];\n    return r[0] = t + a * (n[0] - t), r[1] = s + a * (n[1] - s), r[2] = i + a * (n[2] - i), r[3] = h + a * (n[3] - h), r;\n}\n_c56 = Ne;\nfunction Fe(r, e) {\n    return r[0] === e[0] && r[1] === e[1] && r[2] === e[2] && r[3] === e[3];\n}\n_c57 = Fe;\nfunction Se(r, e) {\n    var n = r[0], a = r[1], t = r[2], s = r[3], i = e[0], h = e[1], o = e[2], c = e[3];\n    return Math.abs(n - i) <= S * Math.max(1, Math.abs(n), Math.abs(i)) && Math.abs(a - h) <= S * Math.max(1, Math.abs(a), Math.abs(h)) && Math.abs(t - o) <= S * Math.max(1, Math.abs(t), Math.abs(o)) && Math.abs(s - c) <= S * Math.max(1, Math.abs(s), Math.abs(c));\n}\n_c58 = Se;\nvar Xt = function() {\n    var r = Ua();\n    return function(e, n, a, t, s, i) {\n        var h, o;\n        for(n || (n = 4), a || (a = 0), t ? o = Math.min(t * n + a, e.length) : o = e.length, h = a; h < o; h += n)r[0] = e[h], r[1] = e[h + 1], r[2] = e[h + 2], r[3] = e[h + 3], s(r, r, i), e[h] = r[0], e[h + 1] = r[1], e[h + 2] = r[2], e[h + 3] = r[3];\n        return e;\n    };\n}();\nfunction Nr() {\n    var r = new P(4);\n    return P != Float32Array && (r[0] = 0, r[1] = 0, r[2] = 0), r[3] = 1, r;\n}\n_c59 = Nr;\nfunction Ga(r) {\n    return r[0] = 0, r[1] = 0, r[2] = 0, r[3] = 1, r;\n}\n_c60 = Ga;\nfunction Ie(r, e, n) {\n    n = n * .5;\n    var a = Math.sin(n);\n    return r[0] = a * e[0], r[1] = a * e[1], r[2] = a * e[2], r[3] = Math.cos(n), r;\n}\n_c61 = Ie;\nfunction Qa(r, e) {\n    var n = Math.acos(e[3]) * 2, a = Math.sin(n / 2);\n    return a > S ? (r[0] = e[0] / a, r[1] = e[1] / a, r[2] = e[2] / a) : (r[0] = 1, r[1] = 0, r[2] = 0), n;\n}\n_c62 = Qa;\nfunction $a(r, e) {\n    var n = Pe(r, e);\n    return Math.acos(2 * n * n - 1);\n}\nfunction Ce(r, e, n) {\n    var a = e[0], t = e[1], s = e[2], i = e[3], h = n[0], o = n[1], c = n[2], l = n[3];\n    return r[0] = a * l + i * h + t * c - s * o, r[1] = t * l + i * o + s * h - a * c, r[2] = s * l + i * c + a * o - t * h, r[3] = i * l - a * h - t * o - s * c, r;\n}\n_c63 = Ce;\nfunction Ha(r, e, n) {\n    n *= .5;\n    var a = e[0], t = e[1], s = e[2], i = e[3], h = Math.sin(n), o = Math.cos(n);\n    return r[0] = a * o + i * h, r[1] = t * o + s * h, r[2] = s * o - t * h, r[3] = i * o - a * h, r;\n}\n_c64 = Ha;\nfunction Wa(r, e, n) {\n    n *= .5;\n    var a = e[0], t = e[1], s = e[2], i = e[3], h = Math.sin(n), o = Math.cos(n);\n    return r[0] = a * o - s * h, r[1] = t * o + i * h, r[2] = s * o + a * h, r[3] = i * o - t * h, r;\n}\n_c65 = Wa;\nfunction Za(r, e, n) {\n    n *= .5;\n    var a = e[0], t = e[1], s = e[2], i = e[3], h = Math.sin(n), o = Math.cos(n);\n    return r[0] = a * o + t * h, r[1] = t * o - a * h, r[2] = s * o + i * h, r[3] = i * o - s * h, r;\n}\n_c66 = Za;\nfunction Xa(r, e) {\n    var n = e[0], a = e[1], t = e[2];\n    return r[0] = n, r[1] = a, r[2] = t, r[3] = Math.sqrt(Math.abs(1 - n * n - a * a - t * t)), r;\n}\n_c67 = Xa;\nfunction Le(r, e) {\n    var n = e[0], a = e[1], t = e[2], s = e[3], i = Math.sqrt(n * n + a * a + t * t), h = Math.exp(s), o = i > 0 ? h * Math.sin(i) / i : 0;\n    return r[0] = n * o, r[1] = a * o, r[2] = t * o, r[3] = h * Math.cos(i), r;\n}\n_c68 = Le;\nfunction De(r, e) {\n    var n = e[0], a = e[1], t = e[2], s = e[3], i = Math.sqrt(n * n + a * a + t * t), h = i > 0 ? Math.atan2(i, s) / i : 0;\n    return r[0] = n * h, r[1] = a * h, r[2] = t * h, r[3] = .5 * Math.log(n * n + a * a + t * t + s * s), r;\n}\n_c69 = De;\nfunction Ka(r, e, n) {\n    return De(r, e), Te(r, r, n), Le(r, r), r;\n}\n_c70 = Ka;\nfunction mr(r, e, n, a) {\n    var t = e[0], s = e[1], i = e[2], h = e[3], o = n[0], c = n[1], l = n[2], f = n[3], p, v, m, d, y;\n    return v = t * o + s * c + i * l + h * f, v < 0 && (v = -v, o = -o, c = -c, l = -l, f = -f), 1 - v > S ? (p = Math.acos(v), m = Math.sin(p), d = Math.sin((1 - a) * p) / m, y = Math.sin(a * p) / m) : (d = 1 - a, y = a), r[0] = d * t + y * o, r[1] = d * s + y * c, r[2] = d * i + y * l, r[3] = d * h + y * f, r;\n}\nfunction Ja(r) {\n    var e = ir(), n = ir(), a = ir(), t = Math.sqrt(1 - e), s = Math.sqrt(e);\n    return r[0] = t * Math.sin(2 * Math.PI * n), r[1] = t * Math.cos(2 * Math.PI * n), r[2] = s * Math.sin(2 * Math.PI * a), r[3] = s * Math.cos(2 * Math.PI * a), r;\n}\n_c71 = Ja;\nfunction rt(r, e) {\n    var n = e[0], a = e[1], t = e[2], s = e[3], i = n * n + a * a + t * t + s * s, h = i ? 1 / i : 0;\n    return r[0] = -n * h, r[1] = -a * h, r[2] = -t * h, r[3] = s * h, r;\n}\nfunction et(r, e) {\n    return r[0] = -e[0], r[1] = -e[1], r[2] = -e[2], r[3] = e[3], r;\n}\nfunction Ee(r, e) {\n    var n = e[0] + e[4] + e[8], a;\n    if (n > 0) a = Math.sqrt(n + 1), r[3] = .5 * a, a = .5 / a, r[0] = (e[5] - e[7]) * a, r[1] = (e[6] - e[2]) * a, r[2] = (e[1] - e[3]) * a;\n    else {\n        var t = 0;\n        e[4] > e[0] && (t = 1), e[8] > e[t * 3 + t] && (t = 2);\n        var s = (t + 1) % 3, i = (t + 2) % 3;\n        a = Math.sqrt(e[t * 3 + t] - e[s * 3 + s] - e[i * 3 + i] + 1), r[t] = .5 * a, a = .5 / a, r[3] = (e[s * 3 + i] - e[i * 3 + s]) * a, r[s] = (e[s * 3 + t] + e[t * 3 + s]) * a, r[i] = (e[i * 3 + t] + e[t * 3 + i]) * a;\n    }\n    return r;\n}\n_c72 = Ee;\nfunction nt(r, e, n, a) {\n    var t = .5 * Math.PI / 180;\n    e *= t, n *= t, a *= t;\n    var s = Math.sin(e), i = Math.cos(e), h = Math.sin(n), o = Math.cos(n), c = Math.sin(a), l = Math.cos(a);\n    return r[0] = s * o * l - i * h * c, r[1] = i * h * l + s * o * c, r[2] = i * o * c - s * h * l, r[3] = i * o * l + s * h * c, r;\n}\nfunction at(r) {\n    return \"quat(\" + r[0] + \", \" + r[1] + \", \" + r[2] + \", \" + r[3] + \")\";\n}\nvar tt = xe, st = ge, it = Me, ot = _e, ht = be, ct = Ce, Te = Ae, Pe = qe, lt = Ne, Ve = we, pt = Ve, Oe = ke, ft = Oe, Fr = ze, yt = Fe, dt = Se, vt = function() {\n    var r = zr(), e = qr(1, 0, 0), n = qr(0, 1, 0);\n    return function(a, t, s) {\n        var i = me(t, s);\n        return i < -.999999 ? (vr(r, e, t), ue(r) < 1e-6 && vr(r, n, t), ve(r, r), Ie(a, r, Math.PI), a) : i > .999999 ? (a[0] = 0, a[1] = 0, a[2] = 0, a[3] = 1, a) : (vr(r, t, s), a[0] = r[0], a[1] = r[1], a[2] = r[2], a[3] = 1 + i, Fr(a, a));\n    };\n}(), mt = function() {\n    var r = Nr(), e = Nr();\n    return function(n, a, t, s, i, h) {\n        return mr(r, a, i, h), mr(e, t, s, h), mr(n, r, e, 2 * h * (1 - h)), n;\n    };\n}(), ut = function() {\n    var r = kr();\n    return function(e, n, a, t) {\n        return r[0] = a[0], r[3] = a[1], r[6] = a[2], r[1] = t[0], r[4] = t[1], r[7] = t[2], r[2] = -n[0], r[5] = -n[1], r[8] = -n[2], Fr(e, Ee(e, r));\n    };\n}();\nvar je = {\n    xyz: 3,\n    color: 3,\n    opacity: 1,\n    scaling: 3,\n    quaternion: 4,\n    harmonics: 3\n}, ar = class {\n    get buffer() {\n        return this._buffer;\n    }\n    get decoded() {\n        return this._decoded || (this._decoded = this.decodeBuffer()), this._decoded;\n    }\n    get colorsA() {\n        let e = .28209479177387814, n = this.decoded.color.denormDequant(), a = this.decoded.opacity.denormDequant(), t = (0, nr.default)(new Float32Array(n.shape[0] * 4), [\n            n.shape[0],\n            4\n        ]);\n        return R.mulseq(n, e), R.addseq(n, .5), R.mulseq(n, 255), R.maxseq(n, 0), R.minseq(n, 255), this.version === \"\" && (R.negeq(a), R.expeq(a), R.addseq(a, 1), R.recipeq(a), R.mulseq(a, 255)), R.assign(t.hi(n.shape[0], 3).lo(0, 0), n), R.assign(t.hi(n.shape[0], 4).lo(0, 3), a), (0, nr.default)(new Uint8Array(t.data), [\n            n.shape[0],\n            4\n        ]).data;\n    }\n    get nsplats() {\n        return this.decoded.nsplats;\n    }\n    getSplatCount() {\n        return this.decoded.nsplats;\n    }\n    get precomputedCovarianceBufferData() {\n        return this._precomputedCovarianceBufferData;\n    }\n    decodeBuffer() {\n        let { splatCount: e, chunkCount: n, chunkSize: a, typeChunks: t, vertexData: s, propertiesDesc: i, version: h } = this.decodeHeader();\n        this.version = h;\n        let o = {\n            xyz: i.xyz.compressionMethod,\n            color: i.color.compressionMethod,\n            opacity: i.opacity.compressionMethod,\n            scaling: i.scaling.compressionMethod,\n            quaternion: i.quaternion.compressionMethod,\n            chunkSize: a\n        };\n        i.harmonics_0 && (o.harmonics = i.harmonics_0.compressionMethod);\n        let c = s.byteOffset, l = Array(Object.keys(i).length);\n        for(let x in i)l[i[x].index] = {\n            name: x,\n            method: i[x].compressionMethod\n        };\n        let f = n * 2 * 4, p = c, v = t === \"dynamic\" ? n * 2 : 0, m, d = !1;\n        if (v > 0) {\n            let x = new Uint16Array(s.buffer.slice(p, p + v));\n            p += v, m = Array.from(x), d = !0;\n        }\n        let y = {};\n        for (let x of l){\n            let M = 0, b = !0;\n            if (x.method === \"norm8x\") M = e * 1 * je[x.name];\n            else if (x.method === \"norm11\") M = e * 4;\n            else if (x.method === \"norm565\") M = e * 2;\n            else throw b = !1, new Error(\"Not Implemented format: \".concat(x.method));\n            let _;\n            if (b) {\n                let q = s.buffer.slice(p, p + f);\n                _ = (0, nr.default)(new Float32Array(q), [\n                    n,\n                    2\n                ]), p += f;\n            } else throw new Error(\"loading chunk byt hasnot minmax!\");\n            let g = s.buffer.slice(p, p + M);\n            p += M;\n            let N;\n            if (x.method === \"norm8x\") N = (0, nr.default)(new Uint8Array(g), [\n                e,\n                je[x.name]\n            ]);\n            else if (x.method === \"norm11\") N = (0, nr.default)(new Uint32Array(g));\n            else if (x.method === \"norm565\") N = (0, nr.default)(new Uint16Array(g));\n            else throw new Error(\"Not Implemented format: \".concat(x.method));\n            y[x.name] = new E(N, _, a, x.method, m, d);\n        }\n        let u = [];\n        for(let x = 0; x < 15; x++){\n            let M = y[\"harmonics_\".concat(x)];\n            M && (u.push(M), delete y[\"harmonics_\".concat(x)]);\n        }\n        return u.length > 0 && (y.harmonics = u), new X(o, y.xyz, y.scaling, y.color, y.opacity, y.quaternion, y.harmonics, m);\n    }\n    buildPreComputedBuffers() {\n        let a = this.decoded, t = a.nsplats, s = new ArrayBuffer(24 * t), i = new Float32Array(s), h = a.scaling.denormDequant(), o = a.quaternion.denormDequant(), c = pr.create(), l = W.create(), f = W.create(), p = W.create(), v = lr.create();\n        for(let m = 0; m < t; m++){\n            lr.fromScaling(v, [\n                Math.exp(h.get(m, 0)),\n                Math.exp(h.get(m, 1)),\n                Math.exp(h.get(m, 2))\n            ]), W.fromMat4(f, v), pr.set(c, o.get(m, 0), o.get(m, 1), o.get(m, 2), o.get(m, 3)), W.fromQuat(l, c), W.multiply(p, l, f);\n            let d = p;\n            i[6 * m] = d[0] * d[0] + d[3] * d[3] + d[6] * d[6], i[6 * m + 1] = d[0] * d[1] + d[3] * d[4] + d[6] * d[7], i[6 * m + 2] = d[0] * d[2] + d[3] * d[5] + d[6] * d[8], i[6 * m + 3] = d[1] * d[1] + d[4] * d[4] + d[7] * d[7], i[6 * m + 4] = d[1] * d[2] + d[4] * d[5] + d[7] * d[8], i[6 * m + 5] = d[2] * d[2] + d[5] * d[5] + d[8] * d[8];\n        }\n        this._precomputedCovarianceBufferData = s;\n    }\n    decodeHeader() {\n        let e = this._buffer, n = new TextDecoder, a = 0, t = \"\", s = 100;\n        for(;;){\n            if (a + s >= e.byteLength) throw new Error(\"End of file reached while searching for end of header\");\n            let y = new Uint8Array(e, a, s);\n            t += n.decode(y), a += s;\n            let u = a - s * 2, x = new Uint8Array(e, Math.max(0, u), u >= 0 ? s * 2 : s);\n            if (n.decode(x).includes(\"end_header\")) break;\n        }\n        let i = t.split(\"\\n\"), h = 0, o = 0, c = 0, l = 0, f = \"\", p = \"\", v = {};\n        for(let y = 0; y < i.length; y++){\n            let u = i[y].trim();\n            var _u_split_;\n            if (u.startsWith(\"version\")) p = (_u_split_ = u.split(\" \")[1]) !== null && _u_split_ !== void 0 ? _u_split_ : \"\";\n            else if (u.startsWith(\"element vertex\")) {\n                let x = u.match(/\\d+/);\n                x && (h = parseInt(x[0]));\n            } else if (u.startsWith(\"property\")) {\n                let x = u.match(/(\\w+)\\s+(\\w+)\\s+(\\w+)/);\n                if (x) {\n                    let M = x[2], b = x[3];\n                    v[M] = {\n                        compressionMethod: b,\n                        index: l\n                    }, l++;\n                }\n            } else if (u.startsWith(\"element chunks\")) {\n                let x = u.match(/\\d+/);\n                x && (o = parseInt(x[0]));\n            } else if (u.startsWith(\"element chunkSize\")) {\n                let x = u.match(/\\d+/);\n                x && (c = parseInt(x[0]));\n            } else if (u.startsWith(\"element typeChunks\")) {\n                let x = u.match(/(\\w+)\\s+(\\w+)\\s+(\\w+)/);\n                x && (f = x[3]);\n            } else if (u === \"end_header\") break;\n        }\n        let m = t.indexOf(\"end_header\") + 10 + 1, d = new DataView(e, m);\n        return {\n            splatCount: h,\n            chunkCount: o,\n            chunkSize: c,\n            typeChunks: f,\n            vertexData: d,\n            propertiesDesc: v,\n            version: p\n        };\n    }\n    pruneSplats(e) {\n        let a = this.decodeBuffer().pruneSplats(e);\n        return ar.fromCompressedGaussianSplats(a, this.version);\n    }\n    static fromCompressedGaussianSplats(e, n) {\n        let a = e.xyz.length, t = e.xyz.nchunks, s = \"gspline\\nversion \".concat(n, \"\\nelement vertex \").concat(a, \"\\nelement chunks \").concat(t, \"\\nelement chunkSize \").concat(e.chunkSize, \"\\nelement typeChunks \").concat(e.isDynamicChunks ? \"dynamic\" : \"static\", \"\\nproperty xyz \").concat(e.xyz.method, \"\\nproperty color \").concat(e.color.method, \"\\nproperty opacity \").concat(e.opacity.method, \"\\nproperty scaling \").concat(e.scaling.method, \"\\nproperty quaternion \").concat(e.quaternion.method);\n        if (e.harmonics && e.harmonics.length > 0) for(let F = 0; F < e.harmonics.length; F++)s = \"\".concat(s, \"\\nproperty harmonics_\").concat(F, \" \").concat(e.harmonics[F].method);\n        s = \"\".concat(s, \"\\nend_header\\n\");\n        let h = new TextEncoder().encode(s), o = t * 2 * 4, c = e.xyz.quantized.data.buffer.byteLength, l = e.xyz instanceof E ? o : 0, f = e.color.quantized.data.buffer.byteLength, p = e.color instanceof E ? o : 0, v = e.opacity.quantized.data.buffer.byteLength, m = e.opacity instanceof E ? o : 0, d = e.scaling.quantized.data.buffer.byteLength, y = e.scaling instanceof E ? o : 0, u = e.quaternion.quantized.data.buffer.byteLength, x = e.quaternion instanceof E ? o : 0, M = e.variableChunkSize ? Uint16Array.from(e.variableChunkSize) : void 0, b = M ? M.byteLength : 0, _ = h.byteLength + b + c + l + f + p + v + m + d + y + u + x, g = 0, N = 0;\n        if (e.harmonics && e.harmonics.length > 0) for(let F = 0; F < e.harmonics.length; F++)g += e.harmonics[F].quantized.data.buffer.byteLength, N += e.harmonics[F] instanceof E ? o : 0;\n        g = 0, N = 0, _ += g + N;\n        let q = new Uint8Array(_), w = 0;\n        if (q.set(h, w), w += h.byteLength, b > 0 && (q.set(new Uint8Array(M.buffer), w), w += b), e.xyz instanceof E && (q.set(new Uint8Array(e.xyz.minmaxMatrix.data.buffer), w), w += o), q.set(new Uint8Array(e.xyz.quantized.data.buffer), w), w += c, e.color instanceof E && (q.set(new Uint8Array(e.color.minmaxMatrix.data.buffer), w), w += o), q.set(new Uint8Array(e.color.quantized.data.buffer), w), w += f, e.opacity instanceof E && (q.set(new Uint8Array(e.opacity.minmaxMatrix.data.buffer), w), w += o), q.set(new Uint8Array(e.opacity.quantized.data.buffer), w), w += v, e.scaling instanceof E && (q.set(new Uint8Array(e.scaling.minmaxMatrix.data.buffer), w), w += o), q.set(new Uint8Array(e.scaling.quantized.data.buffer), w), w += d, e.quaternion instanceof E && (q.set(new Uint8Array(e.quaternion.minmaxMatrix.data.buffer), w), w += o), q.set(new Uint8Array(e.quaternion.quantized.data.buffer), w), w += u, g > 0 && e.harmonics && e.harmonics.length > 0) for(let F = 0; F < e.harmonics.length; F++){\n            let L = e.harmonics[F];\n            L instanceof E && (q.set(new Uint8Array(L.minmaxMatrix.data.buffer), w), w += o), q.set(new Uint8Array(L.quantized.data.buffer), w), w += L.quantized.data.byteLength;\n        }\n        return new ar(q.buffer);\n    }\n    constructor(e){\n        this.version = \"\";\n        this._buffer = e;\n    }\n};\n\nvar _c, _c1, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10, _c11, _c12, _c13, _c14, _c15, _c16, _c17, _c18, _c19, _c20, _c21, _c22, _c23, _c24, _c25, _c26, _c27, _c28, _c29, _c30, _c31, _c32, _c33, _c34, _c35, _c36, _c37, _c38, _c39, _c40, _c41, _c42, _c43, _c44, _c45, _c46, _c47, _c48, _c49, _c50, _c51, _c52, _c53, _c54, _c55, _c56, _c57, _c58, _c59, _c60, _c61, _c62, _c63, _c64, _c65, _c66, _c67, _c68, _c69, _c70, _c71, _c72;\n$RefreshReg$(_c, \"Qe\");\n$RefreshReg$(_c1, \"Q\");\n$RefreshReg$(_c2, \"Lr$K\");\n$RefreshReg$(_c3, \"Lr\");\n$RefreshReg$(_c4, \"Tr$K\");\n$RefreshReg$(_c5, \"Tr\");\n$RefreshReg$(_c6, \"Or$K\");\n$RefreshReg$(_c7, \"Or\");\n$RefreshReg$(_c8, \"Br$K\");\n$RefreshReg$(_c9, \"Br\");\n$RefreshReg$(_c10, \"Yr$K\");\n$RefreshReg$(_c11, \"Yr\");\n$RefreshReg$(_c12, \"Qr$K\");\n$RefreshReg$(_c13, \"Qr\");\n$RefreshReg$(_c14, \"Mn\");\n$RefreshReg$(_c15, \"Mr\");\n$RefreshReg$(_c16, \"Ar\");\n$RefreshReg$(_c17, \"An\");\n$RefreshReg$(_c18, \"Nn\");\n$RefreshReg$(_c19, \"Fn\");\n$RefreshReg$(_c20, \"Sn\");\n$RefreshReg$(_c21, \"In\");\n$RefreshReg$(_c22, \"Cn\");\n$RefreshReg$(_c23, \"Ln\");\n$RefreshReg$(_c24, \"Dn\");\n$RefreshReg$(_c25, \"En\");\n$RefreshReg$(_c26, \"Tn\");\n$RefreshReg$(_c27, \"Pn\");\n$RefreshReg$(_c28, \"Vn\");\n$RefreshReg$(_c29, \"On\");\n$RefreshReg$(_c30, \"Rn\");\n$RefreshReg$(_c31, \"Bn\");\n$RefreshReg$(_c32, \"Un\");\n$RefreshReg$(_c33, \"Yn\");\n$RefreshReg$(_c34, \"Gn\");\n$RefreshReg$(_c35, \"Qn\");\n$RefreshReg$(_c36, \"Hn\");\n$RefreshReg$(_c37, \"Xn\");\n$RefreshReg$(_c38, \"Kn\");\n$RefreshReg$(_c39, \"Jn\");\n$RefreshReg$(_c40, \"Ma\");\n$RefreshReg$(_c41, \"Aa\");\n$RefreshReg$(_c42, \"Fa\");\n$RefreshReg$(_c43, \"Sa\");\n$RefreshReg$(_c44, \"Ia\");\n$RefreshReg$(_c45, \"Ca\");\n$RefreshReg$(_c46, \"La\");\n$RefreshReg$(_c47, \"Da\");\n$RefreshReg$(_c48, \"Ea\");\n$RefreshReg$(_c49, \"Ta\");\n$RefreshReg$(_c50, \"Pa\");\n$RefreshReg$(_c51, \"Va\");\n$RefreshReg$(_c52, \"Ra\");\n$RefreshReg$(_c53, \"Ua\");\n$RefreshReg$(_c54, \"Me\");\n$RefreshReg$(_c55, \"Ae\");\n$RefreshReg$(_c56, \"Ne\");\n$RefreshReg$(_c57, \"Fe\");\n$RefreshReg$(_c58, \"Se\");\n$RefreshReg$(_c59, \"Nr\");\n$RefreshReg$(_c60, \"Ga\");\n$RefreshReg$(_c61, \"Ie\");\n$RefreshReg$(_c62, \"Qa\");\n$RefreshReg$(_c63, \"Ce\");\n$RefreshReg$(_c64, \"Ha\");\n$RefreshReg$(_c65, \"Wa\");\n$RefreshReg$(_c66, \"Za\");\n$RefreshReg$(_c67, \"Xa\");\n$RefreshReg$(_c68, \"Le\");\n$RefreshReg$(_c69, \"De\");\n$RefreshReg$(_c70, \"Ka\");\n$RefreshReg$(_c71, \"Ja\");\n$RefreshReg$(_c72, \"Ee\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@splinetool/runtime/build/gaussian-splat-compression.js\n"));

/***/ })

}]);